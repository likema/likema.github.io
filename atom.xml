<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Like的世界]]></title>
  <link href="http://www.malike.net.cn/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2020-07-19T16:54:37+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何导入 Ubuntu 重复 root 卷组]]></title>
    <link href="http://www.malike.net.cn/blog/2020/07/19/import-ubuntu-duplciate-root-vg/"/>
    <updated>2020-07-19T23:30:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2020/07/19/import-ubuntu-duplciate-root-vg</id>
    <content type="html"><![CDATA[<h2>场景</h2>

<ul>
<li>某云平台的 Ubuntu 虚拟机运行中突遇挂起，重启时挂起于某阶段，且无法进入恢复模式。</li>
<li>因该云平台限制或问题，无法通过 Ubuntu 安装 ISO 引导该虚拟机。</li>
<li>该虚拟机的 root 分区位于 LVM 卷组上。</li>
</ul>


<p>当时，基本思路为挂载问题虚拟机的虚拟盘至新虚拟机，通过后者导入原虚拟盘的卷组，从而备份出重要数据。</p>

<p>然而，恰好该云平台仅有该虚拟机的原始模板，新实例的虚拟盘与旧盘：</p>

<ul>
<li>PV UUID 重复</li>
<li>VG UUID 和名称重复</li>
</ul>


<p>导致无法激活旧卷组。</p>

<h2>办法</h2>

<p>以下以 VirtualBox 安装 Ubuntu 20.04 虚拟机，克隆其系统盘为新虚拟盘，并将新盘加入该虚拟机来模拟场景。</p>

<h3>启动系统</h3>

<p>启动虚拟机将遇到 <strong>重复 PV</strong> 错误：</p>

<p><img src="http://www.malike.net.cn/images/boot-focal-duplicate-root-vg.png" alt="Boot Ubuntu 20.04 duplicate root VG" /></p>

<p>进入 initramfs shell ，为了避免激活 root 卷组失败，暂时删除 <code>/dev/sdb</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span><span class="m">1</span> &gt; /sys/block/sdb/device/delete
</span><span class='line'>vgchange -ay
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>将正常进入系统。</p>

<h3>扫描 <code>/dev/sdb</code></h3>

<p>登录系统，切换 root 用户, 重新扫密 <code>/dev/sdb</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;- - -&#39;</span> &gt; /sys/class/scsi_host/host1/scan
</span></code></pre></td></tr></table></div></figure>


<p>查看内核日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dmesg <span class="p">|</span> tail
</span></code></pre></td></tr></table></div></figure>


<p>可发现 <code>/dev/sdb</code> 被加入系统：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>  747.671254<span class="o">]</span> scsi 1:0:0:0: Direct-Access     ATA      VBOX HARDDISK    1.0  PQ: <span class="m">0</span> ANSI: 5
</span><span class='line'><span class="o">[</span>  747.674322<span class="o">]</span> sd 1:0:0:0: <span class="o">[</span>sdb<span class="o">]</span> <span class="m">20971520</span> 512-byte logical blocks: <span class="o">(</span>10.7 GB/10.0 GiB<span class="o">)</span>
</span><span class='line'><span class="o">[</span>  747.674345<span class="o">]</span> sd 1:0:0:0: <span class="o">[</span>sdb<span class="o">]</span> Write Protect is off
</span><span class='line'><span class="o">[</span>  747.674350<span class="o">]</span> sd 1:0:0:0: <span class="o">[</span>sdb<span class="o">]</span> Mode Sense: <span class="m">00</span> 3a <span class="m">00</span> 00
</span><span class='line'><span class="o">[</span>  747.674382<span class="o">]</span> sd 1:0:0:0: <span class="o">[</span>sdb<span class="o">]</span> Write cache: enabled, <span class="nb">read </span>cache: enabled, doesn<span class="err">&#39;</span>t support DPO or FUA
</span><span class='line'><span class="o">[</span>  747.678357<span class="o">]</span> sd 1:0:0:0: Attached scsi generic sg1 <span class="nb">type </span>0
</span><span class='line'><span class="o">[</span>  747.681741<span class="o">]</span>  sdb: sdb1 sdb2 &lt; sdb5 &gt;
</span><span class='line'><span class="o">[</span>  747.681959<span class="o">]</span> sd 1:0:0:0: <span class="o">[</span>sdb<span class="o">]</span> Attached SCSI disk
</span></code></pre></td></tr></table></div></figure>


<p>这里 <code>/dev/sda</code> 位于 SCSI host 0 ，而 <code>/dev/sdb</code> 位于 SCSI host 1 。实际环境中，若无法确定目标盘在第几个 host ，可全部扫描一遍：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for</span> i in /sys/class/scsi_host/host*/scan<span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;- - -&#39;</span> &gt; <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h3>导入重复 VG</h3>

<p>以新卷组名 <code>ubuntu</code> 导入重复 VG ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vgimportclone -n ubuntu /dev/sdb5
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  WARNING: Not using device /dev/sdb5 <span class="k">for</span> PV kyDNAt-ONdQ-9MIb-4tJO-w8kC-WnEY-xmJ2qj.
</span><span class='line'>  WARNING: PV kyDNAt-ONdQ-9MIb-4tJO-w8kC-WnEY-xmJ2qj prefers device /dev/sda5 because device is used by LV.
</span></code></pre></td></tr></table></div></figure>


<p>最后，激活新卷组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vgchange -ay
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="m">2</span> logical volume<span class="o">(</span>s<span class="o">)</span> in volume group <span class="s2">&quot;ubuntu&quot;</span> now active
</span><span class='line'>  <span class="m">2</span> logical volume<span class="o">(</span>s<span class="o">)</span> in volume group <span class="s2">&quot;vgfocal&quot;</span> now active
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LXD简介（一）]]></title>
    <link href="http://www.malike.net.cn/blog/2020/05/05/lxd-tutorial-1/"/>
    <updated>2020-05-05T17:19:21+00:00</updated>
    <id>http://www.malike.net.cn/blog/2020/05/05/lxd-tutorial-1</id>
    <content type="html"><![CDATA[<p><a href="https://linuxcontainers.org/lxd/introduction/">LXD</a> 是基于LXC容器的管理程序（hypervisor），它由开发 Ubuntu 的公司 Canonical 创建和维护。</p>

<p>它由3个组建构成：</p>

<ul>
<li><code>lxd</code> ：系统守护进程，它导出能被本地和网络访问的 RESTful API</li>
<li><code>lxc</code> ：客户端命令行，它能跨网络管理多个容器主机。</li>
<li><code>nova-compute-lxd</code> ： OpenStack Nova 插件，它使 OpenStack 如虚拟机一般，管理容器。</li>
</ul>


<h2>一、安装</h2>

<p>因 Ubuntu 16.04 LXD 2.x 和 Ubuntu 18.04 LXD 3.x 版本都较旧，且 Ubuntu 20.04 放弃 <code>apt</code> 安装 LXD 。</p>

<p>请据 <a href="http://www.malike.net.cn/blog/2020/04/30/snap-tutorial/">Snap简介</a> 安装 LXD</p>

<p>为避免每次 <code>sudo lxc</code> ，可将 <code>lxd</code> 组加入当前（非root）用户的附加组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo usermod -aG lxd <span class="nv">$USER</span>
</span></code></pre></td></tr></table></div></figure>


<h2>二、初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lxd init
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Would you like to use LXD clustering? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>no<span class="o">]</span>:
</span><span class='line'>
</span><span class='line'><span class="c"># 配置存储池</span>
</span><span class='line'>Do you want to configure a new storage pool? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>yes<span class="o">]</span>:
</span><span class='line'>Name of the new storage pool <span class="o">[</span><span class="nv">default</span><span class="o">=</span>default<span class="o">]</span>:
</span><span class='line'>Name of the storage backend to use <span class="o">(</span>btrfs, dir, lvm, zfs, ceph<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>zfs<span class="o">]</span>: dir
</span><span class='line'>
</span><span class='line'>Would you like to connect to a MAAS server? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>no<span class="o">]</span>:
</span><span class='line'>
</span><span class='line'><span class="c"># 创建虚拟网络</span>
</span><span class='line'>Would you like to create a new <span class="nb">local </span>network bridge? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>yes<span class="o">]</span>:
</span><span class='line'>What should the new bridge be called? <span class="o">[</span><span class="nv">default</span><span class="o">=</span>lxdbr0<span class="o">]</span>:
</span><span class='line'>What IPv4 address should be used? <span class="o">(</span>CIDR subnet notation, “auto” or “none”<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>auto<span class="o">]</span>:
</span><span class='line'>What IPv6 address should be used? <span class="o">(</span>CIDR subnet notation, “auto” or “none”<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>auto<span class="o">]</span>:
</span><span class='line'>
</span><span class='line'><span class="c"># LXD 服务的网络配置</span>
</span><span class='line'>Would you like LXD to be available over the network? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>no<span class="o">]</span>: yes
</span><span class='line'>Address to <span class="nb">bind </span>LXD to <span class="o">(</span>not including port<span class="o">)</span> <span class="o">[</span><span class="nv">default</span><span class="o">=</span>all<span class="o">]</span>:
</span><span class='line'>Port to <span class="nb">bind </span>LXD to <span class="o">[</span><span class="nv">default</span><span class="o">=</span>8443<span class="o">]</span>:
</span><span class='line'>Trust password <span class="k">for</span> new clients:
</span></code></pre></td></tr></table></div></figure>


<p>参看： <a href="https://snapcraft.io/install/lxd/ubuntu">How to install LXD on Ubuntu</a></p>

<h3>修改密码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc config <span class="nb">set </span>core.trust_password <span class="s1">&#39;&lt;password&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三、镜像</h2>

<p>LXD 默认提供3个远程镜像：</p>

<ul>
<li><code>ubuntu</code>: Ubuntu 稳定版镜像</li>
<li><code>ubuntu-daily</code>: Ubuntu 每日构建的镜像</li>
<li><code>images</code>: <a href="https://images.linuxcontainers.org/">其它发行版本的镜像</a>，主要包括:

<ul>
<li>Alpine</li>
<li>Archlinux</li>
<li>Centos/Oracle</li>
<li>Debian</li>
<li>Fedora</li>
<li>Gentoo</li>
<li>OpenSUSE</li>
<li>OpenWRT</li>
<li>Ubuntu</li>
</ul>
</li>
</ul>


<h3>列表本地镜像</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc image list
</span></code></pre></td></tr></table></div></figure>


<h3>列表Ubuntu镜像</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc image list ubuntu:
</span></code></pre></td></tr></table></div></figure>


<h3>列表其他镜像</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc image list images:
</span></code></pre></td></tr></table></div></figure>


<h3>注册镜像</h3>

<p>因上述镜像都在国外，复制镜像速度非常慢。可注册清华大学的镜像来加速使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc remote add tuna-images https://mirrors.tuna.tsinghua.edu.cn/lxc-images/ --protocol<span class="o">=</span>simplestreams --public
</span></code></pre></td></tr></table></div></figure>


<p>以下主要以<code>tuna-images</code>为例。</p>

<h3>复制镜像</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc image cp tuna-images:ubuntu/20.04 <span class="nb">local</span>: --copy-aliases --auto-update --public
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>--copy-aliases</code> : 复制所有镜像别名。 每个镜像可能有多个别名，如 Ubuntu 20.04 的镜像的别名为 <code>20.04</code> 和 <code>focal</code> 等。</li>
<li><code>--auto-uppdate</code> : 自动更新镜像</li>
<li><code>--public</code> : 公开镜像，让其它机器可以复制它。后面将进一步介绍如何公开 LXD 端口。</li>
</ul>


<h2>四、容器</h2>

<h3>创建容器，但不启动</h3>

<p>默认为 64-bit 容器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc init tuna-images:ubuntu/20.04 focal
</span></code></pre></td></tr></table></div></figure>


<p>若须 32-bit 容器，则</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc init tuna-images:ubuntu/20.04/i386 focal
</span></code></pre></td></tr></table></div></figure>


<h3>创建容器，并启动容器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc launch tuna-images:ubuntu/20.04 focal
</span></code></pre></td></tr></table></div></figure>


<p>相当于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc init tuna-images:ubuntu/20.04 focal
</span><span class='line'>lxc start focal
</span></code></pre></td></tr></table></div></figure>


<p>直接从远程镜像初始化或启动，存在如下缺点：</p>

<ul>
<li>每次初始化或启动，可能会从远程下载镜像（若存在更新），造成初始化或启动速度缓慢。</li>
<li>未复制任何别名至本地，不利于复用。如 <code>lxc image ls</code> ：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>+-----------------------+--------------+--------+--------------------------------------+--------------+-----------+---------+-----------------------------+
</span><span class='line'><span class="p">|</span>         ALIAS         <span class="p">|</span> FINGERPRINT  <span class="p">|</span> PUBLIC <span class="p">|</span>             DESCRIPTION              <span class="p">|</span> ARCHITECTURE <span class="p">|</span>   TYPE    <span class="p">|</span>  SIZE   <span class="p">|</span>         UPLOAD DATE         <span class="p">|</span>
</span><span class='line'>+-----------------------+--------------+--------+--------------------------------------+--------------+-----------+---------+-----------------------------+
</span><span class='line'><span class="p">|</span>                       <span class="p">|</span> 36e7b3c6bdea <span class="p">|</span> yes    <span class="p">|</span> Ubuntu focal amd64 <span class="o">(</span>20200504_07:42<span class="o">)</span>  <span class="p">|</span> x86_64       <span class="p">|</span> CONTAINER <span class="p">|</span> 97.40MB <span class="p">|</span> May 5, <span class="m">2020</span> at 8:07am <span class="o">(</span>UTC<span class="o">)</span> <span class="p">|</span>
</span><span class='line'>+-----------------------+--------------+--------+--------------------------------------+--------------+-----------+---------+-----------------------------+
</span></code></pre></td></tr></table></div></figure>


<p>故最佳实践为首先复制镜像，然后初始化或启动：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc image cp tuna-images:ubuntu/20.04 <span class="nb">local</span>: --copy-aliases --auto-update --public
</span><span class='line'>lxc launch ubuntu/20.04 focal
</span></code></pre></td></tr></table></div></figure>


<h3>启动/停止容器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc start focal
</span><span class='line'>lxc stop focal
</span></code></pre></td></tr></table></div></figure>


<h3>列表容器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc list
</span></code></pre></td></tr></table></div></figure>


<p>或 快速列表</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc list --fast
</span></code></pre></td></tr></table></div></figure>


<h3>查看容器详细信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc info focal
</span></code></pre></td></tr></table></div></figure>


<h3>运行命令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lxc <span class="nb">exec </span>focal -- /bin/bash
</span></code></pre></td></tr></table></div></figure>


<h3>上传/下载文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc file pull focal/etc/hosts .
</span><span class='line'>lxc file push /etc/hosts focal/tmp/tmp
</span></code></pre></td></tr></table></div></figure>


<h2>五、虚拟机</h2>

<p>LXD 3.19 开始支持创建虚拟机:</p>

<p>简单的说，所有容器相关的命令加<code>--vm</code>。</p>

<h3>复制镜像</h3>

<p>若类似复制容器命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc image copy tuna-images:ubuntu:20.04 <span class="nb">local</span>: --copy-aliases --auto-update --public --vm
</span></code></pre></td></tr></table></div></figure>


<p>则可能 <strong>覆盖</strong> 本地容器 ubuntu 20.04 的别名，造成后者 <strong>无别名</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>+-----------------------+--------------+--------+-------------------------------------+--------------+-----------------+----------+-----------------------------+
</span><span class='line'><span class="p">|</span>         ALIAS         <span class="p">|</span> FINGERPRINT  <span class="p">|</span> PUBLIC <span class="p">|</span>             DESCRIPTION             <span class="p">|</span> ARCHITECTURE <span class="p">|</span>      TYPE       <span class="p">|</span>   SIZE   <span class="p">|</span>         UPLOAD DATE         <span class="p">|</span>
</span><span class='line'>+-----------------------+--------------+--------+-------------------------------------+--------------+-----------------+----------+-----------------------------+
</span><span class='line'><span class="p">|</span> ubuntu/focal <span class="o">(</span><span class="m">7</span> more<span class="o">)</span> <span class="p">|</span> 1bb3c2f730c5 <span class="p">|</span> yes    <span class="p">|</span> Ubuntu focal amd64 <span class="o">(</span>20200504_07:42<span class="o">)</span> <span class="p">|</span> x86_64       <span class="p">|</span> VIRTUAL-MACHINE <span class="p">|</span> 231.06MB <span class="p">|</span> May 5, <span class="m">2020</span> at 8:08am <span class="o">(</span>UTC<span class="o">)</span> <span class="p">|</span>
</span><span class='line'>+-----------------------+--------------+--------+-------------------------------------+--------------+-----------------+----------+-----------------------------+
</span><span class='line'><span class="p">|</span>                       <span class="p">|</span> 36e7b3c6bdea <span class="p">|</span> yes    <span class="p">|</span> Ubuntu focal amd64 <span class="o">(</span>20200504_07:42<span class="o">)</span> <span class="p">|</span> x86_64       <span class="p">|</span> CONTAINER       <span class="p">|</span> 97.40MB  <span class="p">|</span> May 5, <span class="m">2020</span> at 8:07am <span class="o">(</span>UTC<span class="o">)</span> <span class="p">|</span>
</span><span class='line'>+-----------------------+--------------+--------+-------------------------------------+--------------+-----------------+----------+-----------------------------+
</span></code></pre></td></tr></table></div></figure>


<p>为了避免上述问题，自定义镜像别名，如以 <code>vm/</code> 作为镜像别名前缀：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc cpi tuna-images:ubuntu/20.04 <span class="nb">local</span>: --auto-update --public --vm --alias vm/ubuntu/focal --alias vm/ubuntu/20.04
</span></code></pre></td></tr></table></div></figure>


<h3>创建虚拟机</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc launch tuna-images:ubuntu/20.04 focal-vm --vm --profile default --profile vm
</span></code></pre></td></tr></table></div></figure>


<p>Ubuntu 16.04 默认内核 4.4 ，将遇到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Creating focal-vm
</span><span class='line'>Starting focal-vm
</span><span class='line'>Error: Failed to run: modprobe vhost_vsock: modprobe: FATAL: Module vhost_vsock not found in directory /lib/modules/4.4.0-176-generic
</span><span class='line'>Try <span class="sb">`</span>lxc info --show-log <span class="nb">local</span>:focal-vm<span class="sb">`</span> <span class="k">for</span> more info
</span></code></pre></td></tr></table></div></figure>


<p>须安装 4.15 (HWE) 内核，并重启：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install --install-recommends linux-generic-hwe-16.04
</span></code></pre></td></tr></table></div></figure>


<h2>六、快照</h2>

<h3>创建只读快照</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc snapshot focal focal-s0
</span></code></pre></td></tr></table></div></figure>


<p>注：无列表快照的直接操作，只能通过获取容器的详细信息 <code>lxc info</code> 来获取的快照名字。</p>

<h3>还原快照</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc restore focal focal-s0
</span></code></pre></td></tr></table></div></figure>


<h3>删除快照</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc delete focal/focal-s0
</span></code></pre></td></tr></table></div></figure>


<h2>七、别名</h2>

<h3>创建别名</h3>

<p>模仿 Docker 删除镜像的 <code>docker rmi</code> ， 创建 <code>lxc rmi</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc <span class="nb">alias </span>add rmi <span class="s1">&#39;image rm&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc <span class="nb">alias </span>add lsi <span class="s1">&#39;image ls&#39;</span>
</span><span class='line'>lxc <span class="nb">alias </span>add cpi <span class="s1">&#39;image cp&#39;</span>
</span><span class='line'>lxc <span class="nb">alias </span>add infoi <span class="s1">&#39;image info&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>列表别名</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc <span class="nb">alias </span>ls
</span></code></pre></td></tr></table></div></figure>


<h3>删除别名</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lxc <span class="nb">alias </span>rm infoi
</span></code></pre></td></tr></table></div></figure>


<h2>八、剖析</h2>

<p>lxd将数据存放于 <code>/var/snap/lxd/common/lxd</code> ：</p>

<ul>
<li><code>images</code>: 存放镜像文件</li>
<li><code>lxc</code>: 存放容器</li>
<li><code>lxd.db</code>：lxd元数据数据库，基于sqlite3</li>
<li><code>server.crt</code>：服务器证书</li>
<li><code>server.key</code>：服务器密钥</li>
<li><code>unix.socket</code>：lxd监听的本地套接口</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="https://linuxcontainers.org/lxd/getting-started-cli/">LXD Getting started - command line</a></li>
<li><a href="https://ubuntu.com/blog/lxd-in-4-easy-steps">LXD in 4 Easy Steps</a></li>
<li><a href="https://blog.simos.info/how-to-use-virtual-machines-in-lxd/">How to use virtual machines in LXD</a></li>
<li><a href="https://discuss.linuxcontainers.org/t/trying-lxd-virtual-machines/6182">Trying LXD virtual machines</a></li>
<li><a href="https://blog.simos.info/using-command-aliases-in-lxd-to-exec-a-shell/">Using command aliases in LXD to exec a shell</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snap简介]]></title>
    <link href="http://www.malike.net.cn/blog/2020/04/30/snap-tutorial/"/>
    <updated>2020-04-30T19:40:24+00:00</updated>
    <id>http://www.malike.net.cn/blog/2020/04/30/snap-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://snapcraft.io/">Snap</a> 是 Canonical 开发的包管理系统，默认安装于 Ubuntu 16.04 及其后的发行版本中。</p>

<p>优势：</p>

<ul>
<li>自包含：不受限于发行版的系统库版本，且每个包之间不存在运行库依赖。</li>
<li>只读挂载：应用程序不能修改或删除，且不会污染系统应用程序或库。</li>
<li>回退：内置回退旧版本。</li>
<li>快照：内置备份和恢复应用数据。</li>
<li>版本新：相比发行版更新缓慢，其应用程序版本都比较新。</li>
</ul>


<p>劣势主要为安装包占用较多存储空间。</p>

<p>以下主要以 LXD 的 snap 包为例。</p>

<h2>一、安装 snapd</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt install -y snapd
</span></code></pre></td></tr></table></div></figure>


<p>查看版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap version
</span></code></pre></td></tr></table></div></figure>


<h2>二、安装 snap 包</h2>

<p>为避免系统可能存在旧版本 LXD 与 snap 安装的最新版 LXD 冲突：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt remove --purge lxd lxd-client
</span></code></pre></td></tr></table></div></figure>


<p>然后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap install lxd
</span></code></pre></td></tr></table></div></figure>


<p>默认 <code>stable</code> 频道，也可以指定 <code>edge</code> 频道：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap install --channel<span class="o">=</span>edge lxd
</span></code></pre></td></tr></table></div></figure>


<p>安装后，可切换频道。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap switch --channel<span class="o">=</span>stable lxd
</span></code></pre></td></tr></table></div></figure>


<p>相比 RPM 和 Debian 包需手动更新，snap 包将在后台自动更新。若需手动更新，则</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap refresh lxd
</span></code></pre></td></tr></table></div></figure>


<p>snap 还能切换频道并更新</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap refresh --channel<span class="o">=</span>beta lxd
</span></code></pre></td></tr></table></div></figure>


<p>snap 应用程序位于 <code>/snap/bin</code> ，如： <code>/snap/bin/lxd</code></p>

<p>为便于使用，可将该路径追加于 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 环境变量 <code>PATH</code> ，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/snap/bin
</span></code></pre></td></tr></table></div></figure>


<h2>三、搜索包</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap search &lt;snapname&gt;
</span></code></pre></td></tr></table></div></figure>


<p>也可通过浏览器在应用市场 <a href="https://snapcraft.io/">Snapcraft</a> 上搜索需要的包（应用）。</p>

<h2>四、列表已安装的包</h2>

<h3>列表所有包</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap list
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Name      Version    Rev    Tracking       Publisher   Notes
</span><span class='line'>core      16-2.44.3  <span class="m">9066</span>   latest/stable  canonical✓  core
</span><span class='line'>core18    <span class="m">20200311</span>   <span class="m">1705</span>   latest/stable  canonical✓  base
</span><span class='line'>lxd       4.0.1      <span class="m">14804</span>  latest/stable  canonical✓  -
</span></code></pre></td></tr></table></div></figure>


<p>若 <code>--all</code> ， 则列表包的所有版本 (revision)</p>

<h3>列表指定包</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap list lxd
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Name  Version  Rev    Tracking       Publisher   Notes
</span><span class='line'>lxd   4.0.1    <span class="m">14804</span>  latest/stable  canonical✓  -
</span></code></pre></td></tr></table></div></figure>


<h2>五、回退版本</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap revert lxd
</span></code></pre></td></tr></table></div></figure>


<p>若遇到当前版本bug，则可考虑回退程序。当前跟踪的 channel 不会因上一版本源于不同 channel 而改变。</p>

<ul>
<li><code>snap refesh</code> 不会更新已回退的包，除非指定包名，如：<code>snap refresh lxd</code></li>
<li>新版本发布，将继续自动更新已回退的包。</li>
</ul>


<h2>六、卸载 snap 包</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap remove lxd
</span></code></pre></td></tr></table></div></figure>


<p>卸载旧版本（释放空间）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap remove --revision<span class="o">=</span><span class="m">14709</span> lxd
</span></code></pre></td></tr></table></div></figure>


<h2>七、启用/禁用 snap 包</h2>

<p>为避免卸载和重装而禁用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap disable lxd
</span></code></pre></td></tr></table></div></figure>


<p>反之：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap <span class="nb">enable </span>lxd
</span></code></pre></td></tr></table></div></figure>


<h2>八、服务</h2>

<h3>列表</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap services lxd
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Service       Startup  Current   Notes
</span><span class='line'>lxd.activate  enabled  inactive  -
</span><span class='line'>lxd.daemon    enabled  active    socket-activated
</span></code></pre></td></tr></table></div></figure>


<h3>启动、停止和重启</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap stop lxd.daemon
</span><span class='line'>sudo snap start lxd.daemon
</span><span class='line'>sudo snap restart lxd.daemon
</span></code></pre></td></tr></table></div></figure>


<p>停止服务，并禁用自动启动：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap stop --disable lxd.daemon
</span></code></pre></td></tr></table></div></figure>


<p>开始服务，并启用自动启动：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap start --disable lxd.daemon
</span></code></pre></td></tr></table></div></figure>


<h3>查看日志</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap logs lxd
</span><span class='line'>sudo snap logs lxd.daemon
</span><span class='line'>sudo snap logs lxd -f <span class="c"># 类似tail -f</span>
</span></code></pre></td></tr></table></div></figure>


<h2>九、快照</h2>

<h3>创建</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap save
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Set  Snap      Age    Version    Rev    Size    Notes
</span><span class='line'><span class="m">1</span>    core      42.2s  16-2.44.3  <span class="m">9066</span>     124B  -
</span><span class='line'><span class="m">1</span>    core18    42.2s  <span class="m">20200311</span>   <span class="m">1705</span>     123B  -
</span><span class='line'><span class="m">1</span>    lxd       42.2s  4.0.1      <span class="m">14890</span>   2187B  -
</span></code></pre></td></tr></table></div></figure>


<p>或指定包</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo snap save lxd
</span></code></pre></td></tr></table></div></figure>


<p>若 <code>--no-wait</code>， 则后台运行。</p>

<h3>列表</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap saved
</span></code></pre></td></tr></table></div></figure>


<p>或指定Set ID</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap saved --id<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<h3>校验</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap check-snapshot 1
</span></code></pre></td></tr></table></div></figure>


<h3>还原</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap restore 1
</span></code></pre></td></tr></table></div></figure>


<h3>删除</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>snap forget 1
</span></code></pre></td></tr></table></div></figure>


<h2>十、剖析</h2>

<h3>包的安装</h3>

<p>相比 RPM 和 Debian 等传统安装包，通过解开来安装。</p>

<p>存于 <code>/var/lib/snapd</code> ，格式为 <a href="https://en.wikipedia.org/wiki/SquashFS">squashfs</a> 的 snap 包，不直接解开，而是（只读）挂载至 <code>/snap/&lt;snapname&gt;/&lt;revision&gt;</code> 目录。如：</p>

<p><code>lxd</code> 的 revision 14890 的包存储于 <code>/var/lib/snapd/snaps/lxd_14890.snap</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mount <span class="p">|</span> grep 14890
</span></code></pre></td></tr></table></div></figure>


<p>发现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/var/lib/snapd/snaps/lxd_14890.snap on /snap/lxd/14890 <span class="nb">type </span>squashfs <span class="o">(</span>ro,nodev,relatime<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外， <code>/snap/&lt;snapname&gt;/current</code> 为当前版本挂载点，它为指向 <code>/snap/&lt;snapname&gt;/&lt;revision&gt;</code> 的符号链接。</p>

<p>而且，每个 snap 包含了不依赖系统库的完整的运行时库。</p>

<h3>包的缓存</h3>

<p>snap 为了加速二次安装，首次安装会将 snap 包缓存至 <code>/var/lib/snapd/cache</code> 。</p>

<p>目前为止， snap 未提供命令清楚缓存。若需 <strong>释放空间</strong> ，须手动删除该目录中的文件。</p>

<h3>包的运行数据</h3>

<p><code>/var/snap</code> 存储每个包的运行数据（或元数据）。如：<code>/var/snap/lxd</code> 主要为 lxd 的元数据。</p>

<p>该目录或将消耗大量的存储空间，因受制于 AppArmor ，不能通过移动目录（至另外分区）和符号链接来释放空间，须 <code>mount --bind</code> 移动的目录。</p>

<h3>包的应用程序</h3>

<p><code>/snap/bin</code> 存储指向包的应用程序（符号链接），如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -l /snap/bin/lxd
</span></code></pre></td></tr></table></div></figure>


<p>看到 <code>lxd</code> 仅为 <code>snap</code> 的符号链接</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lrwxrwxrwx <span class="m">13</span> root <span class="m">29</span> 4月  12:10 /snap/bin/lxd -&gt; /usr/bin/snap
</span></code></pre></td></tr></table></div></figure>


<h3>快照</h3>

<p>每个包快照用独立的 zip 文件存储，包含：</p>

<ul>
<li><code>meta.json</code> : 描述快照内容、配置和校验码。</li>
<li><code>archive.tgz</code> : 包含系统数据。</li>
<li><code>user/&lt;username&gt;.tgz</code> : 包含每个系统的用户数据。</li>
</ul>


<p>快照存储于 <code>/var/lib/snapd/snapshots</code></p>

<h2>参考</h2>

<ul>
<li><a href="https://snapcraft.io/docs/getting-started">Snap Getting Started</a></li>
<li><a href="http://landofnightandday.blogspot.com/2018/06/disable-snap-core-service-on-ubuntu-1804.html">Disable snap core service on Ubuntu 18.04</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用ACE实现One Loop Per Thread]]></title>
    <link href="http://www.malike.net.cn/blog/2020/04/19/ace-one-loop-per-thread/"/>
    <updated>2020-04-19T19:20:02+00:00</updated>
    <id>http://www.malike.net.cn/blog/2020/04/19/ace-one-loop-per-thread</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/Solstice/archive/2010/02/12/multithreaded_server.html#_Toc7583">one loop per thread</a> 即每个线程运行一个独立的事件循环 (event loop)，或称为 one event loop per thread 更准确。而且事件循环线程之间通常不存在同步或互斥的关系, 并发连接的处理能力随CPU核心数而扩展 (scalable)。</p>

<p><a href="http://www.dre.vanderbilt.edu/~schmidt/ACE.html">ACE</a> 拥有多种实现的Reactor:</p>

<ul>
<li><code>ACE_Select_Reactor</code> : 基于 <code>select</code> 的实现。</li>
<li><code>ACE_Dev_Poll_Reactor</code> : 基于 Linux <code>epoll</code> 或 BSD <code>/dev/poll</code> 的实现。</li>
<li><code>ACE_WFMO_Reactor</code> : 基于 Windows <code>WaitForMultipleObjects</code> 的实现</li>
</ul>


<p>它们都可用于实现 one loop per thread 模式。 相比 <code>ACE_TP_Reactor</code>：</p>

<ul>
<li><code>ACE_TP_Reactor</code> 继承于 <code>ACE_Select_Reactor</code> ，<strong>加锁</strong> 保证多线程竞争同一 Reactor 的安全。并行可扩展能力受限，且最大支持 1024 个描述符。</li>
<li>基于 <code>ACE_Dev_Poll_Reactor</code> 的 one loop er thread，每个线程拥有独立的 Reactor，线程之间不存在竞争。充分发挥并行能力，且最大支持几十万甚至百万个描述符。</li>
</ul>


<p>以下以 <code>ACE_Select_Reactor</code> 为例浅析实现的关键代码。更完备示例代码请参看我的 <a href="https://github.com/likema/ace_echod">ace_echod</a></p>

<h2>实现浅析</h2>

<h3>事件循环函数</h3>

<p><code>event_loop</code> 将作为线程函数运行于独立线程中，它与 ACE 教科书基本一样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">ACE_THR_FUNC_RETURN</span> <span class="nf">event_loop</span><span class="p">(</span><span class="n">ACE_Reactor</span><span class="o">*</span> <span class="n">reactor</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">reactor</span><span class="o">-&gt;</span><span class="n">owner</span><span class="p">(</span><span class="n">ACE_OS</span><span class="o">::</span><span class="n">thr_self</span><span class="p">());</span> <span class="c1">// 将reactor “绑定” 本线程。</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">reactor</span><span class="o">-&gt;</span><span class="n">reactor_event_loop_done</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reactor</span><span class="o">-&gt;</span><span class="n">run_reactor_event_loop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>事件循环管理器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Event_Loop_Manager</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// 为简化，忽略 ctor 、dtor 和 close</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">open</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">threads</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 创建Reactor数组。</span>
</span><span class='line'>        <span class="n">reactors_</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">ACE_Reactor</span><span class="o">*</span><span class="p">[</span><span class="n">threads</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">reactors_</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ACE_Reactor</span><span class="o">*</span><span class="p">)</span> <span class="o">*</span> <span class="n">threads</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 创建线程ID数组</span>
</span><span class='line'>        <span class="n">tids_</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">ACE_thread_t</span><span class="p">[</span><span class="n">threads</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">tids_</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ACE_thread_t</span><span class="o">*</span><span class="p">)</span> <span class="o">*</span> <span class="n">threads</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 创建事件循环</span>
</span><span class='line'>        <span class="n">threads_</span> <span class="o">=</span> <span class="n">threads</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">threads_</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">reactors_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ACE_Reactor</span><span class="p">(</span><span class="k">new</span> <span class="n">ACE_Select_Reactor</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ACE_Thread_Manager</span><span class="o">::</span><span class="n">instance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">spawn</span><span class="p">(</span>
</span><span class='line'>                    <span class="p">(</span><span class="n">ACE_THR_FUNC</span><span class="p">)</span> <span class="n">event_loop</span><span class="p">,</span> <span class="n">reactors</span><span class="p">[</span><span class="n">i</span><span class="p">],</span>
</span><span class='line'>                    <span class="n">THR_NEW_LWP</span> <span class="o">|</span> <span class="n">THR_JOINABLE</span> <span class="o">|</span> <span class="n">THR_INHERIT_SCHED</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tid</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">current_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 以简单循环方式返回 Reactor</span>
</span><span class='line'>    <span class="n">ACE_Reactor</span><span class="o">*</span> <span class="n">reactor</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ACE_Reactor</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="n">reactors_</span><span class="p">[</span><span class="n">current_</span><span class="p">];</span>
</span><span class='line'>        <span class="n">current_</span> <span class="o">=</span> <span class="p">(</span><span class="n">current_</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">threads_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="n">ACE_Auto_Basic_Array_Ptr</span><span class="o">&lt;</span><span class="n">ACE_Reactor</span><span class="o">*&gt;</span> <span class="n">reactors_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ACE_Auto_Basic_Array_Ptr</span><span class="o">&lt;</span><span class="n">ACE_thread_t</span><span class="o">&gt;</span> <span class="n">tids_</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">threads_</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">current_</span><span class="p">;</span> <span class="c1">// 当前分配 Reactor 索引</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Echo Acceptor</h3>

<p>据 ACE 的 Acceptor 模式, <code>Echo_Handler</code> 继承于 <code>ACE_Svc_Handler&lt;ACE_SOCK_STREAM, ACE_NULL_SYNCH&gt;</code>，它与 ACE 教科书实现相似。</p>

<ul>
<li><code>Echo_Acceptor</code> 注册默认 Reactor ，其事件循环运行于主线程。</li>
<li>创建 <code>Echo_Handler</code> 对象时，事件循环管理器以简单循环方式分配 Reactor 给新对象。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Echo_Acceptor</span><span class="o">:</span> <span class="k">public</span> <span class="n">ACE_Acceptor</span><span class="o">&lt;</span><span class="n">Echo_Handler</span><span class="p">,</span> <span class="n">ACE_SOCK_ACCEPTOR</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">open</span><span class="p">(</span><span class="k">const</span> <span class="n">addr_type</span><span class="o">&amp;</span> <span class="n">local_addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">int</span> <span class="n">use_select</span><span class="p">,</span> <span class="kt">int</span> <span class="n">reuse_addr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">flags_</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">use_select_</span> <span class="o">=</span> <span class="n">use_select</span><span class="p">;</span>
</span><span class='line'>        <span class="n">reuse_addr_</span> <span class="o">=</span> <span class="n">reuse_addr</span><span class="p">;</span>
</span><span class='line'>        <span class="n">peer_acceptor_addr_</span> <span class="o">=</span> <span class="n">local_addr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">peer_acceptor_</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">local_addr</span><span class="p">,</span> <span class="n">reuse_addr</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">peer_acceptor_</span><span class="p">.</span><span class="n">enable</span><span class="p">(</span><span class="n">ACE_NONBLOCK</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ACE_Reactor</span><span class="o">::</span><span class="n">instance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">register_handler</span><span class="p">(</span>
</span><span class='line'>            <span class="k">this</span><span class="p">,</span> <span class="n">ACE_Event_Handler</span><span class="o">::</span><span class="n">ACCEPT_MASK</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">reactor</span><span class="p">(</span><span class="n">ACE_Reactor</span><span class="o">::</span><span class="n">instance</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 按逻辑CPU数初始化事件循环（线程）数。</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">loops_</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">reactor_type</span><span class="p">,</span> <span class="n">ACE_OS</span><span class="o">::</span><span class="n">num_processors</span><span class="p">())</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">make_svc_handler</span><span class="p">(</span><span class="n">handler_type</span><span class="o">*&amp;</span> <span class="n">sh</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sh</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ACE_NEW_RETURN</span><span class="p">(</span><span class="n">sh</span><span class="p">,</span> <span class="n">handler_type</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 事件循环管理器给 Echo_Handler 对象分配事件循环。</span>
</span><span class='line'>        <span class="n">sh</span><span class="o">-&gt;</span><span class="n">reactor</span><span class="p">(</span><span class="n">loops_</span><span class="p">.</span><span class="n">reactor</span><span class="p">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Event_Loop_Manager</span> <span class="n">loops_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>存在问题</h2>

<ul>
<li>因 <code>ACE_Reactor::size</code> 实现<a href="https://github.com/DOCGroup/ACE_TAO/issues/855#issuecomment-612391823">不一致</a>，除 <code>ACE_Dev_Poll_Reactor</code> 返回当前注册的 handler 数量，其它实现返回handler表的容量。导致无法直接通过注册 handler 的数量，实现 <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round-Robin</a>，即均衡分配 handler</li>
<li>因 <code>ACE_Reactor</code> 无法获取当前是否等待事件（即空闲）状态，导致无法直接将 handler 分配到空闲事件循环中。</li>
</ul>


<p>解决上述问题，要么直接修改 ACE 的实现，要么在具体 handler 实现中增加状态或统计变量，两者都需用原子变量来避免加锁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安全远程访问Docker]]></title>
    <link href="http://www.malike.net.cn/blog/2019/08/19/docker-remote/"/>
    <updated>2019-08-19T02:40:06+00:00</updated>
    <id>http://www.malike.net.cn/blog/2019/08/19/docker-remote</id>
    <content type="html"><![CDATA[<p>Docker服务端（<code>dockerd</code>）默认监听在Unix套接口 <code>/var/run/docker.sock</code> 。仅能本地或SSH至Docker运行的主机访问，不利于自动化开发测试。</p>

<p>若需远程访问，得配置它同时监听在TCP端口（默认2376）。</p>

<p>然而，Docker不支持用户认证。 可通过配置TLS客户端和服务端认证，规避非法客户端远程访问服务端。</p>

<h2>一、创建CA</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl genrsa -out ca-key.pem 4096
</span><span class='line'>openssl req -new -x509 -days <span class="m">365</span> -key ca-key.pem -sha256 -out ca.pem
</span></code></pre></td></tr></table></div></figure>


<p>交互式输入各种选项，其中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>: &lt;HOST&gt;
</span></code></pre></td></tr></table></div></figure>


<p><code>&lt;HOST&gt;</code> 为Docker远程服务端域名（允许不存在的域名）。</p>

<h2>二、创建远程服务端证书</h2>

<p>创建 <code>extfile.cnf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">subjectAltName</span> <span class="o">=</span> DNS:&lt;HOST&gt;,IP:&lt;IP&gt;,IP:127.0.0.1
</span><span class='line'><span class="nv">extendedKeyUsage</span> <span class="o">=</span> serverAuth
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>&lt;HOST&gt;</code> 与上同。</li>
<li><code>&lt;IP&gt;</code> 为Docker远程服务端IP</li>
</ul>


<p>然后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl genrsa -out server-key.pem 4096
</span><span class='line'>openssl req -subj <span class="s2">&quot;/CN=&lt;HOST&gt;&quot;</span> -sha256 -new -key server-key.pem -out server.csr
</span><span class='line'>openssl x509 -req -days <span class="m">365</span> -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf
</span></code></pre></td></tr></table></div></figure>


<h2>三、创建客户端证书</h2>

<p>创建 <code>extfile-client.cnf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">extendedKeyUsage</span> <span class="o">=</span> clientAuth
</span></code></pre></td></tr></table></div></figure>


<p>然后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl genrsa -out key.pem 4096
</span><span class='line'>openssl req -subj <span class="s1">&#39;/CN=client&#39;</span> -new -key key.pem -out client.csr
</span><span class='line'>openssl x509 -req -days <span class="m">365</span> -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf
</span></code></pre></td></tr></table></div></figure>


<p>至此，删除中间文件，并降低相关密钥访问权限。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm -f client.csr server.csr extfile.cnf extfile-client.cnf
</span><span class='line'>chmod <span class="m">0400</span> ca-key.pem key.pem server-key.pem
</span><span class='line'>chmod <span class="m">0444</span> ca.pem server-cert.pem cert.pem
</span></code></pre></td></tr></table></div></figure>


<h2>四、远程复制服务端相关证书</h2>

<p>通过<code>scp</code>，将 <code>ca.pem</code>, <code>server-cert.pem</code> 和 <code>server-key.pem</code> 复制至远程服务端 <code>/etc/docker</code> 目录中。</p>

<p>注：<code>ca-key.pem</code> 不应复制至远程服务端。因既不意义，又增大泄漏可能性。</p>

<h2>五、编辑远程服务端 <code>/etc/docker/daemon.json</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;hosts&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;unix:///var/run/docker.sock&quot;</span><span class="p">,</span> <span class="s2">&quot;tcp://0.0.0.0:2376&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;tls&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;tlscacert&quot;</span><span class="p">:</span> <span class="s2">&quot;/etc/docker/ca.pem&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;tlscert&quot;</span><span class="p">:</span> <span class="s2">&quot;/etc/docker/server-cert.pem&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;tlskey&quot;</span><span class="p">:</span> <span class="s2">&quot;/etc/docker/server-key.pem&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;tlsverify&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为保证证书和密钥安全，须</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown root.root /etc/docker/<span class="o">{</span>ca,server-cert,server-key<span class="o">}</span>.pem
</span><span class='line'>sudo chmod og-rwx /etc/docker/<span class="o">{</span>ca,server-cert,server-key<span class="o">}</span>.pem
</span></code></pre></td></tr></table></div></figure>


<h2>六、重启远程服务端Docker服务</h2>

<p>在 <code>/lib/systemd/system/docker.service</code> 的 <code>ExecStart</code> 中， <code>-H fd://</code> 与 <code>/etc/docker/daemon.json</code> 的 <code>hosts</code> 冲突，将导致Docker服务启动失败。</p>

<p>若在 <code>/lib/systemd/system/docker.service</code> 中直接删除 <code>-H fd://</code> ，docker-ce包升级将恢复原样。</p>

<p>可创建 <code>/etc/systemd/system/docker.service.d/options.conf</code> 及其父目录，并编辑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Service]</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/bin/dockerd --containerd=/run/containerd/containerd.sock</span>
</span></code></pre></td></tr></table></div></figure>


<p>或执行如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -p /etc/systemd/system/docker.service.d
</span><span class='line'>sed -n <span class="s1">&#39;/\[Service\]/ {</span>
</span><span class='line'><span class="s1">    a \</span>
</span><span class='line'><span class="s1">ExecStart=</span>
</span><span class='line'><span class="s1">    p</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'>
</span><span class='line'><span class="s1">/ExecStart=.*/ {</span>
</span><span class='line'><span class="s1">    s/-H fd:\/\/ //p</span>
</span><span class='line'><span class="s1">}&#39;</span> /lib/systemd/system/docker.service <span class="p">|</span> sudo tee /etc/systemd/system/docker.service.d/options.conf
</span></code></pre></td></tr></table></div></figure>


<p>然后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl daemon-reload
</span><span class='line'>sudo systemctl restart docker
</span></code></pre></td></tr></table></div></figure>


<h2>七、配置客户端</h2>

<p>在客户端和CA相关证书和密钥所在目录，创建<code>docker.env</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span>&lt;HOST&gt;:2376
</span><span class='line'><span class="nb">export </span><span class="nv">DOCKER_TLS_VERIFY</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">DOCKER_CERT_PATH</span><span class="o">=</span><span class="sb">`</span>realpath <span class="se">\`</span>dirname <span class="nv">$0</span><span class="se">\`</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>在远程访问Docker前，载入该文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> &lt;dir&gt;/docker.env
</span></code></pre></td></tr></table></div></figure>


<p>然后，控制远程Docker与本地Docker类似，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker images
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://docs.docker.com/engine/security/https/">Protect the Docker daemon socket</a></li>
<li><a href="https://gist.github.com/kekru/974e40bb1cd4b947a53cca5ba4b0bbe5">Enable Docker Remote API with TLS client verification</a></li>
<li><a href="https://tech.paulcz.net/blog/secure-docker-with-tls/">Securing Docker with TLS certificates</a></li>
<li><a href="https://nickjanetakis.com/blog/docker-tip-73-connecting-to-a-remote-docker-daemon">Docker Tip #73: Connecting to a Remote Docker Daemon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv简介——Debian/Ubuntu中管理多版本Ruby]]></title>
    <link href="http://www.malike.net.cn/blog/2019/08/17/rbenv-tutorial/"/>
    <updated>2019-08-17T16:40:54+00:00</updated>
    <id>http://www.malike.net.cn/blog/2019/08/17/rbenv-tutorial</id>
    <content type="html"><![CDATA[<h2>一、安装</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/rbenv/rbenv.git ~/.rbenv
</span><span class='line'>git clone git://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
</span></code></pre></td></tr></table></div></figure>


<p>在国内，为了加速下述安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/andorchen/rbenv-taobao-mirror.git ~/.rbenv/plugins/rbenv-taobao-mirror
</span></code></pre></td></tr></table></div></figure>


<p>激活rbenv</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(~/.rbenv/bin/rbenv init)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了每次登录后自动激活rbenv，需将<code>NMV_DIR</code>、<code>nvm.sh</code>和补齐加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>~/.rbenv/shims:~/.rbenv/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>验证是否安装正确：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor <span class="p">|</span> bash
</span></code></pre></td></tr></table></div></figure>


<p>或</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -qO- https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor <span class="p">|</span> bash
</span></code></pre></td></tr></table></div></figure>


<p>输出类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Checking <span class="k">for</span> <span class="sb">`</span>rbenv<span class="s1">&#39; in PATH: /root/.rbenv/bin/rbenv</span>
</span><span class='line'><span class="s1">Checking for rbenv shims in PATH: OK</span>
</span><span class='line'><span class="s1">Checking `rbenv install&#39;</span> support: /root/.rbenv/plugins/ruby-build/bin/rbenv-install <span class="o">(</span>ruby-build 20190615-9-gf3f4193<span class="o">)</span>
</span><span class='line'>Counting installed Ruby versions: none
</span><span class='line'>  There aren<span class="s1">&#39;t any Ruby versions installed under `/root/.rbenv/versions&#39;</span>.
</span><span class='line'>  You can install Ruby versions like so: rbenv install 2.2.4
</span><span class='line'>Checking RubyGems settings: OK
</span><span class='line'>Auditing installed plugins: OK
</span></code></pre></td></tr></table></div></figure>


<h2>二、常用命令</h2>

<h3>列表可安装的Ruby版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv install -l
</span></code></pre></td></tr></table></div></figure>


<p>除了Ruby官方版本，还支持RBX和JRuby等。</p>

<h3>安装指定版本的Ruby</h3>

<p>安装过程，实际为下载并编译指定版本的Ruby源码，故需系统安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y make gcc libssl-dev libreadline-dev zlib1g-dev
</span></code></pre></td></tr></table></div></figure>


<p>然后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv install 2.6.3
</span></code></pre></td></tr></table></div></figure>


<p>Ruby版本安装在 <code>~/.rbenv/versions</code> 目录中。</p>

<h3>卸载指定版本的Ruby</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv uninstall 2.6.3
</span></code></pre></td></tr></table></div></figure>


<h3>设置shell的Ruby版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv shell 2.6.3
</span></code></pre></td></tr></table></div></figure>


<p>等同于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">RBENV_VERSION</span><span class="o">=</span>2.6.3
</span></code></pre></td></tr></table></div></figure>


<p>清除<code>RBENV_VERSION</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv shell --unset
</span></code></pre></td></tr></table></div></figure>


<h2>三、升级</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.rbenv
</span><span class='line'>git pull
</span><span class='line'><span class="nb">cd</span> ~/.rbenv/plugins/ruby-build
</span><span class='line'>git pull
</span><span class='line'><span class="nb">cd</span> ~/.rbenv/plugins/rbenv-taobao-mirror
</span><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<h2>四、配置Systemd脚本</h2>

<p>若Ruby程序须通过Systemd启动，则其Systemd脚本类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Service]</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="na">User</span><span class="o">=</span><span class="s">&lt;username&gt;</span>
</span><span class='line'><span class="na">Group</span><span class="o">=</span><span class="s">&lt;group&gt;</span>
</span><span class='line'><span class="na">Environment</span><span class="o">=</span><span class="s">&quot;PATH=/home/&lt;username&gt;/.rbenv/shims:/home/&lt;username&gt;/.rbenv/bin:/sbin:/usr/sbin:/bin:/usr/bin&quot;</span>
</span><span class='line'><span class="na">Environment</span><span class="o">=</span><span class="s">&quot;RBENV_ROOT=/home/&lt;username&gt;/.rbenv&quot;</span>
</span><span class='line'><span class="na">Environment</span><span class="o">=</span><span class="s">&quot;RBENV_VERSION=&lt;ruby version&gt;&quot;</span>
</span><span class='line'><span class="na">WorkingDirectory</span><span class="o">=</span><span class="s">&lt;app dir&gt;</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">&lt;app dir&gt;/&lt;app&gt;</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>username</code> 为服务运行的用户名，通常为 <code>RBENV_ROOT</code> 所属用户。</li>
<li><code>group</code> 为服务运行的组名，通常为 <code>RBENV_ROOT</code> 所属组。</li>
<li><code>RBENV_VERSION</code> 为Ruby版本号。</li>
<li><code>app dir</code> 为Ruby程序的目录。</li>
<li><code>app</code> 为Ruby程序或启动脚本。</li>
</ul>


<h2>五、制作Docker镜像</h2>

<p>若不希望使用Ruby的官方Docker镜像，可利用rbenv创建镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Dockerfile'><span class='line'><span class="k">FROM</span> ubuntu:bionic
</span><span class='line'><span class="k">MAINTAINER</span> ...
</span><span class='line'>
</span><span class='line'><span class="k">ENV</span> DEBIAN_FRONTEND noninteractive
</span><span class='line'><span class="k">ENV</span> RBENV_ROOT /root/.rbenv
</span><span class='line'><span class="k">ENV</span> RBENV_VERSION 2.6.3
</span><span class='line'><span class="k">ENV</span> PATH <span class="nv">$RBENV_ROOT</span>/shims:<span class="nv">$RBENV_ROOT</span>/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="k">ENV</span> RUBY_CFLAGS -O3
</span><span class='line'>
</span><span class='line'><span class="k">RUN</span> <span class="nb">set</span> -eux<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get update<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="nv">savedAptMark</span><span class="o">=</span><span class="s2">&quot;$(apt-mark showmanual)&quot;</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get install -y git wget make gcc libssl-dev libreadline-dev zlib1g-dev<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;gem: --no-rdoc --no-ri&quot;</span> &gt; ~/.gemrc<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    git clone --depth <span class="m">1</span> https://github.com/rbenv/rbenv.git <span class="nv">$RBENV_ROOT</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    git clone --depth <span class="m">1</span> https://github.com/rbenv/ruby-build.git <span class="nv">$RBENV_ROOT</span>/plugins/ruby-build<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    git clone --depth <span class="m">1</span> https://github.com/andorchen/rbenv-taobao-mirror.git <span class="nv">$RBENV_ROOT</span>/plugins/rbenv-taobao-mirror<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="nv">CONFIGURE_OPTS</span><span class="o">=</span><span class="s2">&quot;--disable-install-doc&quot;</span> <span class="nv">MAKE_OPTS</span><span class="o">=</span><span class="s2">&quot;-j`grep -c &#39;^processor&#39; /proc/cpuinfo`&quot;</span> rbenv install <span class="nv">$RBENV_VERSION</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.com/<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    gem install bundler<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    bundle config mirror.https://rubygems.com https://gems.ruby-china.com<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-mark auto <span class="s1">&#39;.*&#39;</span> &gt; /dev/null<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="o">[</span> -z <span class="s2">&quot;$savedAptMark&quot;</span> <span class="o">]</span> <span class="o">||</span> apt-mark manual <span class="nv">$savedAptMark</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant<span class="o">=</span><span class="nb">false</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get clean<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    rm -rf /var/lib/apt/lists /var/tmp/* /tmp/* <span class="nv">$RBENV_ROOT</span>/versions/*/lib/ruby/gems/*/cache/*.gem
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在国内，为了加速安装gem，上述gem和bundle设置国内镜像</li>
<li><code>RUBY_CFLAGS</code> 为 <code>-O3</code> 可编译优化的Ruby程序。在某些情况，可提高应用20-30%的运行效率。</li>
<li>可针对指定C扩展（如ffi），设置编译优化标志：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Dockerfile'><span class='line'>bundle config build.ffi --with-cflags<span class="o">=</span><span class="s2">&quot;$RUBY_CFLAGS&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks-Rust简介]]></title>
    <link href="http://www.malike.net.cn/blog/2019/04/30/shadowsocks-rust-tutorial/"/>
    <updated>2019-04-30T01:30:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2019/04/30/shadowsocks-rust-tutorial</id>
    <content type="html"><![CDATA[<p>在《<a href="https://www.malike.net.cn/blog/2016/11/29/shadowsocks-tutorial/">Shadowsocks简介</a>》中，我介绍了如何使用<a href="https://shadowsocks.org/en/index.html">Shadowsocks</a>。但它不具备负载均衡集群能力，而结合HAProxy的集群配置复杂。</p>

<p><a href="https://github.com/shadowsocks/shadowsocks-rust">shadowsocks-rust</a>是Shadowsocks的Rust语言实现，它不仅具有传统Shadowsocks特性，而且还具有：</p>

<ul>
<li><strong>负载均衡</strong> 多个Shadowsocks服务器的能力。</li>
<li>探测Shadowsocks服务器 <strong>延迟</strong> 的能力。</li>
</ul>


<h2>安装</h2>

<p>Shadowsocks-Rust未提供DEB安装包。为了方便安装，可下载其<a href="https://github.com/shadowsocks/shadowsocks-rust/releases">静态链接版本</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo tar atf shadowsocks-v1.7.0-nightly.x86_64-unknown-linux-musl.tar.xz -C /usr/local/bin
</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<p>以root用户创建目录/etc/shadowsocks-rust，编辑/etc/shadowsocks-rust/config.json：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;servers&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">1080</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="s2">&quot;hello-world&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;aes-256-cfb&quot;</span>
</span><span class='line'>            <span class="s2">&quot;timeout&quot;</span><span class="p">:</span> <span class="mi">300</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">1081</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="s2">&quot;hello-kitty&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;aes-256-cfb&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;local_port&quot;</span><span class="p">:</span> <span class="mi">8388</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;local_address&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>address</code>为服务端地址。</li>
<li><code>server_port</code>为服务端监听端口。</li>
<li><code>password</code>为客户端和服务端预设的共享密码，它最好由安全密码生成器生成（如<a href="https://www.lastpass.com/">LastPass</a>或<a href="http://keepass.info/">KeePass</a>），且长度不小于6个字符。</li>
<li><code>timeout</code>为连接超时时间。</li>
<li><code>method</code>为加密算法，<code>aes-256-cfb</code>的安全性较好。</li>
<li>每个<code>servers</code>元素为一个Shadowsocks服务器配置。</li>
</ul>


<p>因Ubuntu 14.04过保，下面仅以Ubuntu 16.04及以后版本为例。</p>

<p>以root用户创建/etc/systemd/system/shadowsocks-rust-local.service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">Shadowsocks-Rust Custom Client Service.</span>
</span><span class='line'><span class="na">Documentation</span><span class="o">=</span><span class="s">sslocal -h</span>
</span><span class='line'><span class="na">After</span><span class="o">=</span><span class="s">network.target</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Service]</span>
</span><span class='line'><span class="na">Type</span><span class="o">=</span><span class="s">simple</span>
</span><span class='line'><span class="na">CapabilityBoundingSet</span><span class="o">=</span><span class="s">CAP_NET_BIND_SERVICE</span>
</span><span class='line'><span class="na">AmbientCapabilities</span><span class="o">=</span><span class="s">CAP_NET_BIND_SERVICE</span>
</span><span class='line'><span class="na">User</span><span class="o">=</span><span class="s">nobody</span>
</span><span class='line'><span class="na">Group</span><span class="o">=</span><span class="s">nogroup</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/local/bin/sslocal --log-without-time -c /etc/shadowsocks-rust/config.json</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Install]</span>
</span><span class='line'><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></code></pre></td></tr></table></div></figure>


<p>注册并启动服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown -R root:nogroup /etc/shadowsocks-rust
</span><span class='line'>sudo chmod -R g-w,o-rwx /etc/shadowsocks-rust
</span><span class='line'>sudo systemctl daemon-reload
</span><span class='line'>sudo systemctl <span class="nb">enable </span>shadowsocks-rust-local
</span><span class='line'>sudo systemctl start shadowsocks-rust-local
</span></code></pre></td></tr></table></div></figure>


<p>注：</p>

<ul>
<li>为降低<code>sslocal</code>进程权限，以nobody用户和nogroup组运行它。</li>
<li>为防止密码泄漏，/etc/shadowsocks-rust/config.json仅root用户或nogroup组可读。</li>
<li>限制<code>sslocal</code>进程仅能监听socket.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Docker容器中创建GlusterFS]]></title>
    <link href="http://www.malike.net.cn/blog/2017/03/02/glusterfs-docker-tutorial/"/>
    <updated>2017-03-02T18:06:07+00:00</updated>
    <id>http://www.malike.net.cn/blog/2017/03/02/glusterfs-docker-tutorial</id>
    <content type="html"><![CDATA[<p>本文展示如何在一台Linux物理机/虚拟机上，创建GlusterFS集群。目的在于测试和学习GlusterFS，而非将GlusterFS应用生产环境。</p>

<h2>下载节点容器镜像</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker pull gluster/gluster-centos
</span></code></pre></td></tr></table></div></figure>


<h2>创建节点容器实例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">1</span> 3<span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>        docker run -d --privileged<span class="o">=</span><span class="nb">true</span> --name gluster<span class="nv">$i</span> --hostname<span class="o">=</span>gluster<span class="nv">$i</span> <span class="se">\</span>
</span><span class='line'>                -v /etc/glusterfs<span class="nv">$i</span>:/etc/glusterfs:z <span class="se">\</span>
</span><span class='line'>                -v /var/lib/glusterd<span class="nv">$i</span>:/var/lib/glusterd:z <span class="se">\</span>
</span><span class='line'>                -v /var/log/glusterfs<span class="nv">$i</span>:/var/log/glusterfs:z <span class="se">\</span>
</span><span class='line'>                -v /srv/glusterfs<span class="nv">$i</span>:/srv/glusterfs:z <span class="se">\</span>
</span><span class='line'>                -v /sys/fs/cgroup:/sys/fs/cgroup:ro <span class="se">\</span>
</span><span class='line'>                -v /dev:/dev <span class="se">\</span>
</span><span class='line'>                gluster/gluster-centos
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>组建集群</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -ti gluster1 /bin/bash
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gluster peer probe &lt;gluster2 ip addr&gt;
</span><span class='line'>gluster peer probe &lt;gluster3 ip addr&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>创建卷</h2>

<h3>冗余卷 (replica)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gluster peer volume create v1 replica <span class="m">3</span> 172.17.0.<span class="o">{</span>2,3,4<span class="o">}</span>:/srv/glusterfs/v1 force
</span></code></pre></td></tr></table></div></figure>


<h3>条带卷 (stripe)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gluster peer volume create v2 strip <span class="m">3</span> 172.17.0.<span class="o">{</span>2,3,4<span class="o">}</span>:/srv/glusterfs/v2 force
</span></code></pre></td></tr></table></div></figure>


<h3>纠删码卷 (disperse)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gluster peer volume create e3 disperse <span class="m">3</span> redundancy <span class="m">1</span> 172.17.0.<span class="o">{</span>2,3,4<span class="o">}</span>:/srv/glusterfs/v3 force
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>由于这些容器实例的/srv/glusterfst与/在同一个分区，故需要指定force参数。</li>
<li>创建容器时，将host的/srv/glusterfs相关目录绑定至容器/srv/glusterfs是为了避免<a href="https://github.com/docker/docker/issues/1070">no xattr support in Docker #1070</a></li>
</ul>


<h2>挂载卷</h2>

<h3>通过FUSE挂载</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mount -t glusterfs 172.17.0.2:/v1 /mnt/glusterfs/
</span></code></pre></td></tr></table></div></figure>


<h2>脚本化</h2>

<p>为了便于测试，我将上述诸多过程归纳成脚本：<a href="https://gist.github.com/likema/69f6617c7567766302ec1ee4a53a0f6c#file-gluster_docker">gluster_docker</a></p>

<h2>Gluster Web Interface</h2>

<p><a href="https://github.com/oss2016summer/gluster-web-interface">gluster-web-interface</a>是一个管理GlusterFS的Web应用应用，它基于Ruby on Rails实现。</p>

<p>为了简化其安装，我创建其docker镜像<a href="https://hub.docker.com/r/like/gluster-web-interface/">docker-gluster-web-interface</a>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it -p 3000:3000 like/gluster-web-interface
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks简介]]></title>
    <link href="http://www.malike.net.cn/blog/2016/11/29/shadowsocks-tutorial/"/>
    <updated>2016-11-29T01:39:55+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/11/29/shadowsocks-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://shadowsocks.org/en/index.html">Shadowsocks</a>（中文名: 影梭） 是一款开源的安全SOCKS 5代理，它主要用于在大陆翻墙。</p>

<h2>原理</h2>

<p>与SSH动态代理相似，客户端呈现为SOCKS 5代理服务，客户端与服务器之间采用加密通信。服务器部署于GFW之外，从而实现代理翻墙服务。</p>

<h2>特点</h2>

<ul>
<li>使用自行设计的协议加密通信，支持多种加密算法：AES、Blowfish、IDEA、RC4等。除创建TCP连接外无需握手，每次请求只转发1个连接，因此使用起来网速较快，在移动设备上较省电。</li>
<li>通过异步I/O和事件驱动实现，响应速度快。</li>
<li>客户端支持主流操作系统平台：Windows、Linux、OS X、Android、iOS和OpenWrt</li>
</ul>


<h2>shadowsocks-libev简介</h2>

<p>网络中普遍采用Python版本的<a href="https://pypi.python.org/pypi/shadowsocks">shadowsocks</a>，该版本看似安装简单，却存在如下缺点：</p>

<ul>
<li>没有Linux操作系统原生安装包（如：RPM和DEB）：从Ubuntu 16.04开始，提供shadowsocks安装包。</li>
<li>没有操作系统的服务脚本（如init.d和upstart）。</li>
<li>Python程序占用内存较多，运行效率不佳。</li>
</ul>


<p>而<a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks-libev</a>是Shadowsocks在嵌入式和低端设备的轻量级实现：</p>

<ul>
<li>纯C实现，不仅占用内存极小，且运行效率更快。</li>
<li>在几乎所有Linux平台都存在原生安装包，且具有对应平台的服务启动脚本。</li>
</ul>


<p>下面基于Ubuntu 14.04/16.04介绍它的安装和配置。</p>

<h2>安装shadowsocks-libev</h2>

<p>客户端和服务端的安装方法相同：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install -y shadowsocks-libev
</span></code></pre></td></tr></table></div></figure>


<h2>配置shadowsocks-libev服务端</h2>

<p>编辑/etc/shadowsocks-libev/config.json：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;server_port&quot;</span><span class="p">:</span> <span class="mi">8388</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;共享密码&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;timeout&quot;</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;aes-256-cfb&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>server_port</code>为服务端监听端口</li>
<li><code>password</code>为客户端和服务端预设的共享密码，它最好由安全密码生成器生成（如<a href="https://www.lastpass.com/">LastPass</a>或<a href="http://keepass.info/">KeePass</a>），且长度不小于6个字符。</li>
<li><code>timeout</code>为连接超时时间。</li>
<li><code>method</code>为加密算法，<code>aes-256-cfb</code>的安全性较好。</li>
</ul>


<p>配置完成后，需重启：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service shadowsocks-libev restart
</span></code></pre></td></tr></table></div></figure>


<h2>配置shadowsocks-libev客户端</h2>

<p>创建/etc/shadowsocks-libev/client.json （文件名可修改）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;server&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;服务端地址&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;server_port&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;服务端端口&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;local_port&quot;</span><span class="p">:</span> <span class="s2">&quot;22357&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;共享密码&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;aes-256-cfb&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ubuntu 14.04</h3>

<p>安装包没有提供系统服务脚本，故须自己创建Upstart脚本/etc/init/ss-local.conf （文件名可修改）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">#</span> <span class="err">ss-local</span>
</span><span class='line'>
</span><span class='line'><span class="err">description</span> <span class="s2">&quot;shadowsocks client&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">start</span> <span class="err">on</span> <span class="err">(net-device-up</span> <span class="err">IFACE=eth</span><span class="mi">0</span> <span class="err">or</span> <span class="err">net-device-up</span> <span class="err">IFACE=wlan</span><span class="mi">0</span><span class="err">)</span>
</span><span class='line'><span class="err">stop</span> <span class="err">on</span> <span class="err">(net-device-down</span> <span class="err">IFACE=eth</span><span class="mi">0</span> <span class="err">and</span> <span class="err">net-device-down</span> <span class="err">IFACE=wlan</span><span class="mi">0</span><span class="err">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">respawn</span>
</span><span class='line'>
</span><span class='line'><span class="err">setuid</span> <span class="err">nobody</span>
</span><span class='line'><span class="err">setgid</span> <span class="err">nogroup</span>
</span><span class='line'>
</span><span class='line'><span class="err">exec</span> <span class="err">ss-local</span> <span class="err">-c</span> <span class="err">/etc/shadowsocks-libev/client.json</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了client.json的安全：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown -R root:nogroup /etc/shadowsocks-libev
</span><span class='line'>sudo chmod <span class="m">0750</span> /etc/shadowsocks-libev
</span><span class='line'>sudo chmod <span class="m">0640</span> /etc/shadowsocks-libev/client.json
</span></code></pre></td></tr></table></div></figure>


<p>启动客户端</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo start ss-local
</span></code></pre></td></tr></table></div></figure>


<p>最后，通过修改/etc/default/shadowsocks-libev的<code>START=no</code>禁止在客户机启动服务端程序——它在客户机没有作用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service shadowsocks-libev stop
</span></code></pre></td></tr></table></div></figure>


<h3>Ubuntu 16.04</h3>

<p>安装包提供了systemd的服务模板/lib/systemd/system/shadowsocks-libev-local@.service</p>

<p>默认<code>ss-local</code>以root用户运行，可修改上述模板为nobody用户和nogroup组，从而提高安全：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>simple
</span><span class='line'><span class="nv">CapabilityBoundingSet</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">AmbientCapabilities</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">User</span><span class="o">=</span>nobody
</span><span class='line'><span class="nv">Group</span><span class="o">=</span>nogroup
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/ss-local -c /etc/shadowsocks-libev/%i.json.
</span></code></pre></td></tr></table></div></figure>


<p>注意，升级shadowsocks-libev，模板将回复原状，须再次修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl daemon-reload
</span><span class='line'>sudo systemctl <span class="nb">enable </span>shadowsocks-libev-local@client
</span><span class='line'>sudo systemctl start shadowsocks-libev-local@client
</span></code></pre></td></tr></table></div></figure>


<p>注意，@client与client.json的基本名必须一致。</p>

<p>最后，禁用并停止服务端程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl disable shadowsocks-libev
</span><span class='line'>sudo systemctl stop shadowsocks-libev
</span></code></pre></td></tr></table></div></figure>


<h2>集群化</h2>

<p>类似SSH集群，多个shadowsocks也可以构建SOCKS 5集群，具体请参考《<a href="http://www.malike.net.cn/blog/2015/03/15/ssh-proxy-cluster/">SSH翻墙集群</a>》的“HAProxy的配置方法”。</p>

<p>实用中发现，<code>ss-local</code>不会因为shadowsocks服务器是否可达，而停止运行或拒绝HAProxy连接。</p>

<p>导致HAProxy无法探测shadowsocks服务器是否离线或不可访问，部分负载将失败或重试（浏览器），从而影响体验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Python multiprocessing的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor/"/>
    <updated>2016-07-11T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor</id>
    <content type="html"><![CDATA[<p>虽然<a href="http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor/">基于Gevent的Actor</a>和<a href="http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor/">基于Python 3.5异步的Actor</a>都支持并发（concurrent）计算（仅运行于单进程中），但是不支持并行（parallel）计算，即无法利用多核。</p>

<p>Python内置的multiprocessing模块不仅支持并行计算，而且与Gevent接口相似。所以，模仿Gevent的Actor实现multiprocessing的Actor并不困难。</p>

<h2>multiprocessing的Actor实现</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Queue</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">Queue</span> <span class="kn">import</span> <span class="n">Empty</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">queue</span> <span class="kn">import</span> <span class="n">Empty</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span><span class="p">(</span><span class="n">Process</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">Process</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">receive_timeout</span> <span class="o">=</span> <span class="n">receive_timeout</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">put_nowait</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="bp">NotImplemented</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle_timeout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">running</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">message</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">receive_timeout</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="n">Empty</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">handle_timeout</span><span class="p">()</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">receive</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基于message的扩展</h2>

<p>将并行Actor扩展为发布-订阅者模式，基本与Gevent的实现一样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">message</span> <span class="kn">import</span> <span class="n">observable</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">actor</span> <span class="kn">import</span> <span class="n">Actor</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@observable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Publisher</span><span class="p">(</span><span class="n">Actor</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">subject</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class='line'>        <span class="n">Actor</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">subcribe</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">observer</span><span class="o">.</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>基于Publisher实现Ping-Pong，与Gevent的实现差异也不大。</p>

<p>不同的是它实际启动3个进程。除主进程外，每个actor分别运行于独立进程，从而实现多核计算。主进程监督2个actor进程运行，如启动、停止以及异常处理等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">publisher</span> <span class="kn">import</span> <span class="n">Publisher</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pinger</span><span class="p">(</span><span class="n">Publisher</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle_timeout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;pinger timeout&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ponger</span><span class="p">(</span><span class="n">Publisher</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle_timeout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;ponger timeout&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span> <span class="o">=</span> <span class="n">Pinger</span><span class="p">(</span><span class="s">&#39;evt.ping&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">pong</span> <span class="o">=</span> <span class="n">Ponger</span><span class="p">(</span><span class="s">&#39;evt.pong&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">subcribe</span><span class="p">(</span><span class="n">pong</span><span class="p">)</span>
</span><span class='line'><span class="n">pong</span><span class="o">.</span><span class="n">subcribe</span><span class="p">(</span><span class="n">ping</span><span class="p">)</span>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="n">pong</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;start&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">pong</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Python 3.5异步的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor/"/>
    <updated>2016-07-03T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor</id>
    <content type="html"><![CDATA[<h2>Python 3.5异步模型</h2>

<p>Python 3.5推出了async/await语法，在语法层面简化了异步编程。官方库asyncio是应用async/await的途径。</p>

<p>Ubuntu 16.04默认安装Python 3.5，或者通过<a href="http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial/">pyenv</a>安装它。</p>

<h2>异步Actor的实现</h2>

<p>基于asyncio，可以实现async actor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">asyncio</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">put_nowait</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="bp">NotImplemented</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">running</span><span class="p">:</span>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="n">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class='line'>            <span class="n">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">receive</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码的关键是通过asyncio.Queue异步接收消息，并异步处理接收到的消息。</p>

<p>通过这个类，实现Ping-Pong示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">asyncio</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">actor</span> <span class="kn">import</span> <span class="n">Actor</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pinger</span><span class="p">(</span><span class="n">Actor</span><span class="p">):</span>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pong</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ponger</span><span class="p">(</span><span class="n">Actor</span><span class="p">):</span>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ping</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;pong&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span> <span class="o">=</span> <span class="n">Pinger</span><span class="p">()</span>
</span><span class='line'><span class="n">pong</span> <span class="o">=</span> <span class="n">Ponger</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;start&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">get_event_loop</span><span class="p">()</span>
</span><span class='line'><span class="n">loop</span><span class="o">.</span><span class="n">run_until_complete</span><span class="p">(</span><span class="n">asyncio</span><span class="o">.</span><span class="n">wait</span><span class="p">((</span><span class="n">ping</span><span class="o">.</span><span class="n">run</span><span class="p">(),</span> <span class="n">pong</span><span class="o">.</span><span class="n">run</span><span class="p">())))</span>
</span><span class='line'><span class="n">loop</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>该示例代码中，actor之间同步发送消息（asyncio.Queue.put_nowait），由于运行在单线程上，并不存在竞争。</p>

<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用asyncio.wait_for的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">asyncio</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">receive_timeout</span> <span class="o">=</span> <span class="n">receive_timeout</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">put_nowait</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="bp">NotImplemented</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">handle_timeout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">running</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">message</span> <span class="o">=</span> <span class="n">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">wait_for</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">get</span><span class="p">(),</span>
</span><span class='line'>                                                 <span class="bp">self</span><span class="o">.</span><span class="n">receive_timeout</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">TimeoutError</span><span class="p">:</span>
</span><span class='line'>                <span class="n">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle_timeout</span><span class="p">()</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">await</span> <span class="bp">self</span><span class="o">.</span><span class="n">receive</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基于message的扩展</h2>

<p>由于<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>仅支持Python 2，而且Google Code已经停止服务。</p>

<p>基于原代码基础上，我在GitHub创建<a href="https://github.com/likema/python-message">python-message</a>，并扩展支持Python 3.</p>

<p>新版本message，也可以通过pip安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install https://github.com/likema/python-message/archive/master.zip
</span></code></pre></td></tr></table></div></figure>


<p>在此基础上，将异步Actor扩展为发布-订阅者模式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">message</span> <span class="kn">import</span> <span class="n">observable</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">actor</span> <span class="kn">import</span> <span class="n">Actor</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@observable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Publisher</span><span class="p">(</span><span class="n">Actor</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">subject</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class='line'>        <span class="n">Actor</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">subcribe</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">observer</span><span class="o">.</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>基于Publisher实现Ping-Pong，从而解耦发送者与接收者，且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">asyncio</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">publisher</span> <span class="kn">import</span> <span class="n">Publisher</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pinger</span><span class="p">(</span><span class="n">Publisher</span><span class="p">):</span>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">handle_timeout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Pinger timeout&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ponger</span><span class="p">(</span><span class="n">Publisher</span><span class="p">):</span>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;pong&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">handle_timeout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Ponger timeout&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span> <span class="o">=</span> <span class="n">Pinger</span><span class="p">(</span><span class="s">&#39;evt.ping&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">pong</span> <span class="o">=</span> <span class="n">Ponger</span><span class="p">(</span><span class="s">&#39;evt.pong&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">subcribe</span><span class="p">(</span><span class="n">pong</span><span class="p">)</span>
</span><span class='line'><span class="n">pong</span><span class="o">.</span><span class="n">subcribe</span><span class="p">(</span><span class="n">ping</span><span class="p">)</span>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;start&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">get_event_loop</span><span class="p">()</span>
</span><span class='line'><span class="n">loop</span><span class="o">.</span><span class="n">run_until_complete</span><span class="p">(</span><span class="n">asyncio</span><span class="o">.</span><span class="n">wait</span><span class="p">((</span><span class="n">ping</span><span class="o">.</span><span class="n">run</span><span class="p">(),</span> <span class="n">pong</span><span class="o">.</span><span class="n">run</span><span class="p">())))</span>
</span><span class='line'><span class="n">loop</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>存在的问题</h2>

<p>相比<a href="http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor/">Gevent实现的Actor</a>，异步Actor并不透明支持所有的I/O函数，它仅支持基于asyncio实现的库，如<a href="http://aiohttp.readthedocs.io/en/stable/">aiohttp</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackabuse.com/python-async-await-tutorial/">Python async/await Tutorial</a></li>
<li><a href="https://github.com/mehmetkose/python3.5-async-crawler">python3.5-async-crawler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nvm简介——Debian/Ubuntu中管理多版本Node.js]]></title>
    <link href="http://www.malike.net.cn/blog/2016/06/09/nvm-tutorial/"/>
    <updated>2016-06-09T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/06/09/nvm-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/creationix/nvm">nvm</a>是管理Node.js版本的工具，它支持在多个Node.js版本间切换。</p>

<h2>一、安装</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/creationix/nvm.git ~/.nvm
</span><span class='line'><span class="nb">cd</span> ~/.nvm
</span><span class='line'>git checkout <span class="sb">`</span>git describe --abbrev<span class="o">=</span><span class="m">0</span> --tags<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>激活nvm</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>. ~/.nvm/nvm.sh
</span></code></pre></td></tr></table></div></figure>


<p>为了每次登录后自动激活nvm，需将<code>NMV_DIR</code>、<code>nvm.sh</code>和补齐加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span>~/.nvm
</span><span class='line'><span class="o">[</span> -s <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> . <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span>
</span><span class='line'><span class="o">[</span> -r <span class="nv">$NVM_DIR</span>/bash_completion <span class="o">]</span> <span class="o">&amp;&amp;</span> . <span class="nv">$NVM_DIR</span>/bash_completion
</span></code></pre></td></tr></table></div></figure>


<p>在国内，为了加速下述安装，可在bash的~/.bashrc（或zsh的~/.zshrc）加入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">NVM_NODEJS_ORG_MIRROR</span><span class="o">=</span>https://npm.taobao.org/mirrors/node
</span></code></pre></td></tr></table></div></figure>


<h2>二、常用命令</h2>

<h3>列表可安装的Node.js版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm ls-remote
</span></code></pre></td></tr></table></div></figure>


<p>除了Node.js官方版本，还支持io.js</p>

<h3>安装指定版本的Node.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm install 10.16.2
</span></code></pre></td></tr></table></div></figure>


<p>它会自动下载指定版本的Node.js二进制包（不需要编译源码），安装在~/.nvm/versions/node</p>

<p>通常，最好安装最近的长周期版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm install --lts
</span></code></pre></td></tr></table></div></figure>


<h3>卸载指定版本的Node.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm uninstall 10.16.2
</span></code></pre></td></tr></table></div></figure>


<h3>设置shell的Node.js版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm use 10.16.2
</span></code></pre></td></tr></table></div></figure>


<p>它将Node.js指定版本的bin路径加入PATH.</p>

<p>还原环境变量PATH</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm deactivate
</span></code></pre></td></tr></table></div></figure>


<h3>迁移npm至新版本的Node.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm install node --reinstall-packages-from<span class="o">=</span>node
</span></code></pre></td></tr></table></div></figure>


<p>或</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm install v10.16.2 --reinstall-packages-from<span class="o">=</span>10.16.0
</span></code></pre></td></tr></table></div></figure>


<h3>.nvmrc</h3>

<p>它存储在工程根目录中，用于记录该工程依赖的Node.js版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>10.16.2 &gt; .nvmrc
</span></code></pre></td></tr></table></div></figure>


<p>进入工程目录（当前目录），运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nvm use
</span></code></pre></td></tr></table></div></figure>


<p>将根据.nvmrc指定shell的Nodejs版本</p>

<h2>三、升级nvm</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$NVM_DIR</span>
</span><span class='line'>git fetch origin
</span><span class='line'>git checkout <span class="sb">`</span>git describe --abbrev<span class="o">=</span><span class="m">0</span> --tags<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>升级完成后，需要重新激活nvm</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>. <span class="nv">$NVM_DIR</span>/nvm.sh
</span></code></pre></td></tr></table></div></figure>


<h2>四、制作Docker镜像</h2>

<p>若不希望使用NodeJS的官方Docker镜像，可利用nvm创建镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Dockerfile'><span class='line'><span class="k">FROM</span> ubuntu:bionic
</span><span class='line'><span class="k">MAINTAINER</span> ...
</span><span class='line'>
</span><span class='line'><span class="k">ENV</span> DEBIAN_FRONTEND noninteractive
</span><span class='line'><span class="k">ENV</span> <span class="nv">NVM_NODEJS_ORG_MIRROR</span><span class="o">=</span>https://npm.taobao.org/mirrors/node
</span><span class='line'><span class="k">ENV</span> NODE_VERSION 10.16.2
</span><span class='line'><span class="k">ENV</span> PATH /root/.nvm/versions/node/v<span class="nv">$NODE_VERSION</span>/bin:<span class="nv">$PATH</span>
</span><span class='line'>
</span><span class='line'><span class="k">RUN</span> <span class="nb">set</span> -eux<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get update<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get install --no-install-recommends -y wget ca-certificates<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    wget -O- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh <span class="p">|</span> bash<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get remove --purge -y wget ca-certificates<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get autoremove --purge -y<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get clean<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    rm -rf /var/lib/apt/lists/* /root/.nvm/.cache
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pyenv简介——Debian/Ubuntu中管理多版本Python]]></title>
    <link href="http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial/"/>
    <updated>2016-05-21T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yyuu/pyenv">pyenv</a>是管理Python版本的工具，它支持在多个Python版本间切换。</p>

<h2>一、安装</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/pyenv/pyenv.git ~/.pyenv
</span><span class='line'><span class="nb">cd</span> ~/.pyenv
</span><span class='line'>git checkout <span class="sb">`</span>git describe --abbrev<span class="o">=</span><span class="m">0</span> --tags<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>将<code>PYENV_ROOT</code>和<code>pyenv init</code>加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=~/.pyenv/bin:$PATH&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PYENV_ROOT=~/.pyenv&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(pyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PYTHON_BUILD_MIRROR_URL=&quot;http://mirrors.sohu.com/python/&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<h2>二、常用命令</h2>

<h3>列表可安装的Python版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pyenv</span> <span class="n">install</span> <span class="o">-</span><span class="n">l</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了Python官方版本，还支持</p>

<ul>
<li>anaconda</li>
<li>ironpython</li>
<li>jython</li>
<li>miniconda</li>
<li>pypy</li>
<li>stackless</li>
</ul>


<h3>安装指定版本的Python</h3>

<p>安装过程，实际为下载并编译指定版本的Python源码，故需系统安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y build-essential zlib1g-dev libssl-dev libffi-dev
</span></code></pre></td></tr></table></div></figure>


<p>还可选择安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev
</span></code></pre></td></tr></table></div></figure>


<p>然后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv install 3.6.8
</span><span class='line'>pyenv rehash
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>源码（如Python-3.6.8.tar.gz）缓存在 <code>.pyenv/cache</code> 目录中，在安装完后可手动删除。</li>
<li>Python版本安装在~/.pyenv/versions目录中。</li>
</ul>


<h3>卸载指定版本的Python</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv uninstall 3.6.8
</span></code></pre></td></tr></table></div></figure>


<h3>设置shell的Python版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv shell 3.6.8
</span></code></pre></td></tr></table></div></figure>


<p>等同于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PYENV_VERSION</span><span class="o">=</span>3.6.8
</span></code></pre></td></tr></table></div></figure>


<p>清除<code>PYENV_VERSION</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv shell --unset
</span></code></pre></td></tr></table></div></figure>


<h2>三、安装pyenv-virtualenv</h2>

<p>pyenv-virtual是pyenv的插件，它支持管理多个virtualenv</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<h3>创建virtualenv</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv virtualenv 3.6.8 aiohttp-virtual-env
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建aiohttp-virtual-env之前，须先安装Python 3.6.8（通过系统或pyenv安装）。</li>
<li>aiohttp-virtual-env存储在~/.pyenv/versions/3.6.8/envs目录中，且在~/.pyenv/versions目录中建立同名符号链接。</li>
</ul>


<h3>删除virtualenv</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv uninstall aiohttp-virtual-env
</span></code></pre></td></tr></table></div></figure>


<h3>列表virtualenv</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv virtualenvs
</span></code></pre></td></tr></table></div></figure>


<h3>激活/禁用virtualenv</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv activate aiohttp-virtual-env
</span><span class='line'>pyenv deactivate
</span></code></pre></td></tr></table></div></figure>


<h3>迁移virtualenv</h3>

<p>将指定virtualenv，迁移至另一virtualenv，须安装pyenv插件pyenv-pip-migrate：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/pyenv/pyenv-pip-migrate.git ~/.pyenv/plugins/pyenv-pip-migrate
</span></code></pre></td></tr></table></div></figure>


<p>然后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv migrate aiohttp-virtual-env hello-virtual-env
</span></code></pre></td></tr></table></div></figure>


<h2>四、升级</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$PYENV_ROOT</span>
</span><span class='line'>git fetch origin
</span><span class='line'>git checkout <span class="sb">`</span>git describe --abbrev<span class="o">=</span><span class="m">0</span> --tags<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>更简单的办法为安装pyenv插件pyenv-update：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/pyenv/pyenv-update.git ~/.pyenv/plugins/pyenv-update
</span></code></pre></td></tr></table></div></figure>


<p>它不仅能更新pyenv，还能更新pyenv所有已安装的插件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pyenv update
</span></code></pre></td></tr></table></div></figure>


<h2>五、配置Upstart脚本</h2>

<p>若Python程序须通过Upstart启动，则其Upstart脚本可以类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># service name</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;service description ...&quot;</span>
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>setuid &lt;username&gt;
</span><span class='line'>setgid &lt;group&gt;
</span><span class='line'>
</span><span class='line'>env <span class="nv">PYENV_ROOT</span><span class="o">=</span>/home/&lt;username&gt;/.pyenv
</span><span class='line'>env <span class="nv">PATH</span><span class="o">=</span>/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
</span><span class='line'>env <span class="nv">PYENV_VERSION</span><span class="o">=</span>&lt;python version or virtualenv name&gt;
</span><span class='line'>
</span><span class='line'>chdir &lt;app dir&gt;
</span><span class='line'>
</span><span class='line'>script
</span><span class='line'>        <span class="nb">eval</span> <span class="s2">&quot;$(pyenv init -)&quot;</span>
</span><span class='line'>        <span class="nb">exec</span> ./&lt;app&gt;
</span><span class='line'>end script
</span><span class='line'><span class="c"># vim: ts=4 sw=4 sts=4 ft=upstart</span>
</span></code></pre></td></tr></table></div></figure>


<p>或</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># service name</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;service description ...&quot;</span>
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>setuid &lt;username&gt;
</span><span class='line'>setgid &lt;group&gt;
</span><span class='line'>
</span><span class='line'>env <span class="nv">PYENV_ROOT</span><span class="o">=</span>/home/&lt;username&gt;/.pyenv
</span><span class='line'>env <span class="nv">PATH</span><span class="o">=</span>/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
</span><span class='line'>env <span class="nv">PYENV_VERSION</span><span class="o">=</span>&lt;python version or virtualenv name&gt;
</span><span class='line'>
</span><span class='line'>chdir &lt;app dir&gt;
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> ./&lt;app&gt;
</span><span class='line'><span class="c"># vim: ts=4 sw=4 sts=4 ft=upstart</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>六、配置Systemd脚本</h2>

<p>若Python程序须通过Systemd启动，则其Systemd脚本类似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Service]</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="na">User</span><span class="o">=</span><span class="s">&lt;username&gt;</span>
</span><span class='line'><span class="na">Group</span><span class="o">=</span><span class="s">&lt;group&gt;</span>
</span><span class='line'><span class="na">Environment</span><span class="o">=</span><span class="s">&quot;PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin&quot;</span>
</span><span class='line'><span class="na">Environment</span><span class="o">=</span><span class="s">&quot;PYENV_ROOT=/home/&lt;username&gt;/.pyenv&quot;</span>
</span><span class='line'><span class="na">Environment</span><span class="o">=</span><span class="s">&quot;PYENV_VERSION=&lt;python version or virtualenv name&gt;&quot;</span>
</span><span class='line'><span class="na">WorkingDirectory</span><span class="o">=</span><span class="s">&lt;app dir&gt;</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">&lt;app dir&gt;/&lt;app&gt;</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>七、制作Docker镜像</h2>

<p>若不希望使用Python的官方Docker镜像，可利用pyenv创建镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Dockerfile'><span class='line'><span class="k">FROM</span> ubuntu:bionic
</span><span class='line'><span class="k">MAINTAINER</span> ...
</span><span class='line'>
</span><span class='line'><span class="k">ENV</span> DEBIAN_FRONTEND noninteractive
</span><span class='line'><span class="k">ENV</span> PYTHON_BUILD_MIRROR_URL http://mirrors.sohu.com/python/
</span><span class='line'><span class="k">ENV</span> PYENV_ROOT /root/.pyenv
</span><span class='line'><span class="k">ENV</span> PYENV_VERSION 3.6.8
</span><span class='line'><span class="k">ENV</span> PATH <span class="nv">$PYENV_ROOT</span>/shims:<span class="nv">$PYENV_ROOT</span>/bin:<span class="nv">$PATH</span>
</span><span class='line'>
</span><span class='line'><span class="k">RUN</span> <span class="nb">set</span> -eux<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get update<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="nv">savedAptMark</span><span class="o">=</span><span class="s2">&quot;$(apt-mark showmanual)&quot;</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get install -y git wget build-essential zlib1g-dev libssl-dev libffi-dev libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    git clone --depth <span class="m">1</span> https://github.com/pyenv/pyenv.git <span class="nv">$PYENV_ROOT</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="nb">cd</span> <span class="nv">$PYENV_ROOT</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    git checkout <span class="sb">`</span>git describe --abbrev<span class="o">=</span><span class="m">0</span> --tags<span class="sb">`</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    pyenv install 3.6.8<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-mark auto <span class="s1">&#39;.*&#39;</span> &gt; /dev/null<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="o">[</span> -z <span class="s2">&quot;$savedAptMark&quot;</span> <span class="o">]</span> <span class="o">||</span> apt-mark manual <span class="nv">$savedAptMark</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant<span class="o">=</span><span class="nb">false</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    apt-get clean<span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    rm -rf /var/lib/apt/lists <span class="nv">$PYENV_ROOT</span>/cache/* /tmp/*
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[扩展Python Gevent的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor/"/>
    <updated>2016-04-20T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor</id>
    <content type="html"><![CDATA[<h2>什么是Actor模型？</h2>

<p><a href="https://en.wikipedia.org/wiki/Actor_model">Actor模型</a>（<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E8%88%87%E8%80%85%E6%A8%A1%E5%BC%8F">中文版</a>）是一种基于消息传递（message-passing）的并发（concurrent）计算模型。</p>

<p>它与OOP异同：</p>

<ul>
<li>它推崇“一切皆为Actor”，而OOP推崇“一切皆为Object”</li>
<li>表面上，Actor通过发送消息与其他Actor通信，OOP的Object通过发送消息与其他Object通信。实际上，前者为发送结构化的数据，而后者为调用对方的方法。</li>
<li>它的发送者与已经发送的消息解耦，它允许进行异步通信，从而实现发送者与接收者并发执行。而OOP的方法调用者（发送者）与方法被调用者（接收者）通常顺序执行，而且调用者与被调用者通常具有较强的耦合。</li>
<li>它的消息接收者是通过地址区分的，有时也被称作“邮件地址”。而OOP的Object通过引用（地址）来区分。</li>
<li>它着重消息传递，而OOP着重于类与对象。</li>
</ul>


<h2>Gevent的Actor实现</h2>

<p><a href="http://sdiehl.github.io/gevent-tutorial/">gevent</a>（<a href="http://xlambda.com/gevent-tutorial/">中文版</a>）是一个基于libev的并发库，它为各种并发和网络相关的任务提供了整洁的API。</p>

<p>其<a href="http://sdiehl.github.io/gevent-tutorial/#actors">Actors</a>（<a href="http://xlambda.com/gevent-tutorial/#actors">中文版</a>）章节已介绍了如何基于Greenlet和 Queue实现</p>

<p>该实现存在的问题：发送者与接收者紧耦合，发送者持有接收者的对象引用。</p>

<h2>解决办法</h2>

<p>在此基础上，我利用<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>库将其扩展为发布-订阅者模式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">gevent.queue</span> <span class="kn">import</span> <span class="n">Queue</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">Greenlet</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">message</span> <span class="kn">import</span> <span class="n">observable</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span><span class="p">(</span><span class="n">Greenlet</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>        <span class="n">Greenlet</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="bp">NotImplemented</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">running</span><span class="p">:</span>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">receive</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@observable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Publisher</span><span class="p">(</span><span class="n">Actor</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">subject</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">subject</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class='line'>        <span class="n">Actor</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">subcribe</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">observer</span><span class="o">.</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，不仅将发送者与接收者解耦，而且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<p>类似Ping-Pong的示例，Pinger对象订阅了Ponger对象的evt.pong事件，Ponger对象订阅Pinger对象的evt.ping事件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gevent</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pinger</span><span class="p">(</span><span class="n">Publisher</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">gevent</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ponger</span><span class="p">(</span><span class="n">Publisher</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;pong&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">gevent</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span> <span class="o">=</span> <span class="n">Pinger</span><span class="p">(</span><span class="s">&#39;evt.ping&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pong</span> <span class="o">=</span> <span class="n">Ponger</span><span class="p">(</span><span class="s">&#39;evt.pong&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">subcribe</span><span class="p">(</span><span class="n">pong</span><span class="p">)</span>
</span><span class='line'><span class="n">pong</span><span class="o">.</span><span class="n">subcribe</span><span class="p">(</span><span class="n">ping</span><span class="p">)</span>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="n">pong</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;start&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gevent</span><span class="o">.</span><span class="n">joinall</span><span class="p">([</span><span class="n">ping</span><span class="p">,</span> <span class="n">pong</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用gevent.queue.get的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">gevent.queue</span> <span class="kn">import</span> <span class="n">Queue</span><span class="p">,</span> <span class="n">Empty</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">Greenlet</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">message</span> <span class="kn">import</span> <span class="n">observable</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span><span class="p">(</span><span class="n">Greenlet</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">receive_timeout</span> <span class="o">=</span> <span class="n">receive_timeout</span>
</span><span class='line'>        <span class="n">Greenlet</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="bp">NotImplemented</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle_timeout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">running</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">message</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">receive_timeout</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="n">Empty</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">handle_timeout</span><span class="p">()</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">receive</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@observable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Publisher</span><span class="p">(</span><span class="n">Actor</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">subject</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class='line'>        <span class="n">Actor</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">receive_timeout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">subcribe</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">observer</span><span class="o">.</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH翻墙集群]]></title>
    <link href="http://www.malike.net.cn/blog/2015/03/15/ssh-proxy-cluster/"/>
    <updated>2015-03-15T21:30:43+08:00</updated>
    <id>http://www.malike.net.cn/blog/2015/03/15/ssh-proxy-cluster</id>
    <content type="html"><![CDATA[<p>SSH动态代理是国内较为常见的翻墙方法。正如<a href="http://www.malike.net.cn/blog/2014/10/27/ssh-tunnel-tutorial/">SSH隧道简介</a>所说，它存在不少有优点。</p>

<p>然而在实际使用中，它存在如下缺点：</p>

<ul>
<li>与PPTP等VPN协议相比，它的连接不稳定。前者应该具备协议级断线重传机制。</li>
<li>基于廉价VPS，导致它的连接不稳定。而且廉价VPS容易掉线，有时需要用户自己找在线客户修复，进一步延长了掉线时间。</li>
<li>由于上述缺点，不适合小型公司多人使用。</li>
</ul>


<p>在大概2年前，我摸索出SSH动态代理集群的办法。并将之部署于我所服务的公司，成功负载了20-30人日常翻墙学习与工作的需求。</p>

<h2>原理</h2>

<p>SSH动态代理，即为SOCK5代理，所以我们需要的是SOCK5集群。</p>

<p>若搜索<a href="https://www.google.com/search?hl=en&amp;q=socks+5+load+balance">socks 5 load balance</a>不难发现一些有用信息：</p>

<p><a href="http://serverfault.com/questions/517971/what-is-the-best-way-to-load-balance-multiple-sock5-proxys-on-seperate-vms-in-t">What is the best way to load balance multiple sock5 proxys on seperate VM&rsquo;s in the same datacenter?</a></p>

<p>我将分别介绍3种方法搭建SOCK5集群：</p>

<ol>
<li>利用第三方模块<a href="https://github.com/yaoweibin/nginx_tcp_proxy_module">nginx_tcp_proxy_module</a>。</li>
<li>Nginx 1.9开始支持<a href="http://nginx.com/resources/admin-guide/tcp-load-balancing/">TCP Load Balancing</a>。</li>
<li><a href="http://www.haproxy.org/">HAProxy</a></li>
</ol>


<p>关于SSH动态代理的配置方法，请参看<a href="http://www.malike.net.cn/blog/2014/12/23/autossh-tutorial/">AutoSSH简介</a></p>

<h2>nginx_tcp_proxy_module的配置方法</h2>

<p>Ubuntu的Nginx并没有将nginx_tcp_proxy_module编译进去。为了简化安装，我基于Ubuntu的Nginx包，做了Nginx的<a href="https://launchpad.net/~likemartinma/+archive/ubuntu/net">PPA</a>:</p>

<ul>
<li>升级Nginx版本</li>
<li>加入nginx_tcp_proxy_module</li>
</ul>


<p>添加我的PPA</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:likemartinma/net
</span><span class='line'>sudo apt-get -y update
</span></code></pre></td></tr></table></div></figure>


<p>若未安装nginx，则</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y nginx
</span></code></pre></td></tr></table></div></figure>


<p>若已安装nginx，则</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get -y upgrade
</span></code></pre></td></tr></table></div></figure>


<p>在/etc/nginx/nginx.conf中，增加如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">tcp</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">access_log</span> <span class="s">/var/log/nginx/tcp_access.log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">upstream</span> <span class="s">ssh_cluster</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># simple round-robin</span>
</span><span class='line'>        <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12345</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12346</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12347</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kn">check</span> <span class="s">interval=3000</span> <span class="s">rise=2</span> <span class="s">fall=5</span> <span class="s">timeout=1000</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">server</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">listen</span> <span class="mi">9999</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">proxy_pass</span> <span class="s">ssh_cluster</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了查看集群的状态，在/etc/nginx/sites-enabled/default的中，增加如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="s">location</span> <span class="s">/status</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">tcp_check_status</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重启Nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">service</span> <span class="s">nginx</span> <span class="s">restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，访问http://&lt;cluster IP&gt;/status将能查看集群的详细状态。</p>

<h2>Nginx 1.9的配置方法</h2>

<p>Ubuntu 15.10之前的官方Nginx版本都小于1.9，须通过ppa:nginx/development升级nginx。</p>

<p>添加ppa:nginx/development</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:nginx/development
</span><span class='line'>sudo apt-get -y update
</span></code></pre></td></tr></table></div></figure>


<p>若未安装nginx，则</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y nginx
</span></code></pre></td></tr></table></div></figure>


<p>若已安装nginx，则</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get -y upgrade
</span></code></pre></td></tr></table></div></figure>


<p>在/etc/nginx/nginx.conf中，增加如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">stream</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">upstream</span> <span class="s">ssh_cluster</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">least_conn</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12345</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12346</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12347</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">server</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">listen</span> <span class="mi">9999</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">proxy_pass</span> <span class="s">ssh_cluster</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重启Nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">service</span> <span class="s">nginx</span> <span class="s">restart</span>
</span></code></pre></td></tr></table></div></figure>


<h2>HAProxy的配置方法</h2>

<p>安装haproxy</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">sudo</span> <span class="s">apt-get</span> <span class="s">install</span> <span class="s">-y</span> <span class="s">haproxy</span>
</span></code></pre></td></tr></table></div></figure>


<p>在/etc/haproxy/haproxy.cfg中，增加如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">frontend</span> <span class="s">socks5</span>
</span><span class='line'>    <span class="s">mode</span> <span class="s">tcp</span>
</span><span class='line'>    <span class="s">bind</span> <span class="s">*:9999</span>
</span><span class='line'>    <span class="s">default_backend</span> <span class="s">ssh_cluster</span>
</span><span class='line'>
</span><span class='line'><span class="s">backend</span> <span class="s">ssh_cluster</span>
</span><span class='line'>    <span class="s">mode</span> <span class="s">tcp</span>
</span><span class='line'>    <span class="s">balance</span> <span class="s">roundrobin</span>
</span><span class='line'>    <span class="s">server</span> <span class="s">vps1</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12345</span> <span class="s">weight</span> <span class="mi">1</span> <span class="s">check</span> <span class="s">inter</span> <span class="mi">30000</span>
</span><span class='line'>    <span class="s">server</span> <span class="s">vps2</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12346</span> <span class="s">weight</span> <span class="mi">1</span> <span class="s">check</span> <span class="s">inter</span> <span class="mi">30000</span>
</span><span class='line'>    <span class="s">server</span> <span class="s">vps3</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">12347</span> <span class="s">weight</span> <span class="mi">1</span> <span class="s">check</span> <span class="s">inter</span> <span class="mi">30000</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了查看集群的状态，在/etc/haproxy/haproxy.cfg中，增加如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">listen</span> <span class="s">stats</span> <span class="p">:</span><span class="mi">9090</span>
</span><span class='line'>    <span class="s">balance</span>
</span><span class='line'>    <span class="s">mode</span> <span class="s">http</span>
</span><span class='line'>    <span class="s">stats</span> <span class="s">enable</span>
</span><span class='line'>    <span class="s">stats</span> <span class="s">auth</span> <span class="s">admin:admin</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认安装，haproxy处于不活动状态，须要激活它。</p>

<p>在/etc/default/haproxy中，修改如下行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">ENABLED=1</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，启动haproxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">service</span> <span class="s">haproxy</span> <span class="s">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，访问http://&lt;cluster IP&gt;:9090/haproxy?stats将能查看集群的详细状态。</p>

<h2>总结</h2>

<ul>
<li>nginx_tcp_proxy_module有简单的集群状态页面。</li>
<li>nginx 1.9没有集群状态查页面，仅能通过错误日志/var/log/ngnix/error.log来查看掉线的集群节点。</li>
<li>haproxy不仅有完善的集群状态页面，而且不需要任何PPA，应该是最佳选择。</li>
<li>上述3种方法都缺乏认证机制，只能部署于家庭或企业内网。当然也可以部署于个人电脑，事实上，我就是这样使用的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoSSH简介]]></title>
    <link href="http://www.malike.net.cn/blog/2014/12/23/autossh-tutorial/"/>
    <updated>2014-12-23T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2014/12/23/autossh-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.harding.motd.ca/autossh/">autossh</a> (Automatically restart SSH sessions and tunnels) 在运行的时候启动一个 ssh 进程，并监控该进程的健康状况；当 ssh 进程崩溃或停止通信时，它将重启动 ssh 进程。</p>

<h2>命令选项</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>autossh <span class="o">[</span>-V<span class="o">]</span> <span class="o">[</span>-M port<span class="o">[</span>:echo_port<span class="o">]]</span> <span class="o">[</span>-f<span class="o">]</span> <span class="o">[</span>SSH_OPTIONS<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>-M port[:echo_port]</code> 指定监控端口（和echo端口，默认为前者加1）。</p>

<ul>
<li>若希望使远程标准 inetd 的 echo 服务（默认端口为7），则指定 <code>echo_port</code> ，仅需服务监听地址为 <code>localhost</code>。</li>
<li>若 <code>port</code> 设置为 <code>0</code> ，则将禁用监控功能。仅在 ssh 退出后重启它。</li>
</ul>
</li>
<li><p><code>-f</code> 使 autossh 在后台运行。</p></li>
</ul>


<p>另外，autossh 还提供了一组环境变量来控制其行为, 这里仅介绍几个有代表性的，其可以 <code>man autossh</code></p>

<ul>
<li><code>AUTOSSH_FIRST_POLL</code> : 首次论询测试时间。</li>
<li><code>AUTOSSH_POLL</code> : 连接论询时间，默认 600 。若该值小于两次网络超时（默认 15 秒），则网络超将被调整为该值的 &frac12;</li>
<li><code>AUTOSSH_GATETIME</code> : 等待 ssh 连接成功建立的时间，默认 30 秒，超时表示首次运行失败，将退出 autossh 。若设为 0 ，则禁用该功能，通常用于启动时运行 autossh 。</li>
<li><code>AUTOSSH_MAXLIFETIME</code> : autossh 最长运行时间，达到该时间，autossh 将退出，并杀死 ssh 进程。</li>
<li><code>AUTOSSH_MAXSTART</code> : ssh 最大启动次数。默认-1，表示无限制。</li>
</ul>


<h2>Ubuntu 配置方法</h2>

<p>以 SSH 动态代理（即 SSH 翻墙）为例:</p>

<h3>Ubuntu 12.04/14.04</h3>

<p>init script 和 Upstart 都可以将 autossh 变成服务，然 Upstart 的 <code>respawn</code> 容错能力更强，它能在服务进程掉线，重新启动该服务。</p>

<p>创建 <code>/etc/init/autossh.conf</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># autossh</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;autossh daemon&quot;</span>
</span><span class='line'>
</span><span class='line'>start on <span class="o">(</span>net-device-up <span class="nv">IFACE</span><span class="o">=</span>eth0 or net-device-up <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>stop on <span class="o">(</span>net-device-down <span class="nv">IFACE</span><span class="o">=</span>eth0 and net-device-down <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>setuid like
</span><span class='line'>setgid like
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> /usr/bin/autossh -M64000 -q -N -D localhost:12348 sshproxy
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>setuid</code> 和 <code>setgid</code> 为了让 autossh 运行在指定的用户和用户组上。</li>
<li><code>start on</code> 表示当 <code>eth0</code> 或 <code>wlan0</code> 激活时，启动 autossh ， <code>stop on</code> 反之。其目的为避免系统启动或网络掉线时，频繁尝试启动 autossh 。</li>
<li><code>sshproxy</code> 为 ssh 别名，须在 <code>setuid</code> 和 <code>setgid</code> 指定用户的 <code>~/.ssh/config</code> 中配置。</li>
</ul>


<p>开始服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo start autossh
</span></code></pre></td></tr></table></div></figure>


<h3>Ubuntu 16.04/18.04/20.04</h3>

<p>systemd 也能自动重启掉线的服务进程。</p>

<p>创建 <code>/etc/systemd/system/autossh.service</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>SSH Proxy
</span><span class='line'><span class="nv">After</span><span class="o">=</span>network.target
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>simple
</span><span class='line'><span class="nv">CapabilityBoundingSet</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">AmbientCapabilities</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">User</span><span class="o">=</span>like
</span><span class='line'><span class="nv">Group</span><span class="o">=</span>like
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/autossh -M64000 -q -N -D localhost:12348 sshproxy
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>开启服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl <span class="nb">enable </span>autossh
</span><span class='line'>sudo systemctl start autossh
</span></code></pre></td></tr></table></div></figure>


<h2>更好的办法</h2>

<p>最近 OpenSSH 都支持选项 <code>ServerAliveInterval</code> 和 <code>ServerAliveCountMax</code> ，实际为建立在 SSH 协议上的心跳测试。当测试失败后， SSH 客户端进程将退出。通过 Upstart 的 respawn 功能重启 SSH 客户端进程，也能达到 autossh 目的。</p>

<p>仍以 SSH 动态代理为例：</p>

<h3>Ubuntu 12.04/14.04</h3>

<p>创建 <code>/etc/init/sshproxy.conf</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># sshproxy</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;ssh proxy&quot;</span>
</span><span class='line'>
</span><span class='line'>start on <span class="o">(</span>net-device-up <span class="nv">IFACE</span><span class="o">=</span>eth0 or net-device-up <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>stop on <span class="o">(</span>net-device-down <span class="nv">IFACE</span><span class="o">=</span>eth0 and net-device-down <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>setuid like
</span><span class='line'>setgid like
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> /usr/bin/ssh <span class="se">\</span>
</span><span class='line'>    -oServerAliveInterval<span class="o">=</span><span class="m">300</span> <span class="se">\</span>
</span><span class='line'>    -oServerAliveCountMax<span class="o">=</span><span class="m">2</span> <span class="se">\</span>
</span><span class='line'>    -q -N -D localhost:12348 sshproxy
</span></code></pre></td></tr></table></div></figure>


<p>开始服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo start sshproxy
</span></code></pre></td></tr></table></div></figure>


<h3>Ubuntu 16.04/18.04/20.04</h3>

<p>创建 <code>/etc/systemd/system/sshproxy.service</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>SSH Proxy
</span><span class='line'><span class="nv">After</span><span class="o">=</span>network.target
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>simple
</span><span class='line'><span class="nv">CapabilityBoundingSet</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">AmbientCapabilities</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">User</span><span class="o">=</span>like
</span><span class='line'><span class="nv">Group</span><span class="o">=</span>like
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/ssh -oServerAliveInterval<span class="o">=</span><span class="m">300</span> -oServerAliveCountMax<span class="o">=</span><span class="m">2</span> -q -N -D localhost:12348 sshproxy
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>开启服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl <span class="nb">enable </span>sshproxy
</span><span class='line'>sudo systemctl start sshproxy
</span></code></pre></td></tr></table></div></figure>


<p>若存在多个 SSH 动态代理，则可模板化服务。</p>

<p>创建 <code>/etc/systemd/system/sshproxy@.service</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>SSH Proxy
</span><span class='line'><span class="nv">After</span><span class="o">=</span>network.target
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>simple
</span><span class='line'><span class="nv">CapabilityBoundingSet</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">AmbientCapabilities</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span><span class='line'><span class="nv">User</span><span class="o">=</span>like
</span><span class='line'><span class="nv">Group</span><span class="o">=</span>like
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/ssh -qN sshproxy-%i
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>为每个动态代理在 <code>~/.ssh/config</code> 中创建别名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>host sshproxy-hello
</span><span class='line'>    HostName &lt;hello ip&gt;
</span><span class='line'>    Port &lt;port&gt;
</span><span class='line'>    User sshproxy
</span><span class='line'>    ServerAliveInterval 300
</span><span class='line'>    ServerAliveCountMax 2
</span><span class='line'>    DynamicForward localhost:&lt;socks port&gt;
</span><span class='line'>    IdentityFile ~/.ssh/sshproxy-hello/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>开启服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl <span class="nb">enable </span>sshproxy@hello
</span><span class='line'>sudo systemctl start sshproxy@hello
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH隧道简介]]></title>
    <link href="http://www.malike.net.cn/blog/2014/10/27/ssh-tunnel-tutorial/"/>
    <updated>2014-10-27T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2014/10/27/ssh-tunnel-tutorial</id>
    <content type="html"><![CDATA[<p>SSH的功能非常强大，日常除了用于命令行远程登录服务器。它还具有神奇的隧道（tunnel）功能（也被称为SSH代理），可用于加密访问本地或远程主机的服务。</p>

<p>通常，SSH代理具有3种方式：</p>

<h2>SSH（正向）代理</h2>

<p>通过参数-L [bind_address:]port:remote_host:remote_port，将指定本地（客户端）端口转发至远程端口上。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-proxy.png" alt="SSH Proxy" /></p>

<p>如上图， hosta无法直接访问hostb，但它能直接SSH登录gateway；如此通过gateway，将hosta的端口X转发至hostb的端口Y上。相当于端口X和端口Y之间建立了加密隧道。</p>

<p>一般来说，端口Y为hostb上某服务的监听端口。当建立隧道后，hosta将监听端口X。应用程序访问hosta的端口X，等同于访问hostb的端口Y。对于应用程序，hostb端口Y对应的服务就如同运行在hosta上。</p>

<p>日常工作中，客户的网络常由于信息安全而被网关（或防火墙）隔离。当我们的软件在客户网络中某服务器发生问题时，我们常需奔赴客户现场进行调试。若客户存在某机器安装了SSH服务器，且能被外部访问。就可以利用SSH正向代理的方法，快速简便的登录被隔离的服务器并进行应用调试。</p>

<h2>SSH反向代理</h2>

<p>通过参数-R [bind_address:]port:remote_host:remote_port，将指定远程端口转发至本地（客户端）端口上。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-reverse-proxy.png" alt="SSH Reverse Proxy" /></p>

<p>如上图，hosta在防火墙内，无法被hostb直接访问。但它能直接SSH登录hostb；如此通过hostb，将hostb的端口X转发至hosta的端口Y上。该方法与SSH正向代理类似，所不同的是该隧道的访问方向是从服务端（hostb）至客户端(hosta），故被称为反向代理。</p>

<p>其应用场景也与SSH正向代理类似，所不同的是若客户不存在可供外部访问的SSH服务器时，我们可以在外网建设一个SSH服务器给客户的被隔离服务器来建立隧道。如此，我们可以访问自己的SSH服务器对应端口来调试客户服务器的应用。</p>

<p>更进一步，客户内网甚至不能访问外网，此时可利用客户内网一台笔记本（或台式机，它可以访问目标服务器）USB接上3G/4G手机来达到访问外部SSH服务器的目的。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-reverse-proxy-mobile.png" alt="SSH Reverse Proxy Mobile" /></p>

<h2>SSH动态代理</h2>

<p>通过参数-D [bind_address:]port，利用远程服务器为访问出口，在本地建立SOCKS 4/5代理服务器。</p>

<p>可以形象描绘为将本地应用的端口（SOCKS客户端端口），动态转发至远程。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-dynamic-proxy.png" alt="SSH Dynamic Proxy" /></p>

<p>该功能广为人知的应用场景为翻墙。如上图，在国外租用VPS（hostb），客户端（hosta）通过SSH动态代理端口X（SOCKS 4/5的端口）便可以访问被GFW封锁的网络。</p>

<p>这种翻墙最大的优势在于</p>

<ul>
<li>低成本：国外廉价低配置VPS基本满足个人翻墙需求。</li>
<li>服务端0配置：服务端只需要安装SSH服务端。</li>
<li>客户端配置简单：客户端需要安装SSH客户端，以及一条命令。</li>
<li>加密隧道：保证网络访问的数据安全。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建通过SSH访问的chroot]]></title>
    <link href="http://www.malike.net.cn/blog/2014/08/07/create-chroot-for-ssh-access/"/>
    <updated>2014-08-07T18:09:48+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/08/07/create-chroot-for-ssh-access</id>
    <content type="html"><![CDATA[<p>我的工作环境是Ubuntu，然而经常需要CentOS来编译或测试。一般存在3种解决办法：</p>

<ul>
<li>创建VirtualBox或KVM虚拟机：

<ul>
<li>优点：部署容易，且可以运行各种应用（如Oracle）。</li>
<li>缺点：运行速度相对LXC和chroot慢，特别是I/O.</li>
</ul>
</li>
<li>创建CentOS的LXC：

<ul>
<li>优点：运行速度快，且具有独立IP，可以通过SSH访问。</li>
<li>缺点: 需要修改启动脚本。</li>
</ul>
</li>
<li>创建CentOS的chroot：

<ul>
<li>优点：不需要修改任何配置。</li>
<li>缺点：无法直接通过SSH访问，且需要root权限才能运行chroot。</li>
</ul>
</li>
</ul>


<h2>创建CentOS的chroot</h2>

<p>具体参看<a href="http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial/">Rinse简介</a></p>

<h2>创建SSH用户（或组）</h2>

<p>在当前OS环境中，创建用户centos6.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo useradd -m -s /bin/bash centos6
</span></code></pre></td></tr></table></div></figure>


<p>获取centos6的uid和gid</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>id -u centos6
</span><span class='line'>id -g centos6
</span></code></pre></td></tr></table></div></figure>


<p>在chroot环境中创建同名用户，且保持uid和gid相同。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chroot /var/lib/centos-6 /bin/bash
</span><span class='line'>groupadd -g &lt;gid&gt; centos6
</span><span class='line'>useradd -s /bin/bash -m -u &lt;uid&gt; -g centos6 centos6
</span></code></pre></td></tr></table></div></figure>


<h2>配置sshd</h2>

<p>将下述内容追加至/etc/ssh/sshd_config</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Match group centos6
</span><span class='line'>  ChrootDirectory /var/lib/centos-6
</span></code></pre></td></tr></table></div></figure>


<p>确保/var/lib/centos-6的每一级目录的属主为root，且其他用户或组没有写权限。</p>

<p>然后，重启ssh</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>service ssh restart
</span></code></pre></td></tr></table></div></figure>


<p>这样保证centos6组的用户登录ssh时，chroot至/var/lib/centos-6目录中。</p>

<h2>配置dev, proc和sysfs</h2>

<p>chroot环境中rpm安装和卸载的前/后置脚本依赖dev, proc和sysfs，否则可能将造成安装和卸载错误。</p>

<p>在/etc/fstab中，增加proc和sysfs的挂载选项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>proc /var/lib/centos-6/proc proc  defaults      <span class="m">0</span> 0
</span><span class='line'>none /var/lib/centos-6/sys  sysfs defaults      <span class="m">0</span> 0
</span><span class='line'>/dev /var/lib/centos-6/dev  none  defaults,bind <span class="m">0</span> 0
</span></code></pre></td></tr></table></div></figure>


<h2>配置ssh密钥登录</h2>

<p>chroot的ssh密钥登录与常规情况的唯一区别在于公钥应存放在当前OS环境（而非chroot环境）的~/.ssh/authorized_keys，因为sshd在执行chroot之前需要检查公钥是否正确。</p>

<p>因此，本例中应该存放在当前OS的/home/centos-6/.ssh/authorized_keys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rinse简介——Debian/Ubuntu中创建RPM安装环境]]></title>
    <link href="http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial/"/>
    <updated>2014-07-15T20:34:58+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://collab-maint.alioth.debian.org/rinse/">Rinse</a>是一个Debian环境中创建RPM发行版本（如CentOS，Scientific Linux和openSUSE）的工具。你可以利用它轻松创建各种RPM发行版本的chroot环境。</p>

<p>以下基于Ubuntu 12.04 amd64，主要以创建CentOS 6 x86_64为例。</p>

<h2>安装Rinse</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install -y rinse
</span></code></pre></td></tr></table></div></figure>


<h2>创建CentOS 6</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rinse --distribution centos-6 --arch amd64 --directory centos-6
</span></code></pre></td></tr></table></div></figure>


<p>运行该命令将创建CentOS 6 amd64于当前工作目录的centos-6目录中。其中，</p>

<ul>
<li>&ndash;distribution指定发行版本，类似还可以centos-{4,5}， fedora-core-{4,5,6,7,8,9}和opensuse-{10.1,10.2,10.3,11.0,11.1,12.1}等。可以下述命令获取：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rinse --list-distributions
</span></code></pre></td></tr></table></div></figure>


<p>具体对应于/etc/rinse/*.packages的模板名，它们主要包含RPM包列表。换一句话说，你根据需要定制自己的模板。另一方面，你也可以通过&ndash;pkgs-dir指定不同于/etc/rinse的模板目录。</p>

<ul>
<li>&ndash;arch指定架构，amd64表示64位架构，i386表示32位架构。缺省为i386.</li>
<li>&ndash;directory指定为安装目录，安装结束后便可以chroot该目录了。</li>
</ul>


<p>另外，需要额外安装某些包，可以通过指定&ndash;add-pkg-list来完成。</p>

<h2>配置RPM缓存</h2>

<p>rinse默认使用/var/rinse/cache作为缓存目录，它大大缩短了重复运行同样命令的时间。具体通过：</p>

<ul>
<li>&ndash;cache 0指禁用缓存，缺省为1</li>
<li>&ndash;cache-dir指定不同于/var/rinse/cache作为缓存目录。</li>
<li>&ndash;clean-cache指清楚缓存</li>
</ul>


<h2>定制安装后执行脚本</h2>

<p>&ndash;after-post-install, &ndash;before-post-install和&ndash;post-install顾名思义，需要指出的是&ndash;post-install默认执行/usr/lib/rinse/<distribution>/post-install.sh.</p>

<h2>如何提高安装速度？</h2>

<p>通过修改/etc/rinse/rinse.conf中对应发行版的镜像地址可以加速安装，如CentOS 6 x86_64的镜像地址可以修改为</p>

<pre><code>http://centos.ustc.edu.cn/centos/6/os/x86_64/CentOS/
</code></pre>

<p>也可以通过&ndash;config指定不同于/etc/rinse/rinse.conf的配置文件。</p>

<p>若内网存在HTTP cache服务器（如Squid)，还可以设置环境变量http_proxy来缓存rpm以及加速安装，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo <span class="nv">http_proxy</span><span class="o">=</span>http://&lt;http proxy address&gt; rinse --distribution centos-6 --arch amd64 --directory centos-6
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用SSH限制rsync的访问目录]]></title>
    <link href="http://www.malike.net.cn/blog/2014/04/01/restrict-ssh-access-to-rsync/"/>
    <updated>2014-04-01T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2014/04/01/restrict-ssh-access-to-rsync</id>
    <content type="html"><![CDATA[<p>我经常使用VPS来共享数据给朋友同事。由于VPS通常内存较小，不太适合安装ftp服务器；而http服务器常常只有下载的功能；更重要是某些数据较大，每天可能都在改变，需要增量同步上传或下载。</p>

<p>rsync是这类场景的良好选择。一方面，通过SSH服务器来工作，它不常驻内存，节约了VPS内存使用；另一方面，它优秀的二进制增量同步功能，不仅减少了同步时间，也节约了VPS有限的带宽。</p>

<p>在实际使用过程中，我遇到了下述问题：</p>

<ul>
<li>针对某些目录，某些用户仅能读（下载）;</li>
<li>针对某些目录，某些用户仅能写（上传）;</li>
<li>具有读或写权限的用户不能登录SSH，也不能执行任何程序;</li>
<li>具有读或写权限的用户不能访问其他目录。</li>
</ul>


<p>诚然，这些问题可以通过操作系统用户相对复杂的权限控制（包括目录基本权限和ACL以及SELinux等）。然而，通过搜索和学习，我发现强大的SSH早已具备这样的接口：</p>

<ul>
<li>通过密钥对，简化用户使用，让用户彻底摆脱密码的记忆（当然用户加密私钥，还是要自己记密码的）；</li>
<li>通过~/.ssh/authorized_keys的<code>command</code>选项（通过<a href="http://man.he.net/man5/authorized_keys">man authorized_keys</a>阅读详细内容），设置脚本过滤掉业务上无效的指令；</li>
<li>还是通过command选项，限制不同密钥有不同权限，如密钥A只能读，密钥B只能写。</li>
</ul>


<p>下面，我将通过具体示例来解释command选项:</p>

<h2>限制用户仅能读</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DATA_DIR</span><span class="o">=</span>/home/share/data
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> in
</span><span class='line'>rsync<span class="se">\ </span>--server*<span class="o">)</span>
</span><span class='line'>        <span class="nv">TARGET</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $NF }&#39;</span><span class="sb">`</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> <span class="p">|</span> grep -q <span class="s2">&quot; --sender &quot;</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;$TARGET&quot;</span> <span class="o">=</span> <span class="nv">$DATA_DIR</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                <span class="nv">$SSH_ORIGINAL_COMMAND</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>                <span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>        <span class="p">;;</span>
</span><span class='line'>*<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>该脚本（存储在文件/usr/local/bin/validate_pull_share）限制用户share仅能下载<code>$DATA_DIR</code>的文件, 它需要跟公钥配置在服务器的/home/share/.ssh/authorized_keys，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;/usr/local/bin/validate_pull_share&quot;</span> ssh-rsa &lt;用户公钥A&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>command</code>选项用于指定脚本，该脚本可以过滤一些远程命令（禁止执行），它相当于远程命令的前置脚本。</li>
<li><code>$SSH_ORIGINAL_COMMAND</code>是sshd传递给<code>command</code>脚本环境变量，表示ssh客户端需要远程执行的命令。</li>
<li>第6行限制仅能执行rsync服务端指令。</li>
<li>第7行获取<code>$SSH_ORIGINAL_COMMAND</code>的最后一个参数（这里没有考虑有空格的目录），这个参数在这里是rsync需要访问的目录$TARGET.</li>
<li>第8行为命令合法性判断, 由两个条件组成：

<ul>
<li>判断<code>--sender</code>参数是否存在于<code>$SSH_ORIGINAL_COMMAND</code>中，<code>--sender</code>表示该命令为下载命令；</li>
<li>判断下载目录$TARGET是否与规定的目录一致。</li>
</ul>
</li>
</ul>


<h2>限制用户仅能写</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DATA_DIR</span><span class="o">=</span>/home/share/data
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> in
</span><span class='line'>rsync<span class="se">\ </span>--server*<span class="o">)</span>
</span><span class='line'>        <span class="nv">TARGET</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $NF }&#39;</span><span class="sb">`</span>
</span><span class='line'>        <span class="k">if</span> ! <span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> <span class="p">|</span> grep -q <span class="s2">&quot; --sender &quot;</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;$TARGET&quot;</span> <span class="o">=</span> <span class="nv">$DATA_DIR</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                <span class="nv">$SSH_ORIGINAL_COMMAND</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>                <span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>        <span class="p">;;</span>
</span><span class='line'>*<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际仅与读限制脚本相差一行（第8行），仅允许没有<code>--sender</code>参数的命令（即上传命令）。</p>

<p>该脚本（存储在文件/usr/local/bin/validate_push_share）同样需要跟另一个公钥配置在服务器的/home/share/.ssh/authorized_keys，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;/usr/local/bin/validate_push_share&quot;</span> ssh-rsa &lt;用户公钥B&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>通过上述脚本和配置实现了不同密钥访问同一目录的不同权限控制。还可以在这些脚本基础上扩展到多个目录或文件的访问控制。以及访问时间的控制，如某时段只能读，另外时段只能写；避免正在写数据的时候，有用户读数据造成数据不一致的问题。</p>
]]></content>
  </entry>
  
</feed>
