<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Like的世界]]></title>
  <link href="http://likema.github.io/atom.xml" rel="self"/>
  <link href="http://likema.github.io/"/>
  <updated>2013-10-22T09:24:49+08:00</updated>
  <id>http://likema.github.io/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PEP 8总结]]></title>
    <link href="http://likema.github.io/blog/2013/07/25/pep8-summary/"/>
    <updated>2013-07-25T00:00:00+08:00</updated>
    <id>http://likema.github.io/blog/2013/07/25/pep8-summary</id>
    <content type="html"><![CDATA[<p>下述内容主要源于<a href="http://www.python.org/dev/peps/pep-0008/">PEP 8 &mdash; Style Guide for Python Code</a>。</p>

<h2>最大的行长度</h2>

<ul>
<li>所有行不超过79个字符。</li>
<li>docstring或comment应不超过72字符</li>
</ul>


<h2>补齐</h2>

<ul>
<li>每个补齐级别为4个空格。</li>
<li>当一行操作最大行长度时，应尽可能按照各种括号作为纵向对齐的参照物（可以适当增加括号），如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="p">(</span><span class="n">get</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">delete</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">default_app</span><span class="p">,</span> <span class="n">HTTPError</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">static_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Aligned with opening delimiter</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">long_function_name</span><span class="p">(</span><span class="n">var_one</span><span class="p">,</span> <span class="n">var_two</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">var_three</span><span class="p">,</span> <span class="n">var_four</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># More indentation included to distinguish this from the rest.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">long_function_name</span><span class="p">(</span>
</span><span class='line'>        <span class="n">var_one</span><span class="p">,</span> <span class="n">var_two</span><span class="p">,</span> <span class="n">var_three</span><span class="p">,</span>
</span><span class='line'>        <span class="n">var_four</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">var_one</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>多行情况下，关闭括号可以出现在一行开始，如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;hello&#39;</span><span class="p">:</span> <span class="s">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;world&#39;</span><span class="p">:</span> <span class="s">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">some_function_that_takes_arguments</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;e&#39;</span><span class="p">,</span> <span class="s">&#39;f&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际工作中，不同开发语言存在不同的补齐风格要求。强烈建议不要将补齐设置在.vimrc中，而将</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># vim: ts=4 sw=4 sts=4 et:</span>
</span></code></pre></td></tr></table></div></figure>


<p>追加在每个python源文件的最后一行，从而保证vim打开该文件时满足4个空格补齐的要求。</p>

<h2>空行</h2>

<p>顶层函数或类定义的间隔为2行。
类的方法定义的间隔为1行。</p>

<h2>源文件编码</h2>

<p>Python核心代码应为UTF-8（或ASCII，在Python 2中）。
源文件若在Python 2中用ASCII或在Python 3中用UTF-8，则不应出现编码声明。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>导入</h2>

<ul>
<li>每行仅导入一个模块，但每行可以导入一个模块的多个函数:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">Popen</span><span class="p">,</span> <span class="n">PIPE</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>保证所有import在文件的头部，仅在模块注释后面，并先于模块的全局变量和常量。</li>
<li>import应按下列顺序分组：
<strong> 标准库的导入
</strong> 相关第3方库的导入
** 本地应用程序/库的导入
每个分组间空1行
将类似<strong>all</strong>定义放在所有import后面</li>
<li>绝对导入优于相对导入</li>
<li>避免导入模块所有的内容（通配方式， from <module> import *)，在<strong>init</strong>.py中导出内部API除外。</li>
</ul>


<h2>表达式和语句中的空格</h2>

<ul>
<li>括号前后不允许有空格</li>
<li>操作符号（如=，>和+=等）前后各1个空格</li>
<li>:和,之前不允许有空格，之后仅1个空格</li>
<li>函数默认参数的等号（=）前后不允许空格</li>
</ul>


<h2>注释</h2>

<ul>
<li>为所有公开模块、函数、类和方法写docstring。</li>
<li>非公开方法的comment应出现在def行之后</li>
<li><a href="http://www.python.org/dev/peps/pep-0257/">PEP-257</a>描述良好的docstring惯例。多行docstring的第1行后应跟着1个空白行。</li>
<li>单行docstring可保持关闭的&#8221;&ldquo;&#8221;在同一行。</li>
</ul>


<h2>命名规范</h2>

<p>尽管Python库代码的命名存在一些混乱，新模块和包（包括第3方框架）应满足下列规范。但已有库若风格不同，应保持原来的内部一致性。</p>

<ul>
<li>单下划线开头（如：_single_leading_underscore）弱内部使用，类似from M import *不导入类似符号。</li>
<li>单下划线结尾（如：single_trailing_underscore<em>）用于与Python关键字冲突的情况下，如classs</em>。</li>
<li>双下划线开头（如：__double_leading_underscore）用于类属性。</li>
<li>双下划线开头和结构用于特殊对象或属性，如<strong>init</strong>, <strong>import</strong>或<strong>file</strong>。多为语言定义，避免发明类似名字。</li>
<li>避免使用小写L、大写O和大写I作为单字符变量名。</li>
<li>模块名应简短、全小写，可包含下划线；包名类似，但不鼓励包含下划线。</li>
<li>C/C++实现的扩展模块应伴随着提供如面向对象等高级接口的Python模块存在，且其名字以下划线开头（如_socket）</li>
<li>类名应为驼峰词（CapWords），内部使用的类以下划线开头。</li>
<li>异常名与类名一样，且应以Error结尾（若该异常确为一个错误）。</li>
<li>函数名应为小写加下划线。</li>
<li>总是使用self作为实例方法的第1个参数，总是使用cls作为类方法的第1个参数</li>
<li>常量名应为大写加下划线（如MAX_OVERFLOW）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-buildpackage示例（二）]]></title>
    <link href="http://likema.github.io/blog/2012/10/23/git-buildpackage-2/"/>
    <updated>2012-10-23T00:00:00+08:00</updated>
    <id>http://likema.github.io/blog/2012/10/23/git-buildpackage-2</id>
    <content type="html"><![CDATA[<p>在<a href="http://likema.github.io/blog/2012/02/19/git-buildpackage-1/">《git-buildpackage示例（一）》</a>中，我介绍了如何利用git-buildpackage为Ubuntu已有包做一个补丁包的办法。</p>

<p>当时，我的补丁是基于tolua 5.1.3版本。一段时间后，tolua的作者释放了5.1.4版本。问题出现了，如何将我的补丁合并到5.1.4版本中呢？</p>

<p>下面我将继续使用git-buildpackage来解决合并上游新版本的问题：</p>

<ol>
<li>下载tolua 5.1.4源码包（假设放在git工作目录上层）：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.tecgraf.puc-rio.br/~celes/tolua/tolua-5.1.4.tar.gz
</span><span class='line'>cd tolua
</span><span class='line'>git-import-orig -u 5.1.4 ../tolua-5.1.4.tar.gz</span></code></pre></td></tr></table></div></figure>


<ol>
<li>手动解决遇到的冲突（如src/bin/Makefile）并提交更新：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit</span></code></pre></td></tr></table></div></figure>


<ol>
<li>这时，运行</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --format=%d:%s</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> (HEAD, master):Merge commit 'upstream/5.1.4'
</span><span class='line'> (upstream/5.1.4, upstream):Imported Upstream version 5.1.4
</span><span class='line'> (debian/5.1.3-2):Fix relocation R_X86_64_32 against '.rodata' can not be used when making a shared object
</span><span class='line'> (debian/5.1.3-1):Imported Debian patch 5.1.3-1
</span><span class='line'> (upstream/5.1.3):Imported Upstream version 5.1.3</span></code></pre></td></tr></table></div></figure>


<p>upstream/5.1.4分支被创建，且将其合并到master分支中。如此，master分支合并完毕，接下来将合并debian的patches。</p>

<ol>
<li>重整patch-queue：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gbp-pq rebase</span></code></pre></td></tr></table></div></figure>


<p>手动解决遇到的冲突：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rm -f src/bin/toluabind.c
</span><span class='line'>git rebase --continue</span></code></pre></td></tr></table></div></figure>


<ol>
<li>导出patch-queue（至master分支）</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -df
</span><span class='line'>gbp-pq export</span></code></pre></td></tr></table></div></figure>


<ol>
<li>指定版本号5.1.4-1自动生成snapshot的debian/changelog：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-dch -a -S -N 5.1.4-1
</span><span class='line'>git add debian/changelog
</span><span class='line'>git add debian/patches/0001-mkdir-for-tolua-lib-archive-and-remove-temp-files.patch
</span><span class='line'>git commit -m "Update patches from debian/5.1.3-1"</span></code></pre></td></tr></table></div></figure>


<p>测试构建新的deb包。为了避免污染当前环境，这里指定git首先导出源码至../tolua-build目录：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-buildpackage --git-export-dir=../tolua-build --git-ignore-new</span></code></pre></td></tr></table></div></figure>


<ol>
<li>生成release的版本信息，并构建release的deb包：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-dch -a -R
</span><span class='line'>git ci --amend
</span><span class='line'>git tag debian/5.1.4-1
</span><span class='line'>git-buildpackage --git-export-dir=../tolua-build --git-ignore-new</span></code></pre></td></tr></table></div></figure>


<p>到此为止，我已经演示了git-buildpackage合并上游版本的过程。不难发现，git-buildpackage充分利用了git的特点，在很大程度上简化了补丁开发和维护的过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-buildpackage示例（一）]]></title>
    <link href="http://likema.github.io/blog/2012/02/19/git-buildpackage-1/"/>
    <updated>2012-02-19T00:00:00+08:00</updated>
    <id>http://likema.github.io/blog/2012/02/19/git-buildpackage-1</id>
    <content type="html"><![CDATA[<p>在《为tolua的deb包作一个补丁》中，我介绍了如何利用quilt为Ubuntu已有包做一个补丁包的办法。可以看出quilt具有一定的版本管理能力，然而与流行版本管理系统相比，功能较弱也不灵活。</p>

<p>从<a href="http://www.debian.org/doc/manuals/maint-guide/">Debian New Maintainers&#8217; Guide</a>中，了解到deb包的制作和维护管理已经与现有流行版本管理系统结合在了一块，其中一款工具为git-buildpackage，它将包制作和维护，特别是第三方补丁包维护，与git紧密的结合了起来。</p>

<p>下面仍然以tolua的补丁制作为例，一步一步展示git-buildpackage的基本操作。</p>

<ol>
<li>安装必要的工具：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git-buildpackage build-essential debhelper quilt</span></code></pre></td></tr></table></div></figure>


<ol>
<li>下载libtolua-dev的源码（建立upstream目录单独存放Ubuntu的deb源码包是为了保证清洁和正确）：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir upstream
</span><span class='line'>apt-get source libtolua-dev</span></code></pre></td></tr></table></div></figure>


<ol>
<li>导入upsteam的dsc文件（将生成与目录upstream同级的目录tolua）：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ..
</span><span class='line'>git-import-dsc upstream/tolua_5.1.3-1.dsc
</span><span class='line'>cd tolua</span></code></pre></td></tr></table></div></figure>


<p>这时，运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --format=%d:%s</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> (HEAD, debian/5.1.3-1, master):Imported Debian patch 5.1.3-1
</span><span class='line'> (upstream/5.1.3, upstream):Imported Upstream version 5.1.3</span></code></pre></td></tr></table></div></figure>


<pre><code>从下至上，首条提交导入了tolua 5.1.3的源码，次条提交导入了deb包维护者的deb包文件(debian/*)；并且建立了upstream和master两个分支，标签upstream/5.1.3位于upstream分支上，标签debian/5.1.3-1位于master分支头部。

此外，upstream分支用于维护源码作者的发布版本更新情况，master分支用于维护deb包描述文件及其补丁文件。git-buildpackage工具集的正确运行将依赖于标签upstream/5.1.3和debian/5.1.3-1，不能随意删改。
</code></pre>

<ol>
<li>导入quilt patches到patch queue中——创建patch-queue/master分支，并将debian/patches/*逐一变成该分支的提交，并自动切换到该分支上：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gbp-pq import</span></code></pre></td></tr></table></div></figure>


<ol>
<li>执行make后发现构建目标libtolua.a的生成目录lib不存在，这是git只针对文件做版本，所以upstream导入git时，该目录被忽略了。为此，我将src/lib/Makefile中</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nf">$T</span><span class="o">:</span> <span class="m">$(OBJS)</span>
</span><span class='line'>  <span class="k">$(</span>AR<span class="k">)</span> <span class="nv">$@</span> <span class="k">$(</span>OBJS<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>RANLIB<span class="k">)</span> <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nf">$T</span><span class="o">:</span> <span class="m">$(OBJS)</span>
</span><span class='line'>  mkdir -p <span class="k">$(</span>@D<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>AR<span class="k">)</span> <span class="nv">$@</span> <span class="k">$(</span>OBJS<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>RANLIB<span class="k">)</span> <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>这样，它将在每次构建该目标时，创建该目标所在目录。更进一步不难发现，src/bin/tolua_lua.o和src/bin/toluabind.c为受版本控制的中间文件，将影响构建的正确运行。为此，删除这两个文件并提交日志。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">git</span> <span class="err">rm</span> <span class="err">-f</span> <span class="err">src/bin/tolua_lua.o</span> <span class="err">src/bin/toluabind.c</span>
</span><span class='line'><span class="err">git</span> <span class="err">commit</span> <span class="err">-a</span> <span class="err">-m</span> <span class="s2">&quot;mkdir for tolua lib archive and remove temp files&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>此时，可以正确make该工程了。
</code></pre>

<ol>
<li>修复x86_64链接问题，将config文件中，如下内容</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span><span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span> -fPIC -O2 -pipe -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span><span class="o">=</span> -fPIC -O2 -pipe  -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>并提交日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">git</span> <span class="err">commit</span> <span class="err">-a</span> <span class="err">-m</span> <span class="s2">&quot;Fix relocation R_X86_64_32 against &#39;.rodata&#39; erro for shared object.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>导出patch-queue——将其分支提交逐一转化为debian/patches目录下的补丁文件（为保证正确运行，清理掉中间文件）：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">git</span> <span class="err">clean</span> <span class="err">-df</span>
</span><span class='line'><span class="err">gbp-pq</span> <span class="k">export</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>指定版本号5.1.3-2自动生成snapshot的debian/changelog：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">git-dch</span> <span class="err">-S</span> <span class="err">-a</span> <span class="err">-N</span> <span class="err">5.1.3-2</span>
</span></code></pre></td></tr></table></div></figure>


<p>debian/change的新增内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">tolua</span> <span class="err">(5.1.3-2~1.gbp896bed)</span> <span class="err">UNRELEASED;</span> <span class="nv">urgency</span><span class="o">=</span>low
</span><span class='line'>
</span><span class='line'>  ** SNAPSHOT build @896bede5a4eb6f3967cdfe94ea2ef419235e7183 **
</span><span class='line'>
</span><span class='line'>  * UNRELEASED
</span><span class='line'>
</span><span class='line'> -- Like Ma   Sun, 19 Feb 2012 01:07:06 +0800
</span></code></pre></td></tr></table></div></figure>


<p>提交相关修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">git</span> <span class="err">add</span> <span class="err">debian/changelog</span> <span class="err">\</span>
</span><span class='line'>      <span class="err">debian/patches/series</span> <span class="err">\</span>
</span><span class='line'>      <span class="err">debian/patches/0001-mkdir-for-tolua-lib-archive-and-remove-temp-files.patch</span> <span class="err">\</span>
</span><span class='line'>      <span class="err">debian/patches/0002-Fix-relocation-R_X86_64_32-against-.rodata-can-not-b.patch</span>
</span><span class='line'><span class="err">git</span> <span class="err">commit</span> <span class="err">-m</span> <span class="s2">&quot;Fix relocation R_X86_64_32 against &#39;.rodata&#39; error for shared object&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试构建新的deb包。为了避免污染当前环境，这里指定git首先导出源码至../tolua-build目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">git-buildpackage</span> <span class="nv">--git-export-dir</span><span class="o">=</span>../tolua-build --git-ignore-new
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，上述debian/changelog新增信息，除版本号5.1.3-2外（新包的版本信息），并无实在意义，仅用于测试deb包的构建。</p>

<ol>
<li>生成release的版本信息，并构建release的deb包：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">git</span> <span class="err">checkout</span> <span class="err">src/bin/tolua_lua.o</span> <span class="err">src/bin/toluabind.c</span>
</span><span class='line'><span class="err">git-dch</span> <span class="err">-R</span> <span class="err">-a</span>
</span><span class='line'><span class="err">git</span> <span class="err">commit</span> <span class="err">-a</span> <span class="err">--amend</span>
</span><span class='line'><span class="err">git-buildpackage</span> <span class="nv">--git-export-dir</span><span class="o">=</span>../tolua-build --git-ignore-new
</span><span class='line'><span class="err">git</span> <span class="err">tag</span> <span class="err">debian/5.1.3-2</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意，前面仅仅在patch-queue分支上删除的两个中间文件，并未在master分支上删除它们，所以重新checkout它们以保证后续构建的正确运行。

这里的关键命令git-dch -R -a自动生成了release的版本信息，当然我们也可以根据需要再修改它们。最后一条命令，给master分支的HEAD加上标签debian/5.1.3-2，git-buildpackage将依赖于它才能继续正确工作。
</code></pre>

<p>到此为止，我已经演示了git-buildpackage的补丁制作过程，可以观察../tolua-build目录中生成的文件，它们就是我们可以用于发布的deb包源码文件，形式上与ubuntu/debian中apt-get source得到的一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 11.10 VirtualBox的Host-only网卡上外网和DHCP永久地址]]></title>
    <link href="http://likema.github.io/blog/2011/12/20/vbox-hostonly-dhcp/"/>
    <updated>2011-12-20T00:00:00+08:00</updated>
    <id>http://likema.github.io/blog/2011/12/20/vbox-hostonly-dhcp</id>
    <content type="html"><![CDATA[<p>VirtualBox支持各种虚拟网络：NAT, Bridge Adapter, Internal Network和Host-only Adapter等。其中Bridged Adapter最为简单和常用，它几乎是0配置，直接桥接有线或无线物理网卡就可以与互联网通信。</p>

<p>然而，我工作场所内部网和家里内部网的网段不相同，DHCP存在一定租赁时间，如果使用Bridged Adapter并DHCP获取IP地址的时候，虚拟机地址经常会改变。为此，我将笔记本电脑的VirtualBox虚拟机都修改为Host-only Adapter模式。</p>

<p>一个问题是Host-only Adapter（网段为192.168.56.0/24）默认不能与互联网通信。google之后发现网上早有人遇到类似问题，他们给出的解决办法是在/etc/rc.local中加入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -I POSTROUTING -s 192.168.56.0/24 -j MASQUERADE</span></code></pre></td></tr></table></div></figure>


<p>另一个问题是VirtualBox内置DHCP的IP租赁时间设置，也无法将MAC地址与IP地址静态绑定，这造成虚拟机IP地址每隔一段时间改变一次，给使用带来诸多不方便。另一方面，我也不想静态设置IP地址，因为如果这样做，我必须每安装一次虚拟机都要重新设置IP地址。</p>

<p>以前就听说过dnsmasq，不仅集成DNS、DHCP和TFTP功能，而且占用资源很少，设置也相对简单。</p>

<ol>
<li>安装dnsmasq</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install dnsmasq</span></code></pre></td></tr></table></div></figure>


<ol>
<li>打开/etc/dnsmasq.conf，针对vboxnet0配置DHCP。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface=vboxnet0
</span><span class='line'>
</span><span class='line'># 192.168.56.1是默认网关（host机器的vboxnet0地址）
</span><span class='line'># 208.67.222.222和208.67.220.220是DNS地址(这里使用了OpenDNS)
</span><span class='line'>dhcp-option=vboxnet0,option:dns-server,192.168.56.1,208.67.222.222,208.67.220.220
</span><span class='line'>
</span><span class='line'># 192.168.56.2和192.168.56.254为分配地址范围
</span><span class='line'># infinite表示IP永远不过期
</span><span class='line'>dhcp-range=vboxnet0,192.168.56.2,192.168.56.254,infinite</span></code></pre></td></tr></table></div></figure>


<ol>
<li>重启动dnsmasq</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service dnsmasq restart</span></code></pre></td></tr></table></div></figure>


<p>当然，dnsmasq也支持MAC地址与IP地址静态绑定。比如，在/etc/dnsmasq.conf中针对MAC地址08:00:27:81:51:85，分配机器名vbox-xp，分配IP地址192.168.56.2</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dhcp-host=vbox-xp,08:00:27:81:51:85,192.168.56.2</span></code></pre></td></tr></table></div></figure>


<p>最后，不要忘了重启动dnsmasq。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为tolua的deb包作一个补丁]]></title>
    <link href="http://likema.github.io/blog/2011/10/31/tolua-deb-patch/"/>
    <updated>2011-10-31T00:00:00+08:00</updated>
    <id>http://likema.github.io/blog/2011/10/31/tolua-deb-patch</id>
    <content type="html"><![CDATA[<p>近日在学习tolua时发现在Kubuntu 11.10 amd64平台下将其链接到so时报告如下错误：</p>

<blockquote><p>relocation R_X86_64_32 against &lsquo;.rodata&rsquo; can not be used when making a shared object; recompile with -fPIC</p></blockquote>

<p>为此，我决定在其原deb基础上加一个补丁，这样生成的新包可以安装到其他开发机器上，省去了每次重编译tolua的重复劳动。</p>

<p>为构建和修改deb安装必要的工具（配置quilt）：</p>

<pre><code>sudo apt-get install build-essential debhelper quilt
</code></pre>

<p>下载libtolua-dev的源码，创建补丁add-fpic-O2-for-amd64.patch，并将config文件加入其中：</p>

<pre><code>apt-get source libtolua-dev
cd tolua-5.1.3
mkdir -p debian/patches
quilt new add-fpic-O2-for-amd64.patch
quilt add config
</code></pre>

<p>将config文件中，如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span> <span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span> <span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span> <span class="o">=</span> -fPIC -O2 -pipe -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span> <span class="o">=</span> -fPIC -O2 -pipe  -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CFLAGS</span> <span class="o">=</span> -fPIC -O2 -pipe -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成补丁add-fpic-O2-for-amd64.patch</p>

<pre><code>quilt refresh
</code></pre>

<p>为补丁增加描述信息</p>

<pre><code>quilt header -e
</code></pre>

<p>其具体内容如下：</p>

<pre><code>Description: Fix relocation R_X86_64_32 against '.rodata' error for shared object.
Author: Like Ma &lt;likemartinma@gmail.com&gt;

  * config: add -fPIC -O2 -pipe to CFLAGS and CPPFLAGS
</code></pre>

<p>在debian/changelog顶部增加日志信息：</p>

<pre><code>tolua (5.1.3-2) unstable; urgency=low

  * Fix relocation R_X86_64_32 against '.rodata' error for shared object.

-- Like Ma &lt;likemartinma@gmail.com&gt; Mon, 31 Oct 2011 15:23:09 +0800
</code></pre>

<p>构建libtolua-dev_5.1.3-2_amd64.deb:</p>

<pre><code>dpkg-buildpackage -d -uc -us -rfakeroot
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MakeProjectCreator (MPC) 简介]]></title>
    <link href="http://likema.github.io/blog/2008/10/05/mpc-tutorial/"/>
    <updated>2008-10-05T00:00:00+08:00</updated>
    <id>http://likema.github.io/blog/2008/10/05/mpc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.ociweb.com/products/mpc">Makefile, Project, and Workspace Creator (MPC)</a> 原始OCI为网络通信库ACE开发的跨平台工程文件生成工具，它可以生成很多种工程文件，例如Windows平台的Borland Developer Studio, Borland C++ Build 2007, Borland Makefile，Microsoft eMbedded VC3, Microsoft Visual C++ 6/7/71/8/9/10, nmake；Linux平台的automake, make等。</p>

<p>下面将以Windows平台的nmake和vc9为例介绍MPC的使用方法。首先，我们需要下载</p>

<ol>
<li><a href="http://www.activestate.com/activeperl">ActivePerl</a>，双击执行安装;</li>
<li><a href="http://download.ociweb.com/MPC/">MPC</a>，以解压到C:盘为例，设置系统环境变量MPC_ROOT为C:\MPC，以及将%MPC_ROOT%追加系统环境变量PATH。当然，你也可以通过双击执行C:\MPC\registry.pl将生成工程文件的功能注册到右键菜单中。</li>
</ol>


<h2>一、一个Hello World工程</h2>

<p>首先，建立目录helloworld，并且在这个目录下且创建helloworld.cpp，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，创建MPC工程文件helloworld.mpc，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">project</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">exename</span> <span class="o">=</span> <span class="n">helloworld</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，打开Visual Studio 2008 Command Prompt（也可以用VS2003或2005的），进入helloworld的目录, 然后输入</p>

<pre><code>mwc.pl -type nmake
</code></pre>

<p>就生成了格式为nmake的Makefile，它默认包含两个配置Debug和Release。让我们编译一下Debug版本：</p>

<pre><code>nmake CFG="Win32 Debug"
</code></pre>

<p>你会发现helloworld.exe就生成在当前目录。</p>

<p>或许你希望debug和release生成的exe分别放在debug和release目录，修改一下MPC文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">project</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">exename</span> <span class="o">=</span> <span class="n">helloworld</span>
</span><span class='line'>  <span class="n">specific</span> <span class="p">(</span><span class="n">nmake</span><span class="p">,</span> <span class="n">vc6</span><span class="p">,</span> <span class="n">vc7</span><span class="p">,</span> <span class="n">vc71</span><span class="p">,</span> <span class="n">vc8</span><span class="p">,</span> <span class="n">vc9</span><span class="p">,</span> <span class="n">vc10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Debug</span><span class="o">::</span><span class="n">install</span> <span class="o">=</span> <span class="n">debug</span>
</span><span class='line'>      <span class="n">Release</span><span class="o">::</span><span class="n">install</span> <span class="o">=</span> <span class="n">release</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或许你更喜欢用IDE，让我们生成VS2008的工程文件吧：</p>

<pre><code>mwc.pl -type vc9
</code></pre>

<h2>二、一个简单dll工程</h2>

<p>首先，建立目录hellodll，并且在这个目录下且创建hellodll.h，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef HELLO_DLL_H</span>
</span><span class='line'><span class="cp">#define HELLO_DLL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HELLO_BUILD_DLL</span>
</span><span class='line'><span class="cp">#   define HELLO_Export __declspec(dllexport)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#   define HELLO_Export __declspec(dllimport)</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* HELLO_BUILD_DLL */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* __cplusplus */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLO_Export</span> <span class="kt">void</span> <span class="n">print_hello</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* extern &quot;C&quot; */</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* __cplusplus */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* HELLO_DLL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，创建文件hellodll.cpp，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;hellodll.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print_hello</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，创建文件hellodll.mpc，内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">project</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sharedname</span> <span class="o">=</span> <span class="n">hello</span>
</span><span class='line'>  <span class="n">dynamicflags</span> <span class="o">+=</span> <span class="n">HELLO_BUILD_DLL</span>
</span><span class='line'>  <span class="n">specific</span><span class="p">(</span><span class="n">nmake</span><span class="p">,</span> <span class="n">vc6</span><span class="p">,</span> <span class="n">vc7</span><span class="p">,</span> <span class="n">vc71</span><span class="p">,</span> <span class="n">vc8</span><span class="p">,</span> <span class="n">vc9</span><span class="p">,</span> <span class="n">vc10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Debug</span><span class="o">::</span><span class="n">dllout</span> <span class="o">=</span> <span class="n">debug</span>
</span><span class='line'>      <span class="n">Release</span><span class="o">::</span><span class="n">dllout</span> <span class="o">=</span> <span class="n">release</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，执行如下命令，可以生成Debug和Release的dll。注意Debug的dll是hellod.dll。</p>

<pre><code>mwc.pl -type nmake
nmake
nmake CFG="Win32 Release"
</code></pre>

<p>接下来，我们做一个工程来驱动这个dll</p>

<h2>三、hello dll的测试工程</h2>

<p>首先，在原来的目录hellodll下建立文件hellowtest.cpp，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;hellodll.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print_hello</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，创建文件hellotest.mpc，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">project</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">after</span> <span class="o">+=</span> <span class="n">hellodll</span>
</span><span class='line'>  <span class="n">exename</span> <span class="o">=</span> <span class="n">hellotest</span>
</span><span class='line'>  <span class="n">libs</span> <span class="o">+=</span> <span class="n">hello</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Source_Files</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">hellotest</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specific</span><span class="p">(</span><span class="n">nmake</span><span class="p">,</span> <span class="n">vc6</span><span class="p">,</span> <span class="n">vc7</span><span class="p">,</span> <span class="n">vc71</span><span class="p">,</span> <span class="n">vc8</span><span class="p">,</span> <span class="n">vc9</span><span class="p">,</span> <span class="n">vc10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Debug</span><span class="o">::</span><span class="n">libpaths</span> <span class="o">=</span> <span class="n">debug</span>
</span><span class='line'>      <span class="n">Debug</span><span class="o">::</span><span class="n">install</span> <span class="o">=</span> <span class="n">debug</span>
</span><span class='line'>      <span class="n">Release</span><span class="o">::</span><span class="n">libpaths</span> <span class="o">=</span> <span class="n">Release</span>
</span><span class='line'>      <span class="n">Release</span><span class="o">::</span><span class="n">install</span> <span class="o">=</span> <span class="n">Release</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意到helloworld.mpc和hellotest.mpc的差异吗？后者的after语句表示hellotest.mpc依赖于hellodll.mpc，必须在其后编译。另外，我在后者增加了Source_Files块，顾名思义，其作用是指定工程源文件(cpp和c)列表。如果没有它，MPC默认会将hellotest.mpc所在目录的所有源文件作为这个工程的源文件，这显然不是我们希望看到的；同理，需要在hellodll.mpc增加Source_Files块，修改后的内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">project</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sharedname</span> <span class="o">=</span> <span class="n">hello</span>
</span><span class='line'>  <span class="n">dynamicflags</span> <span class="o">+=</span> <span class="n">HELLO_BUILD_DLL</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Source_Files</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">hellodll</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specific</span> <span class="p">(</span><span class="n">nmake</span><span class="p">,</span> <span class="n">vc6</span><span class="p">,</span> <span class="n">vc7</span><span class="p">,</span> <span class="n">vc71</span><span class="p">,</span> <span class="n">vc8</span><span class="p">,</span> <span class="n">vc9</span><span class="p">,</span> <span class="n">vc10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Debug</span><span class="o">::</span><span class="n">dllout</span> <span class="o">=</span> <span class="n">debug</span>
</span><span class='line'>      <span class="n">Release</span><span class="o">::</span><span class="n">dllout</span> <span class="o">=</span> <span class="n">Release</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类似Source_Files块，还有Header_Files, Inline_Files和Resoure_Files等，具体可以查看MPC官方文档。
最后，重新执行一下</p>

<pre><code>mwc.pl -type nmake
nmake
nmake CFG="Win32 Release"
</code></pre>

<p>关于MPC更多的内容和细节可以下载<a href="http://downloads.ociweb.com/MPC/docs/html/MakeProjectCreator.html">OCI的《TAO开发指南》的MPC样章</a></p>
]]></content>
  </entry>
  
</feed>
