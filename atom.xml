<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Like的世界]]></title>
  <link href="http://www.malike.net.cn/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2015-05-25T02:50:34+08:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AutoSSH简介]]></title>
    <link href="http://www.malike.net.cn/blog/2014/12/23/autossh-tutorial/"/>
    <updated>2014-12-23T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/12/23/autossh-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.harding.motd.ca/autossh/">autossh</a> (Automatically restart SSH sessions and tunnels)，它在运行的时候启动一个SSH进程，并监控该进程的健康状况；当SSH进程崩溃或停止通信时，它将重启动SSH进程。</p>

<h2>命令选项</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>autossh <span class="o">[</span>-V<span class="o">]</span> <span class="o">[</span>-M port<span class="o">[</span>:echo_port<span class="o">]]</span> <span class="o">[</span>-f<span class="o">]</span> <span class="o">[</span>SSH_OPTIONS<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>-M port[:echo_port]</strong> 指定监控端口（和echo端口，默认为前者加1）。</p>

<ul>
<li>若希望使远程标准inetd的echo服务（默认端口为7），则指定echo_port，仅需服务监听地址为localhost。</li>
<li>若port设置为0，则将禁用监控功能。仅在ssh退出后重启它。</li>
</ul>
</li>
<li><p><strong>-f</strong> 使autossh在后台运行。</p></li>
</ul>


<p>另外，autossh还提供了一组环境变量来控制其行为, 这里仅介绍几个有代表性的，其可以man autossh</p>

<ul>
<li><strong>AUTOSSH_FIRST_POLL</strong> 指定首次论询测试时间。</li>
<li><strong>AUTOSSH_POLL</strong> 指定连接论询时间，默认600。若该值小于两次网络超时（默认15秒），则网络超将被调整为该值的1/2</li>
<li><strong>AUTOSSH_GATETIME</strong> 指定等待SSH连接成功建立的时间，默认30秒，超时表示首次运行失败，将退出autossh。若设为0，则禁用该功能，通常用于启动时运行autossh。</li>
<li><strong>AUTOSSH_MAXLIFETIME</strong> 指autossh最长运行时间，达到该时间，autossh将退出，并杀死SSH进程。</li>
<li><strong>AUTOSSH_MAXSTART</strong> 指定SSH最大启动次数。默认-1，表示无限制。</li>
</ul>


<h2>Ubuntu配置方法</h2>

<p>基于Ubuntu 12.04或14.04，以SSH动态代理（即SSH翻墙）为例。init script和Upstart都可以将autossh变成服务，然Upstart的<em>respawn</em>容错能力更强，它能在服务进程掉线，重新启动该服务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># autossh</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;autossh daemon&quot;</span>
</span><span class='line'>
</span><span class='line'>start on <span class="o">(</span>net-device-up <span class="nv">IFACE</span><span class="o">=</span>eth0 or net-device-up <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>stop on <span class="o">(</span>net-device-down <span class="nv">IFACE</span><span class="o">=</span>eth0 and net-device-down <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>setuid like
</span><span class='line'>setgid like
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> /usr/bin/autossh -M64000 -q -N -D localhost:12348 sshproxy
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>setuid</em>和<em>setgid</em>为了让autossh运行在指定的用户和用户组上。</li>
<li><em>start on</em>表示当eth0或wlan0激活时，启动autossh，<em>stop on</em>反之。其目的为避免系统启动或网络掉线时，频繁尝试启动autossh。</li>
</ul>


<h2>更好的办法</h2>

<p>最近OpenSSH都支持选项<strong>ServerAliveInterval</strong>和<strong>ServerAliveCountMax</strong>，实际为建立在SSH协议上的心跳测试。当测试失败后，SSH客户端进程将退出。通过Upstart的respawn功能重启SSH客户端进程，也能达到autossh目的。</p>

<p>仍以SSH动态代理为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># sshproxy</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;ssh proxy&quot;</span>
</span><span class='line'>
</span><span class='line'>start on <span class="o">(</span>net-device-up <span class="nv">IFACE</span><span class="o">=</span>eth0 or net-device-up <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>stop on <span class="o">(</span>net-device-down <span class="nv">IFACE</span><span class="o">=</span>eth0 and net-device-down <span class="nv">IFACE</span><span class="o">=</span>wlan0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>setuid like
</span><span class='line'>setgid like
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> /usr/bin/ssh <span class="se">\</span>
</span><span class='line'>    -oServerAliveInterval<span class="o">=</span>300 <span class="se">\</span>
</span><span class='line'>    -oServerAliveCountMax<span class="o">=</span>2 <span class="se">\</span>
</span><span class='line'>    -q -N -D localhost:12348 sshproxy
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH隧道简介]]></title>
    <link href="http://www.malike.net.cn/blog/2014/10/27/ssh-tunnel-tutorial/"/>
    <updated>2014-10-27T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/10/27/ssh-tunnel-tutorial</id>
    <content type="html"><![CDATA[<p>SSH的功能非常强大，日常除了用于命令行远程登录服务器。它还具有神奇的隧道（tunnel）功能（也被称为SSH代理），可用于加密访问本地或远程主机的服务。</p>

<p>通常，SSH代理具有3种方式：</p>

<h2>SSH（正向）代理</h2>

<p>通过参数-L [bind_address:]port:remote_host:remote_port，将指定本地（客户端）端口转发至远程端口上。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-proxy.png" alt="SSH Proxy" /></p>

<p>如上图， hosta无法直接访问hostb，但它能直接SSH登录gateway；如此通过gateway，将hosta的端口X转发至hostb的端口Y上。相当于端口X和端口Y之间建立了加密隧道。</p>

<p>一般来说，端口Y为hostb上某服务的监听端口。当建立隧道后，hosta将监听端口X。应用程序访问hosta的端口X，等同于访问hostb的端口Y。对于应用程序，hostb端口Y对应的服务就如同运行在hosta上。</p>

<p>日常工作中，客户的网络常由于信息安全而被网关（或防火墙）隔离。当我们的软件在客户网络中某服务器发生问题时，我们常需奔赴客户现场进行调试。若客户存在某机器安装了SSH服务器，且能被外部访问。就可以利用SSH正向代理的方法，快速简便的登录被隔离的服务器并进行应用调试。</p>

<h2>SSH反向代理</h2>

<p>通过参数-R [bind_address:]port:remote_host:remote_port，将指定远程端口转发至本地（客户端）端口上。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-reverse-proxy.png" alt="SSH Reverse Proxy" /></p>

<p>如上图，hosta在防火墙内，无法被hostb直接访问。但它能直接SSH登录hostb；如此通过hostb，将hostb的端口X转发至hosta的端口Y上。该方法与SSH正向代理类似，所不同的是该隧道的访问方向是从服务端（hostb）至客户端(hosta），故被称为反向代理。</p>

<p>其应用场景也与SSH正向代理类似，所不同的是若客户不存在可供外部访问的SSH服务器时，我们可以在外网建设一个SSH服务器给客户的被隔离服务器来建立隧道。如此，我们可以访问自己的SSH服务器对应端口来调试客户服务器的应用。</p>

<p>更进一步，客户内网甚至不能访问外网，此时可利用客户内网一台笔记本（或台式机，它可以访问目标服务器）USB接上3G/4G手机来达到访问外部SSH服务器的目的。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-reverse-proxy-mobile.png" alt="SSH Reverse Proxy Mobile" /></p>

<h2>SSH动态代理</h2>

<p>通过参数-D [bind_address:]port，利用远程服务器为访问出口，在本地建立SOCKS 4/5代理服务器。</p>

<p>可以形象描绘为将本地应用的端口（SOCKS客户端端口），动态转发至远程。</p>

<p><img src="http://www.malike.net.cn/images/ssh-tunnel-dynamic-proxy.png" alt="SSH Dynamic Proxy" /></p>

<p>该功能广为人知的应用场景为翻墙。如上图，在国外租用VPS（hostb），客户端（hosta）通过SSH动态代理端口X（SOCKS 4/5的端口）便可以访问被GFW封锁的网络。</p>

<p>这种翻墙最大的优势在于</p>

<ul>
<li>低成本：国外廉价低配置VPS基本满足个人翻墙需求。</li>
<li>服务端0配置：服务端只需要安装SSH服务端。</li>
<li>客户端配置简单：客户端需要安装SSH客户端，以及一条命令。</li>
<li>加密隧道：保证网络访问的数据安全。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建通过SSH访问的chroot]]></title>
    <link href="http://www.malike.net.cn/blog/2014/08/07/create-chroot-for-ssh-access/"/>
    <updated>2014-08-07T18:09:48+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/08/07/create-chroot-for-ssh-access</id>
    <content type="html"><![CDATA[<p>我的工作环境是Ubuntu，然而经常需要CentOS来编译或测试。一般存在3种解决办法：</p>

<ul>
<li>创建VirtualBox或KVM虚拟机：

<ul>
<li>优点：部署容易，且可以运行各种应用（如Oracle）。</li>
<li>缺点：运行速度相对LXC和chroot慢，特别是I/O.</li>
</ul>
</li>
<li>创建CentOS的LXC：

<ul>
<li>优点：运行速度快，且具有独立IP，可以通过SSH访问。</li>
<li>缺点: 需要修改启动脚本。</li>
</ul>
</li>
<li>创建CentOS的chroot：

<ul>
<li>优点：不需要修改任何配置。</li>
<li>缺点：无法直接通过SSH访问，且需要root权限才能运行chroot。</li>
</ul>
</li>
</ul>


<h2>创建CentOS的chroot</h2>

<p>具体参看<a href="http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial/">Rinse简介</a></p>

<h2>创建SSH用户（或组）</h2>

<p>在当前OS环境中，创建用户centos6.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo useradd -m -s /bin/bash centos6
</span></code></pre></td></tr></table></div></figure>


<p>获取centos6的uid和gid</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>id -u centos6
</span><span class='line'>id -g centos6
</span></code></pre></td></tr></table></div></figure>


<p>在chroot环境中创建同名用户，且保持uid和gid相同。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chroot /var/lib/centos-6 /bin/bash
</span><span class='line'>groupadd -g &lt;gid&gt; centos6
</span><span class='line'>useradd -s /bin/bash -m -u &lt;uid&gt; -g centos6 centos6
</span></code></pre></td></tr></table></div></figure>


<h2>配置sshd</h2>

<p>将下述内容追加至/etc/ssh/sshd_config</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Match group centos6
</span><span class='line'>  ChrootDirectory /var/lib/centos-6
</span></code></pre></td></tr></table></div></figure>


<p>这样保证centos6组的用户登录ssh时，chroot至/var/lib/centos-6目录中。</p>

<h2>配置dev, proc和sysfs</h2>

<p>chroot环境中rpm安装和卸载的前/后置脚本依赖dev, proc和sysfs，否则可能将造成安装和卸载错误。</p>

<p>在/etc/fstab中，增加proc和sysfs的挂载选项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>proc /var/lib/centos-6/proc proc  defaults      0 0
</span><span class='line'>none /var/lib/centos-6/sys  sysfs defaults      0 0
</span><span class='line'>/dev /var/lib/centos-6/dev  none  defaults,bind 0 0
</span></code></pre></td></tr></table></div></figure>


<h2>配置ssh密钥登录</h2>

<p>chroot的ssh密钥登录与常规情况的唯一区别在于公钥应存放在当前OS环境（而非chroot环境）的~/.ssh/authorized_keys，因为sshd在执行chroot之前需要检查公钥是否正确。</p>

<p>因此，本例中应该存放在当前OS的/home/centos-6/.ssh/authorized_keys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rinse简介——Debian/Ubuntu中创建RPM安装环境]]></title>
    <link href="http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial/"/>
    <updated>2014-07-15T20:34:58+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://collab-maint.alioth.debian.org/rinse/">Rinse</a>是一个Debian环境中创建RPM发行版本（如CentOS，Scientific Linux和openSUSE）的工具。你可以利用它轻松创建各种RPM发行版本的chroot环境。</p>

<p>以下基于Ubuntu 12.04 amd64，主要以创建CentOS 6 x86_64为例。</p>

<h2>安装Rinse</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install -y rinse
</span></code></pre></td></tr></table></div></figure>


<h2>创建CentOS 6</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rinse --distribution centos-6 --arch amd64 --directory centos-6
</span></code></pre></td></tr></table></div></figure>


<p>运行该命令将创建CentOS 6 amd64于当前工作目录的centos-6目录中。其中，</p>

<ul>
<li>&mdash;distribution指定发行版本，类似还可以centos-{4,5}， fedora-core-{4,5,6,7,8,9}和opensuse-{10.1,10.2,10.3,11.0,11.1,12.1}等。可以下述命令获取：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rinse --list-distributions
</span></code></pre></td></tr></table></div></figure>


<p>具体对应于/etc/rinse/*.packages的模板名，它们主要包含RPM包列表。换一句话说，你根据需要定制自己的模板。另一方面，你也可以通过&mdash;pkgs-dir指定不同于/etc/rinse的模板目录。</p>

<ul>
<li>&mdash;arch指定架构，amd64表示64位架构，i386表示32位架构。缺省为i386.</li>
<li>&mdash;directory指定为安装目录，安装结束后便可以chroot该目录了。</li>
</ul>


<p>另外，需要额外安装某些包，可以通过指定&mdash;add-pkg-list来完成。</p>

<h2>配置RPM缓存</h2>

<p>rinse默认使用/var/rinse/cache作为缓存目录，它大大缩短了重复运行同样命令的时间。具体通过：</p>

<ul>
<li>&mdash;cache 0指禁用缓存，缺省为1</li>
<li>&mdash;cache-dir指定不同于/var/rinse/cache作为缓存目录。</li>
<li>&mdash;clean-cache指清楚缓存</li>
</ul>


<h2>定制安装后执行脚本</h2>

<p>&mdash;after-post-install, &mdash;before-post-install和&mdash;post-install顾名思义，需要指出的是&mdash;post-install默认执行/usr/lib/rinse/<distribution>/post-install.sh.</p>

<h2>如何提高安装速度？</h2>

<p>通过修改/etc/rinse/rinse.conf中对应发行版的镜像地址可以加速安装，如CentOS 6 x86_64的镜像地址可以修改为</p>

<pre><code>http://centos.ustc.edu.cn/centos/6/os/x86_64/CentOS/
</code></pre>

<p>也可以通过&mdash;config指定不同于/etc/rinse/rinse.conf的配置文件。</p>

<p>若内网存在HTTP cache服务器（如Squid)，还可以设置环境变量http_proxy来缓存rpm以及加速安装，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo <span class="nv">http_proxy</span><span class="o">=</span>http://&lt;http proxy address&gt; rinse --distribution centos-6 --arch amd64 --directory centos-6
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用SSH限制rsync的访问目录]]></title>
    <link href="http://www.malike.net.cn/blog/2014/04/01/restrict-ssh-access-to-rsync/"/>
    <updated>2014-04-01T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/04/01/restrict-ssh-access-to-rsync</id>
    <content type="html"><![CDATA[<p>我经常使用VPS来共享数据给朋友同事。由于VPS通常内存较小，不太适合安装ftp服务器；而http服务器常常只有下载的功能；更重要是某些数据较大，每天可能都在改变，需要增量同步上传或下载。</p>

<p>rsync是这类场景的良好选择。一方面，通过SSH服务器来工作，它不常驻内存，节约了VPS内存使用；另一方面，它优秀的二进制增量同步功能，不仅减少了同步时间，也节约了VPS有限的带宽。</p>

<p>在实际使用过程中，我遇到了下述问题：</p>

<ul>
<li>针对某些目录，某些用户仅能读（下载）;</li>
<li>针对某些目录，某些用户仅能写（上传）;</li>
<li>具有读或写权限的用户不能登录SSH，也不能执行任何程序;</li>
<li>具有读或写权限的用户不能访问其他目录。</li>
</ul>


<p>诚然，这些问题可以通过操作系统用户相对复杂的权限控制（包括目录基本权限和ACL以及SELinux等）。然而，通过搜索和学习，我发现强大的SSH早已具备这样的接口：</p>

<ul>
<li>通过密钥对，简化用户使用，让用户彻底摆脱密码的记忆（当然用户加密私钥，还是要自己记密码的）；</li>
<li>通过~/.ssh/authorized_keys的command选项（通过<a href="http://man.he.net/man5/authorized_keys">man authorized_keys</a>阅读详细内容），设置脚本过滤掉业务上无效的指令；</li>
<li>还是通过command选项，限制不同密钥有不同权限，如密钥A只能读，密钥B只能写。</li>
</ul>


<p>下面，我将通过具体示例来解释command选项:</p>

<h2>限制用户仅能读</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DATA_DIR</span><span class="o">=</span>/home/share/data
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> in
</span><span class='line'>rsync<span class="se">\ </span>--server*<span class="o">)</span>
</span><span class='line'>        <span class="nv">TARGET</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> | awk <span class="s1">&#39;{ print $NF }&#39;</span><span class="sb">`</span>
</span><span class='line'>        <span class="k">if </span><span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> | grep -q <span class="s2">&quot; --sender &quot;</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;$TARGET&quot;</span> <span class="o">=</span> <span class="nv">$DATA_DIR</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>                <span class="nv">$SSH_ORIGINAL_COMMAND</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'><span class="k">                </span><span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>        ;;
</span><span class='line'>*<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>该脚本（存储在文件/usr/local/bin/validate_pull_share）限制用户share仅能下载$DATA_DIR的文件, 它需要跟公钥配置在服务器的/home/share/.ssh/authorized_keys，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;/usr/local/bin/validate_pull_share&quot;</span> ssh-rsa &lt;用户公钥A&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>command选项用于指定脚本，该脚本可以过滤一些远程命令（禁止执行），它相当于远程命令的前置脚本。</li>
<li>$SSH_ORIGINAL_COMMAND是sshd传递给command脚本环境变量，表示ssh客户端需要远程执行的命令。</li>
<li>第6行限制仅能执行rsync服务端指令。</li>
<li>第7行获取$SSH_ORIGINAL_COMMAND的最后一个参数（这里没有考虑有空格的目录），这个参数在这里是rsync需要访问的目录$TARGET.</li>
<li>第8行为命令合法性判断, 由两个条件组成：

<ul>
<li>判断&mdash;sender参数是否存在于$SSH_ORIGINAL_COMMAND中，&mdash;sender表示该命令为下载命令；</li>
<li>判断下载目录$TARGET是否与规定的目录一致。</li>
</ul>
</li>
</ul>


<h2>限制用户仅能写</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DATA_DIR</span><span class="o">=</span>/home/share/data
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> in
</span><span class='line'>rsync<span class="se">\ </span>--server*<span class="o">)</span>
</span><span class='line'>        <span class="nv">TARGET</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> | awk <span class="s1">&#39;{ print $NF }&#39;</span><span class="sb">`</span>
</span><span class='line'>        <span class="k">if</span> ! <span class="nb">echo</span> <span class="s2">&quot;$SSH_ORIGINAL_COMMAND&quot;</span> | grep -q <span class="s2">&quot; --sender &quot;</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;$TARGET&quot;</span> <span class="o">=</span> <span class="nv">$DATA_DIR</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>                <span class="nv">$SSH_ORIGINAL_COMMAND</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'><span class="k">                </span><span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>        ;;
</span><span class='line'>*<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Rejected&quot;</span>
</span><span class='line'>        ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际仅与读限制脚本相差一行（第8行），仅允许没有&mdash;sender参数的命令（即上传命令）。</p>

<p>该脚本（存储在文件/usr/local/bin/validate_push_share）同样需要跟另一个公钥配置在服务器的/home/share/.ssh/authorized_keys，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;/usr/local/bin/validate_pull_share&quot;</span> ssh-rsa &lt;用户公钥B&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>通过上述脚本和配置实现了不同密钥访问同一目录的不同权限控制。还可以在这些脚本基础上扩展到多个目录或文件的访问控制。以及访问时间的控制，如某时段只能读，另外时段只能写；避免正在写数据的时候，有用户读数据造成数据不一致的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LXC简介]]></title>
    <link href="http://www.malike.net.cn/blog/2013/11/10/lxc-tutorial/"/>
    <updated>2013-11-10T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2013/11/10/lxc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://linuxcontainers.org/">LXC</a> (Linux Containters) 是一种基于内核容器属性的用户空间接口。 它被认为介于chroot和完全虚拟化之间，其目标为创建一个不需要独立内核，但近可能接近标准Linux安装的环境。</p>

<p>其特性如下：</p>

<ul>
<li>内核空间（ipc, uts, mount, pid, network和user)</li>
<li>支持Apparmor和SELinux</li>
<li><a href="http://en.wikipedia.org/wiki/Seccomp">seccomp</a>策略</li>
<li>chroots (使用pivot_root)</li>
<li><a href="https://www.kernel.org/pub/linux/libs/security/linux-privs/kernel-2.2/capfaq-0.2.txt">Kernel capabilities</a></li>
<li>支持<a href="http://en.wikipedia.org/wiki/Cgroups">cgroups</a> (Control groups)</li>
</ul>


<p>由于没有完全虚拟化CPU，也没有虚拟化硬盘，其性能是与物理机接近的。实际经验，我发现在LXC中编译C/C++源码（如构建基于C/C++源码的RPM或DEB）的性能是VirtualBox的3倍。强烈建议使用LXC代替KVM和VirtualBox作为RPM或DEB的构建环境。</p>

<p>以下操作基于Ubuntu 12.04，那么需要安装LXC包：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install -y lxc
</span></code></pre></td></tr></table></div></figure>


<h2>创建LXC</h2>

<p>以创建一个名为precise的Ubuntu 12.04容器为例。</p>

<p>需要创建一个基础的配置文件。由于创建LXC完成后，不再需要该配置文件（可以删除），故该文件的名字和路径没有特殊要求。这里命名为precise.conf，放在当前路径下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>lxc.network.type <span class="o">=</span> veth
</span><span class='line'>lxc.network.flags <span class="o">=</span> up
</span><span class='line'>lxc.network.name <span class="o">=</span> eth0
</span><span class='line'>lxc.network.link <span class="o">=</span> lxcbr0
</span></code></pre></td></tr></table></div></figure>


<p>lxcbr0为由LXC包创建的虚拟网桥，通过ifconfig可以知道其IP地址10.0.3.1，网段10.0.3.1/24，容器将通过lxcbr0与外界通信。</p>

<p>如此，可以开始创建容器了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-create -n precise -f precise.conf -t ubuntu -- -r precise
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>-n指定容器名，这里为precise。</li>
<li>-f指定基础配置文件，即上一步骤创建的precise.conf。</li>
<li>-t指定模板名，这里必须为ubuntu（创建Ubuntu 12.04)。每个模板名，对应一个脚本，它们存放在/usr/lib/lxc/templates目录（文件名形如lxc-&lt;模板名>）中。</li>
<li>&mdash;以后的参数被传递给模板脚本；</li>
<li>-r为ubuntu模板脚本的参数，表示<a href="http://en.wikipedia.org/w/index.php?title=Ubuntu_(operating_system)#Releases">Ubuntu发行版代号</a>，这里必须为precise（它是12.04的发行代号）。</li>
</ul>


<p>创建过程可能会比较漫长。通过阅读/usr/lib/lxc/templates/lxc-ubuntu，不难发现创建ubuntu容器主要依靠deboostrap来完成。另一方面，变量MIRROR和SECURITY_MIRROR决定了镜像的设置，它们默认为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">MIRROR</span><span class="o">=</span>http://archive.ubuntu.com/ubuntu
</span><span class='line'><span class="nv">SECURITY_MIRROR</span><span class="o">=</span>http://security.ubuntu.com/ubuntu
</span></code></pre></td></tr></table></div></figure>


<p>在大陆地区，使用默认镜像的网速较慢。为了加快创建过程，可以将它们都换成大陆或香港的镜像，如<a href="http://ftp.cuhk.edu.hk/pub/Linux/ubuntu">http://ftp.cuhk.edu.hk/pub/Linux/ubuntu</a></p>

<p>具体问题是lxc-ubuntu并没有提供命令行参数来设置MIRROR和SECURITY_MIRROR。在不修改lxc-ubuntu代码的情况下，唯一的办法就是通过设置相关环境变量来达到这个目的，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo <span class="nv">MIRROR</span><span class="o">=</span><span class="s2">&quot;http://ftp.cuhk.edu.hk/pub/Linux/ubuntu&quot;</span> <span class="se">\</span>
</span><span class='line'>     <span class="nv">SECURITY_MIRROR</span><span class="o">=</span><span class="s2">&quot;http://ftp.cuhk.edu.hk/pub/Linux/ubuntu&quot;</span> <span class="se">\</span>
</span><span class='line'>     lxc-create -n precise -f precise.conf -t ubuntu -- -r precise
</span></code></pre></td></tr></table></div></figure>


<p>我司为了加快内部开发和测试人员安装Ubuntu，部署了<a href="https://www.unix-ag.uni-kl.de/~bloch/acng/">apt-cacher-ng</a>——一种deb包HTTP缓存代理。由于lxc-ubuntu基于deboostrap，可以通过设置环境变量http_proxy来设置deboostrap的缓存代理（请见<a href="http://unix.stackexchange.com/questions/38993/global-cache-config-of-debootstrap">Global cache config of debootstrap</a>）:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo <span class="nv">http_proxy</span><span class="o">=</span><span class="s2">&quot;http://192.168.88.10:3142/&quot;</span> <span class="se">\</span>
</span><span class='line'>   <span class="nv">MIRROR</span><span class="o">=</span><span class="s2">&quot;http://ftp.cuhk.edu.hk/pub/Linux/ubuntu&quot;</span> <span class="se">\</span>
</span><span class='line'>     <span class="nv">SECURITY_MIRROR</span><span class="o">=</span><span class="s2">&quot;http://ftp.cuhk.edu.hk/pub/Linux/ubuntu&quot;</span> <span class="se">\</span>
</span><span class='line'>     lxc-create -n precise -f precise.conf -t ubuntu -- -r precise
</span></code></pre></td></tr></table></div></figure>


<p>如此，在尽可能节约外部带宽的同时，最大限度的加快了创建过程。</p>

<p>上述创建方法，容器的架构将与host os的相同（如amd64）。若需要在amd64的host os上创建i386或i686架构的容器，则需要通过模板脚本的-a参数指定i686，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-create -n precise -f precise.conf -t ubuntu -- -r precise -a i686
</span></code></pre></td></tr></table></div></figure>


<h2>启动LXC</h2>

<p>若需立即启动LXC，则：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-start -n precise
</span></code></pre></td></tr></table></div></figure>


<p>若需以daemon方式运行，则:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-start -n precise -d
</span></code></pre></td></tr></table></div></figure>


<p>若需随host os启动而自动启动，则:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ln -s /var/lib/lxc/precise/config /etc/lxc/auto/precise.conf
</span></code></pre></td></tr></table></div></figure>


<h2>打开LXC控制台</h2>

<p>在没有给容器设置IP时，打开其控制台</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-console -n precise
</span></code></pre></td></tr></table></div></figure>


<p>将看到文本登录界面。 通过按热键ctrl-a和q，可以退出容器控制台。</p>

<p>更多的时候，通过ssh登录将更方便，特别是key认证方式登录。</p>

<h2>停止LXC</h2>

<p>多数情况下，可以通过在guest os（容器）内执行poweroff或shutdown -h now来关闭容器。但有些时候却需要在host os上强行关闭容器，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-stop -n precise
</span></code></pre></td></tr></table></div></figure>


<h2>删除LXC</h2>

<p>容器创建后，配置和数据存放在/var/lib/lxc/precise目录中。执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-destroy -n precise
</span></code></pre></td></tr></table></div></figure>


<p>与手动删除该目录效果一样。</p>

<h2>其他模板</h2>

<ul>
<li>ubuntu-cloud：从Ubuntu云上下载根文件系统镜像。</li>
<li>fedora: 它依赖于yum包，通过模板脚本参数-R指定版本号，如19和20都无法创建成功。默认版本号为14，可以继续安装。</li>
<li>opensuse：它依赖于zypper，Ubuntu 12.04默认没有zypper包。虽然<a href="https://launchpad.net/~thopiekar/+archive/zypper">ppa:thopiekar/zypper</a>提供了zypper，但是创建失败。</li>
<li>busybox：仅有busybox的容器，默认不能远程登录，可以用于练习简单的命令行操作。</li>
<li>sshd：将host os中各个系统目录（/bin, /sbin/和/lib等）以只读方式绑定到容器中，仅运行ssh服务器，支持ssh登录，可用于练习复杂的命令行操作。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python常量]]></title>
    <link href="http://www.malike.net.cn/blog/2013/11/03/python-constants/"/>
    <updated>2013-11-03T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2013/11/03/python-constants</id>
    <content type="html"><![CDATA[<p>与C/C++不同，Python在语法上并没有定义常量，尽管<a href="http://www.malike.net.cn/blog/2013/07/25/pep8-summary/">PEP 8</a>定义了常量的命名规范为大写字母和下划线组成。</p>

<p>在实际项目中，常量首次赋值后， 无法阻止其他代码对其进行修改或删除。</p>

<h2>现存的办法</h2>

<p>幸运的是该问题在2001年就有人给出了解决方案<a href="http://code.activestate.com/recipes/65207-constants-in-python/">Constants in Python</a>，基本内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">_const</span><span class="p">:</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">ConstError</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>            <span class="k">raise</span> <span class="bp">self</span><span class="o">.</span><span class="n">ConstError</span><span class="p">,</span> <span class="s">&quot;Can&#39;t rebind const instance attribute (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">[</span><span class="n">__name__</span><span class="p">]</span> <span class="o">=</span> <span class="n">_const</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>其大致含义为：</p>

<ul>
<li>通过_const的__setattr__对象方法判断该对象是否存在属性name，若存在则抛出自定义异常ConstError，否则创建该属性。</li>
<li>将_const实例化的对象赋值sys.modules[__name__]，const模块被绑定成_const对象。__name__在首次载入const过程中为&#8217;const&#8217;，而<a href="http://docs.python.org/2.7/library/sys.html#sys.modules">sys.modules</a>是模块名与已加载模块的dict。</li>
</ul>


<p>如何使用const模块呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">const</span>
</span><span class='line'><span class="n">const</span><span class="o">.</span><span class="n">magic</span> <span class="o">=</span> <span class="mi">23</span>
</span></code></pre></td></tr></table></div></figure>


<p>若再次赋值const.magic，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">const</span><span class="o">.</span><span class="n">magic</span> <span class="o">=</span> <span class="mi">88</span>
</span></code></pre></td></tr></table></div></figure>


<p>则将抛出ConstError的异常。</p>

<h2>如何避免常量被删除？</h2>

<p>实际项目中，常量并不希望被其他代码删除。在_const类中加入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="bp">self</span><span class="o">.</span><span class="n">ConstError</span><span class="p">,</span> <span class="s">&quot;Can&#39;t unbind const const instance attribute (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">,</span> <span class="s">&quot;const instance has no attribute &#39;</span><span class="si">%s</span><span class="s">&#39;&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，删除已定义的常量（假设const.magic已经赋值）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">del</span> <span class="n">const</span><span class="o">.</span><span class="n">magic</span>
</span></code></pre></td></tr></table></div></figure>


<p>则将抛出ConstError的异常。</p>

<h2>配置文件与常量</h2>

<p>实际项目中，为了让应用程序灵活部署，一般会用配置文件存储应用程序的各种参数；而这些参数通常都以常量语义存在于应用程序中。</p>

<p>在上述代码基础上，根据应用程序的实际情况将常量划分为3类：</p>

<ul>
<li>特殊含义的数值或字符串，如 ETC_FSTAB = &ldquo;/etc/fstab&rdquo; 。其作用为

<ul>
<li>避免程序中到处出现类似特殊值，因为人为输入特殊值的低级错误将耗费不必要的调试/测试时间</li>
<li>另一方面, 神秘数值（magic number），如 LUN_BLOCK_SIZE = 4096，将影响程序的可读性。</li>
</ul>
</li>
<li>应用程序参数的默认值，如 URLOPEN_DEFAULT_TIMEOUT = 15 。其作用主要为配置文件参数的默认值。</li>
<li>通过配置文件载入的参数，如通过<a href="http://docs.python.org/2/library/configparser.html#ConfigParser.SafeConfigParser">ConfigParser.SafeConfigParser</a>解析形如ini文件的参数。</li>
</ul>


<p>第1和2类常量作为_const类的类属性，第3类常量可以在__init__方法中初始化。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">_const</span><span class="p">:</span>
</span><span class='line'>    <span class="n">ETC_FSTAB</span> <span class="o">=</span> <span class="s">&quot;/etc/fstab&quot;</span>
</span><span class='line'>    <span class="n">LUN_BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'>    <span class="n">URLOPEN_DEFAULT_TIMEOUT</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">conf</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">SafeConfigParser</span><span class="p">()</span>
</span><span class='line'>        <span class="n">conf</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">CONF_PATH</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">URLOPEN_TIMEOUT</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">getint</span><span class="p">(</span><span class="s">&quot;DEFAULT&quot;</span><span class="p">,</span> <span class="s">&quot;urlopen_timeout&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">URLOPEN_TIMEOUT</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">URLOPEN_DEFAULT_TIMEOUT</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>某些情况下，应用程序可能并不希望const模块在被外部调用时绑定新属性（常量），实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Constant definition area</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_const</span><span class="o">.</span><span class="n">__setattr__</span> <span class="o">=</span> <span class="n">_const</span><span class="o">.</span><span class="n">_setattr_impl</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_setattr_impl</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>    <span class="k">raise</span> <span class="bp">self</span><span class="o">.</span><span class="n">ConstError</span><span class="p">,</span> <span class="s">&quot;Can&#39;t bind const instance attribute (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>其原理为_const对象初始化完成后将__setattr__设置为禁止绑定属性的实现。若在_const类中实现__setattr__为禁止绑定属性，则__init__也将无法初始化（绑定）对象属性。</p>

<h2>存在的小问题</h2>

<p>该问题并不影响该解决方案的使用，具体请参考:</p>

<p><a href="http://stackoverflow.com/questions/5365562/why-is-the-value-of-name-changing-after-assignment-to-sys-modules-name">http://stackoverflow.com/questions/5365562/why-is-the-value-of-name-changing-after-assignment-to-sys-modules-name</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制无源码安装Python模块]]></title>
    <link href="http://www.malike.net.cn/blog/2013/10/27/customize-python-modules-installation-without-source-files/"/>
    <updated>2013-10-27T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2013/10/27/customize-python-modules-installation-without-source-files</id>
    <content type="html"><![CDATA[<p>Python的<a href="http://docs.python.org/2/library/distutils.html">distutils</a>和<a href="https://pypi.python.org/pypi/setuptools">setuptools</a>都是为开源项目设计的，Python模块分发和安装都包含该模块的源代码。实际公司工作多为闭源项目，Python模块的安装是不能包核心源代码的。</p>

<p>过去对distutils和setuptools的一知半解，为了达到闭源的目的，我通过书写Makefile来编译Python源码为.pyc或.pyo，完全绕开distutils和setuptools的限制。权宜之计虽然解决了一时之急，然总是让我追求标准和完美的心感到不安。为此，最近我花了一些时间来阅读distutils文档和部分源代码，终于找到了相对地道的解决办法。</p>

<p>根据<a href="http://docs.python.org/2/distutils/extending.html">Extending Distutils</a>的描述，继承distutils.cmd.Command的子类，如distutils.command.build_py.build_py，并重载已有的方法来达到扩展的目的。</p>

<p>根据<a href="http://docs.python.org/2/distutils/apiref.html#creating-a-new-distutils-command">Creating a new Distutils command</a>描述子类必须定义如下方法：</p>

<ul>
<li>Command.initialize_options()</li>
<li>Command.finalize_options()</li>
<li>Command.run()</li>
<li>Command.sub_commands()</li>
</ul>


<p>并且命令install由install_lib和install_headers等子命令构成。</p>

<p>我的目的不是扩展Distutils的install命令，而是改变其行为，避免其安装源码。其实，只需要改变install_lib的行为就足够了。</p>

<p>类install_lib存在于/usr/lib/python2.7/distutils/command/install_lib.py文件中，它的方法run源码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Make sure we have built everything we need first</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">build</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Install everything: simply dump the entire contents of the build</span>
</span><span class='line'>    <span class="c"># directory to the installation directory (that&#39;s the beauty of</span>
</span><span class='line'>    <span class="c"># having a build directory!)</span>
</span><span class='line'>    <span class="n">outfiles</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">install</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># (Optionally) compile .py to .pyc</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">outfiles</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">distribution</span><span class="o">.</span><span class="n">has_pure_modules</span><span class="p">():</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">byte_compile</span><span class="p">(</span><span class="n">outfiles</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>与先编译再安装的直觉相反，编译生成pyc并不发生在build方法中，而是install方法执行后。所以，若重载build方法（实际调用build_py命令），则install和byte_compile都需要修改，工作量较大且复杂度较高。</p>

<p>直接能想到的办法是重载install方法，使其直接编译源码，并返回None，从而使byte_compile不会被执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils.command.install_lib</span> <span class="kn">import</span> <span class="n">install_lib</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils</span> <span class="kn">import</span> <span class="n">log</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils.dep_util</span> <span class="kn">import</span> <span class="n">newer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">py_compile</span> <span class="kn">import</span> <span class="nb">compile</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">InstallLib</span><span class="p">(</span><span class="n">install_lib</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">install</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">build_dir</span><span class="p">):</span>
</span><span class='line'>            <span class="n">current</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">build_dir</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">install_dir</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">mkpath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>                <span class="nb">file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                <span class="n">cfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;c&quot;</span>
</span><span class='line'>                <span class="n">cfile_base</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">cfile</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">force</span> <span class="ow">or</span> <span class="n">newer</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">cfile</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;byte-compiling </span><span class="si">%s</span><span class="s"> to </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">file</span><span class="p">,</span> <span class="n">cfile_base</span><span class="p">)</span>
</span><span class='line'>                    <span class="nb">compile</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">cfile</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;skipping byte-compilation of </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span><span class="p">(</span><span class="n">cmdclass</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;install_lib&quot;</span><span class="p">:</span> <span class="n">InstallLib</span><span class="p">},</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;HelloWorld&quot;</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然这样做达到了目的，然而仔细思考一下，更简单的办法是等安装完成后，删除目标目录的源码文件（这里仅给出InstallLib的实现，其余部分同上）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">InstallLib</span><span class="p">(</span><span class="n">install_lib</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">build</span><span class="p">()</span>
</span><span class='line'>        <span class="n">outfiles</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">install</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">outfiles</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">distribution</span><span class="o">.</span><span class="n">has_pure_modules</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">byte_compile</span><span class="p">(</span><span class="n">outfiles</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">outfiles</span><span class="p">:</span>
</span><span class='line'>                <span class="n">os</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此非常简洁，实际只增加了2行代码，其余皆copy-paste。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flake8简介]]></title>
    <link href="http://www.malike.net.cn/blog/2013/10/23/flake8-tutorial/"/>
    <updated>2013-10-23T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2013/10/23/flake8-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://flake8.readthedocs.org/">Flake8</a>包装了下列工具：</p>

<ul>
<li><a href="https://launchpad.net/pyflakes">PyFlakes</a>：静态检查Python代码逻辑错误的工具。</li>
<li><a href="http://pep8.readthedocs.org/en/latest/">pep8</a>： 静态检查<a href="http://www.malike.net.cn/blog/2013/07/25/pep8-summary/">PEP 8</a>编码风格的工具。</li>
<li><a href="http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html">Ned Batchelder’s McCabe script</a>：静态分析Python代码复杂度的工具。</li>
</ul>


<p>它综合上述三者的功能，在简化操作的同时，还提供了扩展开发接口。</p>

<h2>安装</h2>

<p>这里仅介绍Ubuntu的安装方法，其他安装方法见Flake8官网。</p>

<ul>
<li>添加ppa:cjohnston/flake8。Ubuntu 12.04、12.10和13.04官方源仅提供pep8的包，而该PPA不仅提供了最新的python-flake8包，还提供最新的pep8包。Ubuntu 13.10和14.04默认已经提供最新的pep8和python-flake8，所以可以跳过这一步。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:likemartinma/python
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get -y --force-yes dist-upgrade</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装python-flake8</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install python-flake8
</span></code></pre></td></tr></table></div></figure>


<h2>使用</h2>

<ul>
<li>递归检查当前目录的所有Python文件：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>flake8 .
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>检查指定文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>flake8 foo.py bar.py
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过setup.py检查工程的所有Python文件：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>python setup.py flake8
</span></code></pre></td></tr></table></div></figure>


<p>为了保证其在其他环境中正确运行，需要将flake8增加到setup_requires中，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">setup</span><span class="p">(</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="s">&quot;project&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">packages</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;project&quot;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setup_requires</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;flake8&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>由于默认禁用代码条件复杂度检查，需要通过&mdash;max-complexity激活该功能：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>flake8 --max-complexity 12 .
</span></code></pre></td></tr></table></div></figure>


<p>该功能对于发现代码过度复杂非常有用，根据Thomas J. McCabe, Sr（<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic complexity</a>的创造者）研究，代码复杂度不宜超过10，而Flake8官网建议值为12。</p>

<h2>配置</h2>

<ul>
<li>用户相关的配置存在~/.config/flake8中，如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[flake8]</span>
</span><span class='line'><span class="na">max-complexity</span><span class="o">=</span><span class="s">12</span>
</span></code></pre></td></tr></table></div></figure>


<p>个人感觉除了代码复杂度因子（max-complexity）外，其他参数的默认值已经很好，基本不需要再作配置。</p>

<ul>
<li>工程相关的设置，可以存放在工程顶级目录的tox.ini或setup.cfg，格式与用户相关的配置一致。</li>
</ul>


<h2>与Git整合</h2>

<p>在.git/hooks目录中，创建Git的pre-commit钩子脚本，Flake8可以对每次提交的代码进行检查。该脚本如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flake8.run</span> <span class="kn">import</span> <span class="n">git_hook</span>
</span><span class='line'>
</span><span class='line'><span class="n">COMPLEXITY</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'><span class="n">STRICT</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">git_hook</span><span class="p">(</span><span class="n">complexity</span><span class="o">=</span><span class="n">COMPLEXITY</span><span class="p">,</span> <span class="n">strict</span><span class="o">=</span><span class="n">STRICT</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>若strict为True，任何warning都将阻挡提交。否则（或缺省），warning仅会被打印到标准输出。</p>

<h2>与vim整合</h2>

<p>这里仅介绍vim插件vim-flake8的安装和配置</p>

<ul>
<li>安装vim插件pathogen：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir -p ~/.vim/autoload ~/.vim/bundle
</span><span class='line'>curl -Sso ~/.vim/autoload/pathogen.vim <span class="se">\</span>
</span><span class='line'>    https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加下列配置至~/.vimrc中：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>execute pathogen#infect<span class="p">()</span>
</span><span class='line'><span class="nb">syntax</span> <span class="k">on</span>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装vim-flake8：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/.vim/bundle
</span><span class='line'>git clone git://github.com/nvie/vim-flake8.git
</span></code></pre></td></tr></table></div></figure>


<p>至此，当vim打开Python源码后，按F7就会执行Flake8对当前文件进行检查。</p>

<h2>插件</h2>

<p>Flake8相比pep8的优势在于其良好的扩展性，pep8 1.4.6尚未支持命名规范的检查，却已有人开发Flake8的插件<a href="https://github.com/flintwork/pep8-naming">pep8-naming</a>来弥补这个缺陷。</p>

<p>pep8-naming处于早期开发阶段，尚无人为其制作deb包。我花时间做了deb包，并上传到我的ppa:likemartinma/python上。通过下述步骤可以轻松安装它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo add-apt-repository ppa:likemartinma/python
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get -y --force-yes dist-upgrade
</span><span class='line'>sudo apt-get install pep8-naming
</span></code></pre></td></tr></table></div></figure>


<p>由于Python部分核心库的函数命令存在“历史遗留”问题，与PEP 8并不保持完全一致，如<a href="http://docs.python.org/2/library/pyexpat.html#xml.parsers.expat.xmlparser.StartElementHandler">xml.parsers.expat.xmlparser.StartElementHandler</a>，这给pep8-naming带来一定的误报困扰。</p>

<p>解决的办法是这样的代码行追加 # noqa 的注释，从避免flake8发出类似warning。</p>

<h2>存在的问题</h2>

<p>由于pep8尚未支持docstring规范的检查，也没有相关Flake8的插件。目前仅能用<a href="https://github.com/GreenSteam/pep257">pep257</a>来完成docstring规范的检查。期待pep257早日衍生成Flake8的插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PEP 8总结]]></title>
    <link href="http://www.malike.net.cn/blog/2013/07/25/pep8-summary/"/>
    <updated>2013-07-25T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2013/07/25/pep8-summary</id>
    <content type="html"><![CDATA[<p>下述内容主要源于<a href="http://www.python.org/dev/peps/pep-0008/">PEP 8 &mdash; Style Guide for Python Code</a>。</p>

<h2>最大的行长度</h2>

<ul>
<li>所有行不超过79个字符。</li>
<li>docstring或comment应不超过72字符</li>
</ul>


<h2>补齐</h2>

<ul>
<li>每个补齐级别为4个空格。</li>
<li>当一行操作最大行长度时，应尽可能按照各种括号作为纵向对齐的参照物（可以适当增加括号），如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="p">(</span><span class="n">get</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">delete</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">default_app</span><span class="p">,</span> <span class="n">HTTPError</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">static_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Aligned with opening delimiter</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">long_function_name</span><span class="p">(</span><span class="n">var_one</span><span class="p">,</span> <span class="n">var_two</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">var_three</span><span class="p">,</span> <span class="n">var_four</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># More indentation included to distinguish this from the rest.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">long_function_name</span><span class="p">(</span>
</span><span class='line'>        <span class="n">var_one</span><span class="p">,</span> <span class="n">var_two</span><span class="p">,</span> <span class="n">var_three</span><span class="p">,</span>
</span><span class='line'>        <span class="n">var_four</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">var_one</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>多行情况下，关闭括号可以出现在一行开始，如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;hello&#39;</span><span class="p">:</span> <span class="s">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;world&#39;</span><span class="p">:</span> <span class="s">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">some_function_that_takes_arguments</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;e&#39;</span><span class="p">,</span> <span class="s">&#39;f&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际工作中，不同开发语言存在不同的补齐风格要求。可以在.vimrc中针对python设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>autocmd <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> *.<span class="k">py</span> <span class="k">set</span> <span class="nb">et</span> <span class="k">ts</span><span class="p">=</span><span class="m">4</span> <span class="k">sw</span><span class="p">=</span><span class="m">4</span> <span class="k">sts</span><span class="p">=</span><span class="m">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>仅对python源文件设置4个空格补齐。</p>

<p>当然，更好的办法是在每个python源文件的最后一行追加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># vim: set ts=4 sw=4 sts=4 et:</span>
</span></code></pre></td></tr></table></div></figure>


<p>从而保证vim打开该文件时满足4个空格补齐的要求。</p>

<h2>空行</h2>

<p>顶层函数或类定义的间隔为2行。
类的方法定义的间隔为1行。</p>

<h2>源文件编码</h2>

<p>Python核心代码应为UTF-8（或ASCII，在Python 2中）。
源文件若在Python 2中用ASCII或在Python 3中用UTF-8，则不应出现编码声明。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>导入</h2>

<ul>
<li>每行仅导入一个模块，但每行可以导入一个模块的多个函数:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">Popen</span><span class="p">,</span> <span class="n">PIPE</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>保证所有import在文件的头部，仅在模块注释后面，并先于模块的全局变量和常量。</li>
<li><p>import应按下列顺序分组：</p>

<ul>
<li>标准库的导入</li>
<li>相关第3方库的导入</li>
<li>本地应用程序/库的导入</li>
</ul>
</li>
</ul>


<p>每个分组间空1行
将类似__all__定义放在所有import后面</p>

<ul>
<li>绝对导入优于相对导入</li>
<li>避免导入模块所有的内容（通配方式， from <module> import *)，在__init__.py中导出内部API除外。</li>
</ul>


<h2>表达式和语句中的空格</h2>

<ul>
<li>括号前后不允许有空格</li>
<li>操作符号（如=，>和+=等）前后各1个空格</li>
<li>:和,之前不允许有空格，之后仅1个空格</li>
<li>函数默认参数的等号（=）前后不允许空格</li>
</ul>


<h2>注释</h2>

<ul>
<li>为所有公开模块、函数、类和方法写docstring。</li>
<li>非公开方法的comment应出现在def行之后</li>
<li><a href="http://www.python.org/dev/peps/pep-0257/">PEP-257</a>描述良好的docstring惯例。多行docstring的第1行后应跟着1个空白行。</li>
<li>单行docstring可保持关闭的&#8221;&ldquo;&#8221;在同一行。</li>
</ul>


<h2>命名规范</h2>

<p>尽管Python库代码的命名存在一些混乱，新模块和包（包括第3方框架）应满足下列规范。但已有库若风格不同，应保持原来的内部一致性。</p>

<ul>
<li>单下划线开头（如：_single_leading_underscore）弱内部使用，类似from M import *不导入类似符号。</li>
<li>单下划线结尾（如：single_trailing_underscore<em>）用于与Python关键字冲突的情况下，如classs</em>。</li>
<li>双下划线开头（如：__double_leading_underscore）用于类属性。</li>
<li>双下划线开头和结构用于特殊对象或属性，如__init__, __import__或__file__。多为语言定义，避免发明类似名字。</li>
<li>避免使用小写L、大写O和大写I作为单字符变量名。</li>
<li>模块名应简短、全小写，可包含下划线；包名类似，但不鼓励包含下划线。</li>
<li>C/C++实现的扩展模块应伴随着提供如面向对象等高级接口的Python模块存在，且其名字以下划线开头（如_socket）</li>
<li>类名应为驼峰词（CapWords），内部使用的类以下划线开头。</li>
<li>异常名与类名一样，且应以Error结尾（若该异常确为一个错误）。</li>
<li>函数名应为小写加下划线。</li>
<li>总是使用self作为实例方法的第1个参数，总是使用cls作为类方法的第1个参数</li>
<li>常量名应为大写加下划线（如MAX_OVERFLOW）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-buildpackage示例（二）]]></title>
    <link href="http://www.malike.net.cn/blog/2012/10/23/git-buildpackage-2/"/>
    <updated>2012-10-23T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2012/10/23/git-buildpackage-2</id>
    <content type="html"><![CDATA[<p>在<a href="http://www.malike.net.cn/blog/2012/02/19/git-buildpackage-1/">《git-buildpackage示例（一）》</a>中，我介绍了如何利用git-buildpackage为Ubuntu已有包做一个补丁包的办法。</p>

<p>当时，我的补丁是基于tolua 5.1.3版本。一段时间后，tolua的作者释放了5.1.4版本。问题出现了，如何将我的补丁合并到5.1.4版本中呢？</p>

<p>下面我将继续使用git-buildpackage来解决合并上游新版本的问题：</p>

<ul>
<li>下载tolua 5.1.4源码包（假设放在git工作目录上层）：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://www.tecgraf.puc-rio.br/~celes/tolua/tolua-5.1.4.tar.gz
</span><span class='line'><span class="nb">cd </span>tolua
</span><span class='line'>git-import-orig -u 5.1.4 ../tolua-5.1.4.tar.gz
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>手动解决遇到的冲突（如src/bin/Makefile）并提交更新：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git commit
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这时，运行</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git log --format<span class="o">=</span>%d:%s
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> (HEAD, master):Merge commit 'upstream/5.1.4'
</span><span class='line'> (upstream/5.1.4, upstream):Imported Upstream version 5.1.4
</span><span class='line'> (debian/5.1.3-2):Fix relocation R_X86_64_32 against '.rodata' can not be used when making a shared object
</span><span class='line'> (debian/5.1.3-1):Imported Debian patch 5.1.3-1
</span><span class='line'> (upstream/5.1.3):Imported Upstream version 5.1.3</span></code></pre></td></tr></table></div></figure>


<p>upstream/5.1.4分支被创建，且将其合并到master分支中。如此，master分支合并完毕，接下来将合并debian的patches。</p>

<ul>
<li>重整patch-queue：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gbp-pq rebase
</span></code></pre></td></tr></table></div></figure>


<p>手动解决遇到的冲突：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git rm -f src/bin/toluabind.c
</span><span class='line'>git rebase --continue
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>导出patch-queue（至master分支）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clean -df
</span><span class='line'>gbp-pq <span class="nb">export</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指定版本号5.1.4-1自动生成snapshot的debian/changelog：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git-dch -a -S -N 5.1.4-1
</span><span class='line'>git add debian/changelog
</span><span class='line'>git add debian/patches/0001-mkdir-for-tolua-lib-archive-and-remove-temp-files.patch
</span><span class='line'>git commit -m <span class="s2">&quot;Update patches from debian/5.1.3-1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试构建新的deb包。为了避免污染当前环境，这里指定git首先导出源码至../tolua-build目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git-buildpackage --git-export-dir<span class="o">=</span>../tolua-build --git-ignore-new
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>生成release的版本信息，并构建release的deb包：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git-dch -a -R
</span><span class='line'>git ci --amend
</span><span class='line'>git tag debian/5.1.4-1
</span><span class='line'>git-buildpackage --git-export-dir<span class="o">=</span>../tolua-build --git-ignore-new
</span></code></pre></td></tr></table></div></figure>


<p>到此为止，我已经演示了git-buildpackage合并上游版本的过程。不难发现，git-buildpackage充分利用了git的特点，在很大程度上简化了补丁开发和维护的过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-buildpackage示例（一）]]></title>
    <link href="http://www.malike.net.cn/blog/2012/02/19/git-buildpackage-1/"/>
    <updated>2012-02-19T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2012/02/19/git-buildpackage-1</id>
    <content type="html"><![CDATA[<p>在《为tolua的deb包作一个补丁》中，我介绍了如何利用quilt为Ubuntu已有包做一个补丁包的办法。可以看出quilt具有一定的版本管理能力，然而与流行版本管理系统相比，功能较弱也不灵活。</p>

<p>从<a href="http://www.debian.org/doc/manuals/maint-guide/">Debian New Maintainers&#8217; Guide</a>中，了解到deb包的制作和维护管理已经与现有流行版本管理系统结合在了一块，其中一款工具为git-buildpackage，它将包制作和维护，特别是第三方补丁包维护，与git紧密的结合了起来。</p>

<p>下面仍然以tolua的补丁制作为例，一步一步展示git-buildpackage的基本操作。</p>

<ul>
<li>安装必要的工具：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install git-buildpackage build-essential debhelper quilt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>下载libtolua-dev的源码（建立upstream目录单独存放Ubuntu的deb源码包是为了保证清洁和正确）：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir upstream
</span><span class='line'>apt-get <span class="nb">source </span>libtolua-dev
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>导入upsteam的dsc文件（将生成与目录upstream同级的目录tolua）：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>git-import-dsc upstream/tolua_5.1.3-1.dsc
</span><span class='line'><span class="nb">cd </span>tolua
</span></code></pre></td></tr></table></div></figure>


<p>这时，运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git log --format<span class="o">=</span>%d:%s
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> (HEAD, debian/5.1.3-1, master):Imported Debian patch 5.1.3-1
</span><span class='line'> (upstream/5.1.3, upstream):Imported Upstream version 5.1.3</span></code></pre></td></tr></table></div></figure>


<p>从下至上，首条提交导入了tolua 5.1.3的源码，次条提交导入了deb包维护者的deb包文件(debian/*)；并且建立了upstream和master两个分支，标签upstream/5.1.3位于upstream分支上，标签debian/5.1.3-1位于master分支头部。</p>

<p>此外，upstream分支用于维护源码作者的发布版本更新情况，master分支用于维护deb包描述文件及其补丁文件。git-buildpackage工具集的正确运行将依赖于标签upstream/5.1.3和debian/5.1.3-1，不能随意删改。</p>

<ul>
<li>导入quilt patches到patch queue中——创建patch-queue/master分支，并将debian/patches/*逐一变成该分支的提交，并自动切换到该分支上：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gbp-pq import
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>执行make后发现构建目标libtolua.a的生成目录lib不存在，这是git只针对文件做版本，所以upstream导入git时，该目录被忽略了。为此，我将src/lib/Makefile中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nf">$T</span><span class="o">:</span> <span class="m">$(OBJS)</span>
</span><span class='line'>  <span class="k">$(</span>AR<span class="k">)</span> <span class="nv">$@</span> <span class="k">$(</span>OBJS<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>RANLIB<span class="k">)</span> <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nf">$T</span><span class="o">:</span> <span class="m">$(OBJS)</span>
</span><span class='line'>  mkdir -p <span class="k">$(</span>@D<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>AR<span class="k">)</span> <span class="nv">$@</span> <span class="k">$(</span>OBJS<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>RANLIB<span class="k">)</span> <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，它将在每次构建该目标时，创建该目标所在目录。更进一步不难发现，src/bin/tolua_lua.o和src/bin/toluabind.c为受版本控制的中间文件，将影响构建的正确运行。为此，删除这两个文件并提交日志。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git rm -f src/bin/tolua_lua.o src/bin/toluabind.c
</span><span class='line'>git commit -a -m <span class="s2">&quot;mkdir for tolua lib archive and remove temp files&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，可以正确make该工程了。</p>

<ul>
<li>修复x86_64链接问题，将config文件中，如下内容</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span><span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span> -fPIC -O2 -pipe -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span><span class="o">=</span> -fPIC -O2 -pipe  -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>并提交日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git commit -a -m <span class="s2">&quot;Fix relocation R_X86_64_32 against &#39;.rodata&#39; erro for shared object.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>导出patch-queue——将其分支提交逐一转化为debian/patches目录下的补丁文件（为保证正确运行，清理掉中间文件）：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clean -df
</span><span class='line'>gbp-pq <span class="nb">export</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指定版本号5.1.3-2自动生成snapshot的debian/changelog：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git-dch -S -a -N 5.1.3-2
</span></code></pre></td></tr></table></div></figure>


<p>debian/changelog的新增内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tolua (5.1.3-2~1.gbp896bed) UNRELEASED; urgency=low
</span><span class='line'>
</span><span class='line'>  ** SNAPSHOT build @896bede5a4eb6f3967cdfe94ea2ef419235e7183 **
</span><span class='line'>
</span><span class='line'>  * UNRELEASED
</span><span class='line'>
</span><span class='line'> -- Like Ma   Sun, 19 Feb 2012 01:07:06 +0800</span></code></pre></td></tr></table></div></figure>


<p>提交相关修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add debian/changelog <span class="se">\</span>
</span><span class='line'>      debian/patches/series <span class="se">\</span>
</span><span class='line'>      debian/patches/0001-mkdir-for-tolua-lib-archive-and-remove-temp-files.patch <span class="se">\</span>
</span><span class='line'>      debian/patches/0002-Fix-relocation-R_X86_64_32-against-.rodata-can-not-b.patch
</span><span class='line'>git commit -m <span class="s2">&quot;Fix relocation R_X86_64_32 against &#39;.rodata&#39; error for shared object&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试构建新的deb包。为了避免污染当前环境，这里指定git首先导出源码至../tolua-build目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git-buildpackage --git-export-dir<span class="o">=</span>../tolua-build --git-ignore-new
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，上述debian/changelog新增信息，除版本号5.1.3-2外（新包的版本信息），并无实在意义，仅用于测试deb包的构建。</p>

<ul>
<li>生成release的版本信息，并构建release的deb包：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git checkout src/bin/tolua_lua.o src/bin/toluabind.c
</span><span class='line'>git-dch -R -a
</span><span class='line'>git commit -a --amend
</span><span class='line'>git-buildpackage --git-export-dir<span class="o">=</span>../tolua-build --git-ignore-new
</span><span class='line'>git tag debian/5.1.3-2
</span></code></pre></td></tr></table></div></figure>


<p>注意，前面仅仅在patch-queue分支上删除的两个中间文件，并未在master分支上删除它们，所以重新checkout它们以保证后续构建的正确运行。</p>

<p>这里的关键命令git-dch -R -a自动生成了release的版本信息，当然我们也可以根据需要再修改它们。最后一条命令，给master分支的HEAD加上标签debian/5.1.3-2，git-buildpackage将依赖于它才能继续正确工作。</p>

<p>到此为止，我已经演示了git-buildpackage的补丁制作过程，可以观察../tolua-build目录中生成的文件，它们就是我们可以用于发布的deb包源码文件，形式上与ubuntu/debian中apt-get source得到的一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 11.10 VirtualBox的Host-only网卡上外网和DHCP永久地址]]></title>
    <link href="http://www.malike.net.cn/blog/2011/12/20/vbox-hostonly-dhcp/"/>
    <updated>2011-12-20T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2011/12/20/vbox-hostonly-dhcp</id>
    <content type="html"><![CDATA[<p>VirtualBox支持各种虚拟网络：NAT, Bridge Adapter, Internal Network和Host-only Adapter等。其中Bridged Adapter最为简单和常用，它几乎是0配置，直接桥接有线或无线物理网卡就可以与互联网通信。</p>

<p>然而，我工作场所内部网和家里内部网的网段不相同，DHCP存在一定租赁时间，如果使用Bridged Adapter并DHCP获取IP地址的时候，虚拟机地址经常会改变。为此，我将笔记本电脑的VirtualBox虚拟机都修改为Host-only Adapter模式。</p>

<p>一个问题是Host-only Adapter（网段为192.168.56.0/24）默认不能与互联网通信。google之后发现网上早有人遇到类似问题，他们给出的解决办法是在/etc/rc.local中加入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>iptables -t nat -I POSTROUTING -s 192.168.56.0/24 -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<p>另一个问题是VirtualBox内置DHCP的IP租赁时间设置，也无法将MAC地址与IP地址静态绑定，这造成虚拟机IP地址每隔一段时间改变一次，给使用带来诸多不方便。另一方面，我也不想静态设置IP地址，因为如果这样做，我必须每安装一次虚拟机都要重新设置IP地址。</p>

<p>以前就听说过dnsmasq，不仅集成DNS、DHCP和TFTP功能，而且占用资源很少，设置也相对简单。</p>

<ul>
<li>安装dnsmasq</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install dnsmasq
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>打开/etc/dnsmasq.conf，针对vboxnet0配置DHCP。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface=vboxnet0
</span><span class='line'>
</span><span class='line'># 192.168.56.1是默认网关（host机器的vboxnet0地址）
</span><span class='line'># 208.67.222.222和208.67.220.220是DNS地址(这里使用了OpenDNS)
</span><span class='line'>dhcp-option=vboxnet0,option:dns-server,192.168.56.1,208.67.222.222,208.67.220.220
</span><span class='line'>
</span><span class='line'># 192.168.56.2和192.168.56.254为分配地址范围
</span><span class='line'># infinite表示IP永远不过期
</span><span class='line'>dhcp-range=vboxnet0,192.168.56.2,192.168.56.254,infinite</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启动dnsmasq</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo service dnsmasq restart
</span></code></pre></td></tr></table></div></figure>


<p>当然，dnsmasq也支持MAC地址与IP地址静态绑定。比如，在/etc/dnsmasq.conf中针对MAC地址08:00:27:81:51:85，分配机器名vbox-xp，分配IP地址192.168.56.2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dhcp-host=vbox-xp,08:00:27:81:51:85,192.168.56.2</span></code></pre></td></tr></table></div></figure>


<p>最后，不要忘了重启动dnsmasq。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为tolua的deb包作一个补丁]]></title>
    <link href="http://www.malike.net.cn/blog/2011/10/31/tolua-deb-patch/"/>
    <updated>2011-10-31T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2011/10/31/tolua-deb-patch</id>
    <content type="html"><![CDATA[<p>近日在学习tolua时发现在Kubuntu 11.10 amd64平台下将其链接到so时报告如下错误：</p>

<blockquote><p>relocation R_X86_64_32 against &lsquo;.rodata&rsquo; can not be used when making a shared object; recompile with -fPIC</p></blockquote>

<p>为此，我决定在其原deb基础上加一个补丁，这样生成的新包可以安装到其他开发机器上，省去了每次重编译tolua的重复劳动。</p>

<p>为构建和修改deb安装必要的工具（配置quilt）：</p>

<pre><code>sudo apt-get install build-essential debhelper quilt
</code></pre>

<p>下载libtolua-dev的源码，创建补丁add-fpic-O2-for-amd64.patch，并将config文件加入其中：</p>

<pre><code>apt-get source libtolua-dev
cd tolua-5.1.3
mkdir -p debian/patches
quilt new add-fpic-O2-for-amd64.patch
quilt add config
</code></pre>

<p>将config文件中，如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span> <span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span> <span class="o">=</span> -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span> <span class="o">=</span> -fPIC -O2 -pipe -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CPPFLAGS</span> <span class="o">=</span> -fPIC -O2 -pipe  -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span><span class='line'><span class="nv">CFLAGS</span> <span class="o">=</span> -fPIC -O2 -pipe -g <span class="k">$(</span>WARN<span class="k">)</span> <span class="k">$(</span>INC<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成补丁add-fpic-O2-for-amd64.patch</p>

<pre><code>quilt refresh
</code></pre>

<p>为补丁增加描述信息</p>

<pre><code>quilt header -e
</code></pre>

<p>其具体内容如下：</p>

<pre><code>Description: Fix relocation R_X86_64_32 against '.rodata' error for shared object.
Author: Like Ma &lt;likemartinma@gmail.com&gt;

  * config: add -fPIC -O2 -pipe to CFLAGS and CPPFLAGS
</code></pre>

<p>通过执行</p>

<pre><code>dch -R
</code></pre>

<p>在debian/changelog顶部增加日志信息：</p>

<pre><code>tolua (5.1.3-2) unstable; urgency=low

  * Fix relocation R_X86_64_32 against '.rodata' error for shared object.

-- Like Ma &lt;likemartinma@gmail.com&gt; Mon, 31 Oct 2011 15:23:09 +0800
</code></pre>

<p>构建libtolua-dev_5.1.3-2_amd64.deb:</p>

<pre><code>dpkg-buildpackage -d -uc -us -rfakeroot
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MakeProjectCreator (MPC) 简介]]></title>
    <link href="http://www.malike.net.cn/blog/2008/10/05/mpc-tutorial/"/>
    <updated>2008-10-05T00:00:00+08:00</updated>
    <id>http://www.malike.net.cn/blog/2008/10/05/mpc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.ociweb.com/products/mpc">Makefile, Project, and Workspace Creator (MPC)</a> 原始OCI为网络通信库ACE开发的跨平台工程文件生成工具，它可以生成很多种工程文件，例如Windows平台的Borland Developer Studio, Borland C++ Build 2007, Borland Makefile，Microsoft eMbedded VC3, Microsoft Visual C++ 6/7/71/8/9/10, nmake；Linux平台的automake, make等。</p>

<p>下面将以Windows平台的nmake和vc9为例介绍MPC的使用方法。首先，我们需要下载</p>

<ol>
<li><a href="http://www.activestate.com/activeperl">ActivePerl</a>，双击执行安装;</li>
<li><a href="http://download.ociweb.com/MPC/">MPC</a>，以解压到C:盘为例，设置系统环境变量MPC_ROOT为C:\MPC，以及将%MPC_ROOT%追加系统环境变量PATH。当然，你也可以通过双击执行C:\MPC\registry.pl将生成工程文件的功能注册到右键菜单中。</li>
</ol>


<h2>一、一个Hello World工程</h2>

<p>首先，建立目录helloworld，并且在这个目录下且创建helloworld.cpp，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，创建MPC工程文件helloworld.mpc，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project {
</span><span class='line'>  exename = helloworld
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最后，打开Visual Studio 2008 Command Prompt（也可以用VS2003或2005的），进入helloworld的目录, 然后输入</p>

<pre><code>mwc.pl -type nmake
</code></pre>

<p>就生成了格式为nmake的Makefile，它默认包含两个配置Debug和Release。让我们编译一下Debug版本：</p>

<pre><code>nmake CFG="Win32 Debug"
</code></pre>

<p>你会发现helloworld.exe就生成在当前目录。</p>

<p>或许你希望debug和release生成的exe分别放在debug和release目录，修改一下MPC文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project {
</span><span class='line'>  exename = helloworld
</span><span class='line'>  specific (nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
</span><span class='line'>      Debug::install = debug
</span><span class='line'>      Release::install = release
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>或许你更喜欢用IDE，让我们生成VS2008的工程文件吧：</p>

<pre><code>mwc.pl -type vc9
</code></pre>

<h2>二、一个简单dll工程</h2>

<p>首先，建立目录hellodll，并且在这个目录下且创建hellodll.h，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef HELLO_DLL_H</span>
</span><span class='line'><span class="cp">#define HELLO_DLL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HELLO_BUILD_DLL</span>
</span><span class='line'><span class="cp">#   define HELLO_Export __declspec(dllexport)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#   define HELLO_Export __declspec(dllimport)</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* HELLO_BUILD_DLL */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* __cplusplus */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLO_Export</span> <span class="kt">void</span> <span class="n">print_hello</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* extern &quot;C&quot; */</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* __cplusplus */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* HELLO_DLL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，创建文件hellodll.cpp，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;hellodll.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print_hello</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，创建文件hellodll.mpc，内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project {
</span><span class='line'>  sharedname = hello
</span><span class='line'>  dynamicflags += HELLO_BUILD_DLL
</span><span class='line'>  specific(nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
</span><span class='line'>      Debug::dllout = debug
</span><span class='line'>      Release::dllout = release
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>之后，执行如下命令，可以生成Debug和Release的dll。注意Debug的dll是hellod.dll。</p>

<pre><code>mwc.pl -type nmake
nmake
nmake CFG="Win32 Release"
</code></pre>

<p>接下来，我们做一个工程来驱动这个dll</p>

<h2>三、hello dll的测试工程</h2>

<p>首先，在原来的目录hellodll下建立文件hellowtest.cpp，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;hellodll.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print_hello</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，创建文件hellotest.mpc，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project {
</span><span class='line'>  after += hellodll
</span><span class='line'>  exename = hellotest
</span><span class='line'>  libs += hello
</span><span class='line'>
</span><span class='line'>  Source_Files {
</span><span class='line'>      hellotest.cpp
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  specific(nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
</span><span class='line'>      Debug::libpaths = debug
</span><span class='line'>      Debug::install = debug
</span><span class='line'>      Release::libpaths = Release
</span><span class='line'>      Release::install = Release
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>注意到helloworld.mpc和hellotest.mpc的差异吗？后者的after语句表示hellotest.mpc依赖于hellodll.mpc，必须在其后编译。另外，我在后者增加了Source_Files块，顾名思义，其作用是指定工程源文件(cpp和c)列表。如果没有它，MPC默认会将hellotest.mpc所在目录的所有源文件作为这个工程的源文件，这显然不是我们希望看到的；同理，需要在hellodll.mpc增加Source_Files块，修改后的内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project {
</span><span class='line'>  sharedname = hello
</span><span class='line'>  dynamicflags += HELLO_BUILD_DLL
</span><span class='line'>
</span><span class='line'>  Source_Files {
</span><span class='line'>      hellodll.cpp
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  specific (nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
</span><span class='line'>      Debug::dllout = debug
</span><span class='line'>      Release::dllout = Release
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>类似Source_Files块，还有Header_Files, Inline_Files和Resoure_Files等，具体可以查看MPC官方文档。
最后，重新执行一下</p>

<pre><code>mwc.pl -type nmake
nmake
nmake CFG="Win32 Release"
</code></pre>

<p>关于MPC更多的内容和细节可以下载<a href="http://downloads.ociweb.com/MPC/docs/html/MakeProjectCreator.html">OCI的《TAO开发指南》的MPC样章</a></p>
]]></content>
  </entry>
  
</feed>
