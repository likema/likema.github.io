<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2019-08-18T19:24:50+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rbenv简介——Debian/Ubuntu中管理多版本Ruby]]></title>
    <link href="http://www.malike.net.cn/blog/2019/08/17/rbenv-tutorial/"/>
    <updated>2019-08-17T16:40:54+00:00</updated>
    <id>http://www.malike.net.cn/blog/2019/08/17/rbenv-tutorial</id>
    <content type="html"><![CDATA[<h2>一、安装</h2>

<pre><code class="bash">git clone git://github.com/rbenv/rbenv.git ~/.rbenv
git clone git://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<p>在国内，为了加速下述安装：</p>

<pre><code class="bash">git clone https://github.com/andorchen/rbenv-taobao-mirror.git ~/.rbenv/plugins/rbenv-taobao-mirror
</code></pre>

<p>激活rbenv</p>

<pre><code class="bash">eval "$(~/.rbenv/bin/rbenv init)"
</code></pre>

<p>为了每次登录后自动激活rbenv，需将<code>NMV_DIR</code>、<code>nvm.sh</code>和补齐加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">export PATH=~/.rbenv/shims:~/.rbenv/bin:$PATH
eval "$(rbenv init -)"
</code></pre>

<p>验证是否安装正确：</p>

<pre><code class="bash">curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
</code></pre>

<p>或</p>

<pre><code class="bash">wget -qO- https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
</code></pre>

<p>输出类似：</p>

<pre><code>Checking for `rbenv' in PATH: /root/.rbenv/bin/rbenv
Checking for rbenv shims in PATH: OK
Checking `rbenv install' support: /root/.rbenv/plugins/ruby-build/bin/rbenv-install (ruby-build 20190615-9-gf3f4193)
Counting installed Ruby versions: none
  There aren't any Ruby versions installed under `/root/.rbenv/versions'.
  You can install Ruby versions like so: rbenv install 2.2.4
Checking RubyGems settings: OK
Auditing installed plugins: OK
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Ruby版本</h3>

<pre><code class="bash">rbenv install -l
</code></pre>

<p>除了Ruby官方版本，还支持RBX和JRuby等。</p>

<h3>安装指定版本的Ruby</h3>

<p>安装过程，实际为下载并编译指定版本的Ruby源码，故需系统安装：</p>

<pre><code>sudo apt-get install -y make gcc libssl-dev libreadline-dev zlib1g-dev
</code></pre>

<p>然后：</p>

<pre><code class="bash">rbenv install 2.6.3
</code></pre>

<p>Ruby版本安装在 <code>~/.rbenv/versions</code> 目录中。</p>

<h3>卸载指定版本的Ruby</h3>

<pre><code class="bash">rbenv uninstall 2.6.3
</code></pre>

<h3>设置shell的Ruby版本</h3>

<pre><code class="bash">rbenv shell 2.6.3
</code></pre>

<p>等同于</p>

<pre><code class="bash">export RBENV_VERSION=2.6.3
</code></pre>

<p>清除<code>RBENV_VERSION</code></p>

<pre><code class="bash">rbenv shell --unset
</code></pre>

<h2>三、升级</h2>

<pre><code class="bash">cd ~/.rbenv
git pull
cd ~/.rbenv/plugins/ruby-build
git pull
cd ~/.rbenv/plugins/rbenv-taobao-mirror
git pull
</code></pre>

<h2>四、配置Systemd脚本</h2>

<p>若Ruby程序须通过Systemd启动，则其Systemd脚本类似：</p>

<pre><code class="ini">...

[Service]
...
User=&lt;username&gt;
Group=&lt;group&gt;
Environment="PATH=/home/&lt;username&gt;/.rbenv/shims:/home/&lt;username&gt;/.rbenv/bin:/sbin:/usr/sbin:/bin:/usr/bin"
Environment="RBENV_ROOT=/home/&lt;username&gt;/.rbenv"
Environment="RBENV_VERSION=&lt;ruby version&gt;"
WorkingDirectory=&lt;app dir&gt;
ExecStart=&lt;app dir&gt;/&lt;app&gt;
...
</code></pre>

<ul>
<li><code>username</code> 为服务运行的用户名，通常为 <code>RBENV_ROOT</code> 所属用户。</li>
<li><code>group</code> 为服务运行的组名，通常为 <code>RBENV_ROOT</code> 所属组。</li>
<li><code>RBENV_VERSION</code> 为Ruby版本号。</li>
<li><code>app dir</code> 为Ruby程序的目录。</li>
<li><code>app</code> 为Ruby程序或启动脚本。</li>
</ul>


<h2>五、制作Docker镜像</h2>

<p>若不希望使用Ruby的官方Docker镜像，可利用rbenv创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV RBENV_ROOT /root/.rbenv
ENV RBENV_VERSION 2.6.3
ENV PATH $RBENV_ROOT/shims:$RBENV_ROOT/bin:$PATH
ENV RUBY_CFLAGS -O3

RUN set -eux; \
    apt-get update; \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get install -y git wget make gcc libssl-dev libreadline-dev zlib1g-dev; \
    echo "gem: --no-rdoc --no-ri" &gt; ~/.gemrc; \
    git clone --depth 1 https://github.com/rbenv/rbenv.git $RBENV_ROOT; \
    git clone --depth 1 https://github.com/rbenv/ruby-build.git $RBENV_ROOT/plugins/ruby-build; \
    git clone --depth 1 https://github.com/andorchen/rbenv-taobao-mirror.git $RBENV_ROOT/plugins/rbenv-taobao-mirror; \
    CONFIGURE_OPTS="--disable-install-doc" MAKE_OPTS="-j`grep -c '^processor' /proc/cpuinfo`" rbenv install $RBENV_VERSION; \
    gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.com/; \
    gem install bundler; \
    bundle config mirror.https://rubygems.com https://gems.ruby-china.com; \
    apt-mark auto '.*' &gt; /dev/null; \
    [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists /var/tmp/* /tmp/* $RBENV_ROOT/versions/*/lib/ruby/gems/*/cache/*.gem
</code></pre>

<ul>
<li>在国内，为了加速安装gem，上述gem和bundle设置国内镜像</li>
<li><code>RUBY_CFLAGS</code> 为 <code>-O3</code> 可编译优化的Ruby程序。在某些情况，可提高应用20-30%的运行效率。</li>
<li>可针对指定C扩展（如ffi），设置编译优化标志：</li>
</ul>


<pre><code>bundle config build.ffi --with-cflags="$RUBY_CFLAGS"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks-Rust简介]]></title>
    <link href="http://www.malike.net.cn/blog/2019/04/30/shadowsocks-rust-tutorial/"/>
    <updated>2019-04-30T01:30:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2019/04/30/shadowsocks-rust-tutorial</id>
    <content type="html"><![CDATA[<p>在《<a href="https://www.malike.net.cn/blog/2016/11/29/shadowsocks-tutorial/">Shadowsocks简介</a>》中，我介绍了如何使用<a href="https://shadowsocks.org/en/index.html">Shadowsocks</a>。但它不具备负载均衡集群能力，而结合HAProxy的集群配置复杂。</p>

<p><a href="https://github.com/shadowsocks/shadowsocks-rust">shadowsocks-rust</a>是Shadowsocks的Rust语言实现，它不仅具有传统Shadowsocks特性，而且还具有：</p>

<ul>
<li><strong>负载均衡</strong> 多个Shadowsocks服务器的能力。</li>
<li>探测Shadowsocks服务器 <strong>延迟</strong> 的能力。</li>
</ul>


<h2>安装</h2>

<p>Shadowsocks-Rust未提供DEB安装包。为了方便安装，可下载其<a href="https://github.com/shadowsocks/shadowsocks-rust/releases">静态链接版本</a></p>

<pre><code class="bash">sudo tar atf shadowsocks-v1.7.0-nightly.x86_64-unknown-linux-musl.tar.xz -C /usr/local/bin
</code></pre>

<h2>配置</h2>

<p>以root用户创建目录/etc/shadowsocks-rust，编辑/etc/shadowsocks-rust/config.json：</p>

<pre><code class="json">{
    "servers": [
        {
            "address": "127.0.0.1",
            "port": 1080,
            "password": "hello-world",
            "method": "aes-256-cfb"
            "timeout": 300
        },
        {
            "address": "127.0.0.1",
            "port": 1081,
            "password": "hello-kitty",
            "method": "aes-256-cfb"
        }
    ],
    "local_port": 8388,
    "local_address": "127.0.0.1"
}
</code></pre>

<ul>
<li><code>address</code>为服务端地址。</li>
<li><code>server_port</code>为服务端监听端口。</li>
<li><code>password</code>为客户端和服务端预设的共享密码，它最好由安全密码生成器生成（如<a href="https://www.lastpass.com/">LastPass</a>或<a href="http://keepass.info/">KeePass</a>），且长度不小于6个字符。</li>
<li><code>timeout</code>为连接超时时间。</li>
<li><code>method</code>为加密算法，<code>aes-256-cfb</code>的安全性较好。</li>
<li>每个<code>servers</code>元素为一个Shadowsocks服务器配置。</li>
</ul>


<p>因Ubuntu 14.04过保，下面仅以Ubuntu 16.04及以后版本为例。</p>

<p>以root用户创建/etc/systemd/system/shadowsocks-rust-local.service:</p>

<pre><code class="ini">[Unit]
Description=Shadowsocks-Rust Custom Client Service.
Documentation=sslocal -h
After=network.target

[Service]
Type=simple
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE
User=nobody
Group=nogroup
ExecStart=/usr/local/bin/sslocal --log-without-time -c /etc/shadowsocks-rust/config.json

[Install]
WantedBy=multi-user.target
</code></pre>

<p>注册并启动服务：</p>

<pre><code class="bash">sudo chown -R root:nogroup /etc/shadowsocks-rust
sudo chmod -R g-w,o-rwx /etc/shadowsocks-rust
sudo systemctl daemon-reload
sudo systemctl enable shadowsocks-rust
sudo systemctl start shadowsocks-rust
</code></pre>

<p>注：</p>

<ul>
<li>为降低<code>sslocal</code>进程权限，以nobody用户和nogroup组运行它。</li>
<li>为防止密码泄漏，/etc/shadowsocks-rust/config.json仅root用户或nogroup组可读。</li>
<li>限制<code>sslocal</code>进程仅能监听socket.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks简介]]></title>
    <link href="http://www.malike.net.cn/blog/2016/11/29/shadowsocks-tutorial/"/>
    <updated>2016-11-29T01:39:55+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/11/29/shadowsocks-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://shadowsocks.org/en/index.html">Shadowsocks</a>（中文名: 影梭） 是一款开源的安全SOCKS 5代理，它主要用于在大陆翻墙。</p>

<h2>原理</h2>

<p>与SSH动态代理相似，客户端呈现为SOCKS 5代理服务，客户端与服务器之间采用加密通信。服务器部署于GFW之外，从而实现代理翻墙服务。</p>

<h2>特点</h2>

<ul>
<li>使用自行设计的协议加密通信，支持多种加密算法：AES、Blowfish、IDEA、RC4等。除创建TCP连接外无需握手，每次请求只转发1个连接，因此使用起来网速较快，在移动设备上较省电。</li>
<li>通过异步I/O和事件驱动实现，响应速度快。</li>
<li>客户端支持主流操作系统平台：Windows、Linux、OS X、Android、iOS和OpenWrt</li>
</ul>


<h2>shadowsocks-libev简介</h2>

<p>网络中普遍采用Python版本的<a href="https://pypi.python.org/pypi/shadowsocks">shadowsocks</a>，该版本看似安装简单，却存在如下缺点：</p>

<ul>
<li>没有Linux操作系统原生安装包（如：RPM和DEB）：从Ubuntu 16.04开始，提供shadowsocks安装包。</li>
<li>没有操作系统的服务脚本（如init.d和upstart）。</li>
<li>Python程序占用内存较多，运行效率不佳。</li>
</ul>


<p>而<a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks-libev</a>是Shadowsocks在嵌入式和低端设备的轻量级实现：</p>

<ul>
<li>纯C实现，不仅占用内存极小，且运行效率更快。</li>
<li>在几乎所有Linux平台都存在原生安装包，且具有对应平台的服务启动脚本。</li>
</ul>


<p>下面基于Ubuntu 14.04/16.04介绍它的安装和配置。</p>

<h2>安装shadowsocks-libev</h2>

<p>客户端和服务端的安装方法相同：</p>

<pre><code class="bash">sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev
sudo apt-get update
sudo apt-get install -y shadowsocks-libev
</code></pre>

<h2>配置shadowsocks-libev服务端</h2>

<p>编辑/etc/shadowsocks-libev/config.json：</p>

<pre><code class="json">{
    "server_port": 8388,
    "password": "&lt;共享密码&gt;",
    "timeout": 60,
    "method": "aes-256-cfb"
}
</code></pre>

<ul>
<li><code>server_port</code>为服务端监听端口</li>
<li><code>password</code>为客户端和服务端预设的共享密码，它最好由安全密码生成器生成（如<a href="https://www.lastpass.com/">LastPass</a>或<a href="http://keepass.info/">KeePass</a>），且长度不小于6个字符。</li>
<li><code>timeout</code>为连接超时时间。</li>
<li><code>method</code>为加密算法，<code>aes-256-cfb</code>的安全性较好。</li>
</ul>


<p>配置完成后，需重启：</p>

<pre><code class="bash">sudo service shadowsocks-libev restart
</code></pre>

<h2>配置shadowsocks-libev客户端</h2>

<p>创建/etc/shadowsocks-libev/client.json （文件名可修改）：</p>

<pre><code class="json">{
    "server": "&lt;服务端地址&gt;",
    "server_port": "&lt;服务端端口&gt;",
    "local_port": "22357",
    "password": "&lt;共享密码&gt;",
    "method": "aes-256-cfb"
}
</code></pre>

<h3>Ubuntu 14.04</h3>

<p>安装包没有提供系统服务脚本，故须自己创建Upstart脚本/etc/init/ss-local.conf （文件名可修改）：</p>

<pre><code># ss-local

description "shadowsocks client"

start on (net-device-up IFACE=eth0 or net-device-up IFACE=wlan0)
stop on (net-device-down IFACE=eth0 and net-device-down IFACE=wlan0)

respawn

setuid nobody
setgid nogroup

exec ss-local -c /etc/shadowsocks-libev/client.json
</code></pre>

<p>为了client.json的安全：</p>

<pre><code class="bash">sudo chown -R root:nogroup /etc/shadowsocks-libev
sudo chmod 0750 /etc/shadowsocks-libev
sudo chmod 0640 /etc/shadowsocks-libev/client.json
</code></pre>

<p>启动客户端</p>

<pre><code class="bash">sudo start ss-local
</code></pre>

<p>最后，通过修改/etc/default/shadowsocks-libev的<code>START=no</code>禁止在客户机启动服务端程序——它在客户机没有作用。</p>

<pre><code class="bash">sudo service shadowsocks-libev stop
</code></pre>

<h3>Ubuntu 16.04</h3>

<p>安装包提供了systemd的服务模板/lib/systemd/system/shadowsocks-libev-local@.service</p>

<p>默认<code>ss-local</code>以root用户运行，可修改上述模板为nobody用户和nogroup组，从而提高安全：</p>

<pre><code>[Service]
Type=simple
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE
User=nobody
Group=nogroup
ExecStart=/usr/bin/ss-local -c /etc/shadowsocks-libev/%i.json.
</code></pre>

<p>注意，升级shadowsocks-libev，模板将回复原状，须再次修改。</p>

<pre><code class="bash">sudo systemctl daemon-reload
sudo systemctl enable shadowsocks-libev-local@client
sudo systemctl start shadowsocks-libev-local@client
</code></pre>

<p>注意，@client与client.json的基本名必须一致。</p>

<p>最后，禁用并停止服务端程序：</p>

<pre><code class="bash">sudo systemctl disable shadowsocks-libev
sudo systemctl stop shadowsocks-libev
</code></pre>

<h2>集群化</h2>

<p>类似SSH集群，多个shadowsocks也可以构建SOCKS 5集群，具体请参考《<a href="http://www.malike.net.cn/blog/2015/03/15/ssh-proxy-cluster/">SSH翻墙集群</a>》的“HAProxy的配置方法”。</p>

<p>实用中发现，<code>ss-local</code>不会因为shadowsocks服务器是否可达，而停止运行或拒绝HAProxy连接。</p>

<p>导致HAProxy无法探测shadowsocks服务器是否离线或不可访问，部分负载将失败或重试（浏览器），从而影响体验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nvm简介——Debian/Ubuntu中管理多版本Node.js]]></title>
    <link href="http://www.malike.net.cn/blog/2016/06/09/nvm-tutorial/"/>
    <updated>2016-06-09T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/06/09/nvm-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/creationix/nvm">nvm</a>是管理Node.js版本的工具，它支持在多个Node.js版本间切换。</p>

<h2>一、安装</h2>

<pre><code class="bash">git clone https://github.com/creationix/nvm.git ~/.nvm
cd ~/.nvm
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>激活nvm</p>

<pre><code class="bash">. ~/.nvm/nvm.sh
</code></pre>

<p>为了每次登录后自动激活nvm，需将<code>NMV_DIR</code>、<code>nvm.sh</code>和补齐加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">export NVM_DIR=~/.nvm
[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"
[ -r $NVM_DIR/bash_completion ] &amp;&amp; . $NVM_DIR/bash_completion
</code></pre>

<p>在国内，为了加速下述安装，可在bash的~/.bashrc（或zsh的~/.zshrc）加入：</p>

<pre><code class="bash">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Node.js版本</h3>

<pre><code class="bash">nvm ls-remote
</code></pre>

<p>除了Node.js官方版本，还支持io.js</p>

<h3>安装指定版本的Node.js</h3>

<pre><code class="bash">nvm install 10.16.2
</code></pre>

<p>它会自动下载指定版本的Node.js二进制包（不需要编译源码），安装在~/.nvm/versions/node</p>

<p>通常，最好安装最近的长周期版本：</p>

<pre><code class="bash">nvm install --lts
</code></pre>

<h3>卸载指定版本的Node.js</h3>

<pre><code class="bash">nvm uninstall 10.16.2
</code></pre>

<h3>设置shell的Node.js版本</h3>

<pre><code class="bash">nvm use 10.16.2
</code></pre>

<p>它将Node.js指定版本的bin路径加入PATH.</p>

<p>还原环境变量PATH</p>

<pre><code class="bash">nvm deactivate
</code></pre>

<h3>迁移npm至新版本的Node.js</h3>

<pre><code>nvm install node --reinstall-packages-from=node
</code></pre>

<p>或</p>

<pre><code>nvm install v10.16.2 --reinstall-packages-from=10.16.0
</code></pre>

<h3>.nvmrc</h3>

<p>它存储在工程根目录中，用于记录该工程依赖的Node.js版本</p>

<pre><code class="bash">echo 10.16.2 &gt; .nvmrc
</code></pre>

<p>进入工程目录（当前目录），运行</p>

<pre><code class="bash">nvm use
</code></pre>

<p>将根据.nvmrc指定shell的Nodejs版本</p>

<h2>三、升级nvm</h2>

<pre><code class="bash">cd $NVM_DIR
git fetch origin
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>升级完成后，需要重新激活nvm</p>

<pre><code class="bash">. $NVM_DIR/nvm.sh
</code></pre>

<h2>四、制作Docker镜像</h2>

<p>若不希望使用NodeJS的官方Docker镜像，可利用nvm创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node
ENV NODE_VERSION 10.16.2
ENV PATH /root/.nvm/versions/node/v$NODE_VERSION/bin:$PATH

RUN set -eux; \
    apt-get update; \
    apt-get install --no-install-recommends -y wget ca-certificates; \
    wget -O- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash; \
    apt-get remove --purge -y wget ca-certificates; \
    apt-get autoremove --purge -y; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/* /root/.nvm/.cache
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pyenv简介——Debian/Ubuntu中管理多版本Python]]></title>
    <link href="http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial/"/>
    <updated>2016-05-21T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yyuu/pyenv">pyenv</a>是管理Python版本的工具，它支持在多个Python版本间切换。</p>

<h2>一、安装</h2>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv.git ~/.pyenv
cd ~/.pyenv
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>将<code>PYENV_ROOT</code>和<code>pyenv init</code>加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">echo 'export PATH=~/.pyenv/bin:$PATH' &gt;&gt; ~/.bashrc
echo 'export PYENV_ROOT=~/.pyenv' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bashrc
echo 'export PYTHON_BUILD_MIRROR_URL="http://mirrors.sohu.com/python/"' &gt;&gt; ~/.bashrc
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Python版本</h3>

<pre><code class="python">pyenv install -l
</code></pre>

<p>除了Python官方版本，还支持</p>

<ul>
<li>anaconda</li>
<li>ironpython</li>
<li>jython</li>
<li>miniconda</li>
<li>pypy</li>
<li>stackless</li>
</ul>


<h3>安装指定版本的Python</h3>

<p>安装过程，实际为下载并编译指定版本的Python源码，故需系统安装：</p>

<pre><code class="bash">sudo apt-get install -y build-essential zlib1g-dev libssl-dev libffi-dev
</code></pre>

<p>还可选择安装：</p>

<pre><code class="bash">sudo apt-get install libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv install 3.6.8
pyenv rehash
</code></pre>

<ul>
<li>源码（如Python-3.6.8.tar.gz）缓存在 <code>.pyenv/cache</code> 目录中，在安装完后可手动删除。</li>
<li>Python版本安装在~/.pyenv/versions目录中。</li>
</ul>


<h3>卸载指定版本的Python</h3>

<pre><code class="bash">pyenv uninstall 3.6.8
</code></pre>

<h3>设置shell的Python版本</h3>

<pre><code class="bash">pyenv shell 3.6.8
</code></pre>

<p>等同于</p>

<pre><code class="bash">export PYENV_VERSION=3.6.8
</code></pre>

<p>清除<code>PYENV_VERSION</code></p>

<pre><code class="bash">pyenv shell --unset
</code></pre>

<h2>三、安装pyenv-virtualenv</h2>

<p>pyenv-virtual是pyenv的插件，它支持管理多个virtualenv</p>

<pre><code class="bash">git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.bashrc
</code></pre>

<h3>创建virtualenv</h3>

<pre><code class="bash">pyenv virtualenv 3.6.8 aiohttp-virtual-env
</code></pre>

<ul>
<li>创建aiohttp-virtual-env之前，须先安装Python 3.6.8（通过系统或pyenv安装）。</li>
<li>aiohttp-virtual-env存储在~/.pyenv/versions/3.6.8/envs目录中，且在~/.pyenv/versions目录中建立同名符号链接。</li>
</ul>


<h3>删除virtualenv</h3>

<pre><code class="bash">pyenv uninstall aiohttp-virtual-env
</code></pre>

<h3>列表virtualenv</h3>

<pre><code class="bash">pyenv virtualenvs
</code></pre>

<h3>激活/禁用virtualenv</h3>

<pre><code class="bash">pyenv activate aiohttp-virtual-env
pyenv deactivate
</code></pre>

<h3>迁移virtualenv</h3>

<p>将指定virtualenv，迁移至另一virtualenv，须安装pyenv插件pyenv-pip-migrate：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-pip-migrate.git ~/.pyenv/plugins/pyenv-pip-migrate
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv migrate aiohttp-virtual-env hello-virtual-env
</code></pre>

<h2>四、升级</h2>

<pre><code class="bash">cd $PYENV_ROOT
git fetch origin
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>更简单的办法为安装pyenv插件pyenv-update：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-update.git ~/.pyenv/plugins/pyenv-update
</code></pre>

<p>它不仅能更新pyenv，还能更新pyenv所有已安装的插件：</p>

<pre><code class="bash">pyenv update
</code></pre>

<h2>五、配置Upstart脚本</h2>

<p>若Python程序须通过Upstart启动，则其Upstart脚本可以类似：</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

script
        eval "$(pyenv init -)"
        exec ./&lt;app&gt;
end script
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<p>或</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

exec ./&lt;app&gt;
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>六、配置Systemd脚本</h2>

<p>若Python程序须通过Systemd启动，则其Systemd脚本类似：</p>

<pre><code class="ini">...

[Service]
...
User=&lt;username&gt;
Group=&lt;group&gt;
Environment="PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin"
Environment="PYENV_ROOT=/home/&lt;username&gt;/.pyenv"
Environment="PYENV_VERSION=&lt;python version or virtualenv name&gt;"
WorkingDirectory=&lt;app dir&gt;
ExecStart=&lt;app dir&gt;/&lt;app&gt;
...
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>七、制作Docker镜像</h2>

<p>若不希望使用Python的官方Docker镜像，可利用pyenv创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV PYTHON_BUILD_MIRROR_URL http://mirrors.sohu.com/python/
ENV PYENV_ROOT /root/.pyenv
ENV PYENV_VERSION 3.6.8
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN set -eux; \
    apt-get update; \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get install -y git wget build-essential zlib1g-dev libssl-dev libffi-dev libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev; \
    git clone --depth 1 https://github.com/pyenv/pyenv.git $PYENV_ROOT; \
    cd $PYENV_ROOT; \
    git checkout `git describe --abbrev=0 --tags`; \
    pyenv install 3.6.8; \
    apt-mark auto '.*' &gt; /dev/null; \
    [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists $PYENV_ROOT/cache/* /tmp/*
</code></pre>
]]></content>
  </entry>
  
</feed>
