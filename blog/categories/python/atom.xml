<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2021-08-15T13:26:55+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过 LIEF 修改 ELF 解决 glibc 兼容性问题]]></title>
    <link href="http://www.malike.net.cn/blog/2021/08/15/modify-elf-by-lief/"/>
    <updated>2021-08-15T21:25:15+00:00</updated>
    <id>http://www.malike.net.cn/blog/2021/08/15/modify-elf-by-lief</id>
    <content type="html"><![CDATA[<p>数月前，我读了 <a href="https://mp.weixin.qq.com/s/2NNqYGYcCo2TEX4yfqG0qQ">Linux 修改 ELF 解决 glibc 兼容性问题</a> ，颇受启发，但暂无用武之地。</p>

<p>最近，我遇到了几乎一样的问题，即 <code>clock_gettime</code> 兼容性。</p>

<h2>最小化问题</h2>

<p>为了将问题最小化，这里我以 <code>hello.c</code> 模拟该问题：</p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main() {
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &amp;ts);
    printf("%lu, %ld\n", ts.tv_sec, ts.tv_nsec);
    return 0;
}
</code></pre>

<p>在 Ubuntu 20.04 中，用系统内置 GCC 9.3.0 构建它：</p>

<pre><code class="bash">gcc -fno-stack-protector -o hello hello.c -s
</code></pre>

<ul>
<li><code>-fno-stack-protector</code> : 禁用 stack 保护特性。目的为最小化未定义符号，最小化问题场景。</li>
<li><code>-s</code> : 除去调试相关符号，目的同上。</li>
</ul>


<p>通过 <code>readelf -sV hello</code> 展示其符号：</p>

<pre><code>Symbol table '.dynsym' contains 8 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     .....
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND clock_gettime@GLIBC_2.17 (2)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (3)
     ......

Version symbols section '.gnu.version' contains 8 entries:
 Addr: 0x0000000000000526  Offset: 0x000526  Link: 6 (.dynsym)
  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.17)    3 (GLIBC_2.2.5)
  ......

Version needs section '.gnu.version_r' contains 1 entry:
 Addr: 0x0000000000000538  Offset: 0x000538  Link: 7 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 2
  0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 3
  0x0020:   Name: GLIBC_2.17  Flags: none  Version: 2
</code></pre>

<p>问题在于修改 <code>.gnu.version_r</code> 段偏移 <code>0x0020</code> 的相关值。回顾 <code>Elfxx_Vernaux</code> 结构：</p>

<pre><code class="c">typedef struct {
    Elfxx_Word    vna_hash;  // 库名称 (如 GLIBC_2.17) 的 hash 值
    Elfxx_Half    vna_flags;
    Elfxx_Half    vna_other; // .gnu.version 段中符号的版本值
    Elfxx_Word    vna_name;  // 库名称 (如 GLIBC_2.17) 为相对 .dynstr 段偏移
    Elfxx_Word    vna_next;  // 下一条记录相对本记录首地址的偏移
} Elfxx_Vernaux;
</code></pre>

<p>实际仅须修改 <code>vna_hash</code> 和 <code>vna_name</code> ，前者实为后者的校验和。</p>

<p>以下提供 2 种方法修改 <code>hello</code> 二进制文件，使其无须重编译就能运行于 RHEL/CentOS 6 中。</p>

<h2>通过 dd 修改</h2>

<pre><code class="bash"># 复制 hello 偏移 0x538 + 0x10 = 0x548 的 4 byte 至文件 glibc225_vna_hash ；
dd if=hello of=glibc225_vna_hash skip=$((16#548)) bs=1 count=4

# 复制 hello 偏移 0x538 + 0x10 + 0x08 = 0x550 的 4 byte 至文件 glibc225_vna_hash
dd if=hello of=glibc225_vna_name skip=$((16#550)) bs=1 count=4
</code></pre>

<ul>
<li><code>0x538</code> 为 <code>.gnu.version_r</code> 段首地址。</li>
<li><code>0x10</code> 为 <code>GLIBC_2.2.5</code> 记录的段偏移，即 <code>Elfxx_Vernaux::vna_hash</code> 偏移。</li>
<li><code>0x08</code> 为 <code>GLIBC_2.2.5</code> 记录内 <code>Elfxx_Vernaux::vna_name</code> 偏移。</li>
</ul>


<p>为保持 <code>hello</code> 不改变， 修改 <code>hello</code> 至 <code>hello-dd</code></p>

<pre><code class="bash">cp hello hello-dd

# 复制 glibc225_vna_hash 至 hello-dd 偏移 0x530 + 0x20 = 0x558
dd if=glibc225_vna_hash of=hello-dd seek=$((16#558)) bs=1 conv=notrunc

# 复制 glibc225_vna_name 至 hello-dd 偏移 0x530 + 0x20 + 0x08 = 0x560
dd if=glibc225_vna_name of=hello-dd seek=$((16#560)) bs=1 conv=notrunc
</code></pre>

<ul>
<li><code>0x20</code> 为 <code>GLIBC_2.1.7</code> 记录的段偏移，即 <code>Elfxx_Vernaux::vna_hash</code> 偏移。</li>
<li><code>0x08</code> 为 <code>GLIBC_2.1.7</code> 记录内 <code>Elfxx_Vernaux::vna_name</code> 偏移。</li>
</ul>


<p>通过 <code>readelf -sV hello</code> 观察修改是否生效：</p>

<pre><code>Symbol table '.dynsym' contains 8 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     ......
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND clock_gettime@GLIBC_2.2.5 (2)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (3)
     ......

Version symbols section '.gnu.version' contains 8 entries:
 Addr: 0x0000000000000526  Offset: 0x000526  Link: 4 (.dynsym)
  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   3 (GLIBC_2.2.5)
  ......

Version needs section '.gnu.version_r' contains 1 entry:
 Addr: 0x0000000000000538  Offset: 0x000538  Link: 26 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 2
  0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 3
  0x0020:   Name: GLIBC_2.2.5  Flags: none  Version: 2
</code></pre>

<p>最后，将 <code>librt.so.1</code> 添加至 <code>hello-dd</code> 的库依赖列表中。</p>

<pre><code class="bash">patchelf --add-needed librt.so.1 hello-dd
</code></pre>

<h2>通过 LIEF</h2>

<p><a href="https://lief.quarkslab.com/doc/latest/intro.html">LIEF</a> 是一个能分析和修改 ELF , PE , MachO 和 Android 格式的库，它提供了 C/C++ 和 Python 的 API.</p>

<p>以下通过 LIEF 的 Python API 达到上述同样的效果。</p>

<h3>安装</h3>

<pre><code class="bash">pip3 install lief
</code></pre>

<h3>写脚本</h3>

<p>创建 <code>lief-hello.py</code> :</p>

<pre><code class="python">import lief


binary = lief.parse('hello')
glibc225_aux = clock_gettime_aux = None

for i in binary.imported_symbols:
    # 查找 GLIBC_2.2.5 的 symbol_version_auxiliary 记录，
    if i.symbol_version.symbol_version_auxiliary.name == 'GLIBC_2.2.5':
        glibc225_aux = i.symbol_version.symbol_version_auxiliary
    # 查找 clock_gettime 的 symbol_version_auxiliary 记录，
    elif i.name == 'clock_gettime':
        clock_gettime_aux = i.symbol_version.symbol_version_auxiliary

# 复制 GLIBC_2.2.5 记录 name 和 hash 至 clock_gettime 记录对应字段中。
if glibc225_aux and clock_gettime_aux:
    clock_gettime_aux.name = glibc225_aux.name
    clock_gettime_aux.hash = glibc225_aux.hash
    binary.add_library('librt.so.1')  # 相当于 patchelf --add-needed librt.so.1
    binary.write('hello-lief')
</code></pre>

<p>以上 <code>symbol_version_auxiliary</code> 相当于前述 <code>Elfxx_Vernaux</code></p>

<h3>执行脚本</h3>

<p>执行 <code>python3 lief-hello.py</code> 将生成 <code>hello-lief</code> 。</p>

<p>通过 <code>readelf -sV hello-lief</code> 观察修改是否生效：</p>

<pre><code>Symbol table '.dynsym' contains 8 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     ......
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND clock_gettime@GLIBC_2.2.5 (2)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (3)
     ......

Version symbols section '.gnu.version' contains 8 entries:
 Addr: 0x0000000000002526  Offset: 0x002526  Link: 6 (.dynsym)
  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   3 (GLIBC_2.2.5)
  ......

Version needs section '.gnu.version_r' contains 1 entry:
 Addr: 0x0000000000002538  Offset: 0x002538  Link: 7 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 2
  0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 3
  0x0020:   Name: GLIBC_2.2.5  Flags: none  Version: 2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Python multiprocessing的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor/"/>
    <updated>2016-07-11T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor</id>
    <content type="html"><![CDATA[<p>虽然<a href="/blog/2016/04/20/python-gevent-actor/">基于Gevent的Actor</a>和<a href="/blog/2016/07/03/python-3-dot-5-async-actor/">基于Python 3.5异步的Actor</a>都支持并发（concurrent）计算（仅运行于单进程中），但是不支持并行（parallel）计算，即无法利用多核。</p>

<p>Python内置的multiprocessing模块不仅支持并行计算，而且与Gevent接口相似。所以，模仿Gevent的Actor实现multiprocessing的Actor并不困难。</p>

<h2>multiprocessing的Actor实现</h2>

<pre><code class="python">from multiprocessing import Process, Queue

try:
    from Queue import Empty
except ImportError:
    from queue import Empty


class Actor(Process):
    def __init__(self, receive_timeout=None):
        Process.__init__(self)
        self.inbox = Queue()
        self.receive_timeout = receive_timeout

    def send(self, message):
        self.inbox.put_nowait(message)

    def receive(self, message):
        raise NotImplemented()

    def handle_timeout(self):
        pass

    def run(self):
        self.running = True
        while self.running:
            try:
                message = self.inbox.get(True, self.receive_timeout)
            except Empty:
                self.handle_timeout()
            else:
                self.receive(message)
</code></pre>

<h2>基于message的扩展</h2>

<p>将并行Actor扩展为发布-订阅者模式，基本与Gevent的实现一样。</p>

<pre><code class="python">from message import observable

from actor import Actor


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>基于Publisher实现Ping-Pong，与Gevent的实现差异也不大。</p>

<p>不同的是它实际启动3个进程。除主进程外，每个actor分别运行于独立进程，从而实现多核计算。主进程监督2个actor进程运行，如启动、停止以及异常处理等。</p>

<pre><code class="python">import time

from publisher import Publisher


class Pinger(Publisher):
    def receive(self, message):
        print(message)
        time.sleep(2)
        self.publish('ping')

    def handle_timeout(self):
        print('pinger timeout')


class Ponger(Publisher):
    def receive(self, message):
        print(message)
        time.sleep(2)
        self.publish('ping')

    def handle_timeout(self):
        print('ponger timeout')


ping = Pinger('evt.ping', 1)
pong = Ponger('evt.pong', 1)

ping.subcribe(pong)
pong.subcribe(ping)
ping.start()
pong.start()

ping.publish('start')

pong.join()
ping.join()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Python 3.5异步的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor/"/>
    <updated>2016-07-03T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor</id>
    <content type="html"><![CDATA[<h2>Python 3.5异步模型</h2>

<p>Python 3.5推出了async/await语法，在语法层面简化了异步编程。官方库asyncio是应用async/await的途径。</p>

<p>Ubuntu 16.04默认安装Python 3.5，或者通过<a href="/blog/2016/05/21/pyenv-tutorial/">pyenv</a>安装它。</p>

<h2>异步Actor的实现</h2>

<p>基于asyncio，可以实现async actor.</p>

<pre><code class="python">import asyncio


class Actor(object):
    def __init__(self):
        self.inbox = asyncio.Queue()

    def send(self, message):
        self.inbox.put_nowait(message)

    async def receive(self, message):
        raise NotImplemented()

    async def run(self):
        self.running = True

        while self.running:
            message = await self.inbox.get()
            await self.receive(message)
</code></pre>

<p>上述代码的关键是通过asyncio.Queue异步接收消息，并异步处理接收到的消息。</p>

<p>通过这个类，实现Ping-Pong示例：</p>

<pre><code class="python">import asyncio

from actor import Actor


class Pinger(Actor):
    async def receive(self, message):
        print(message)
        pong.send('ping')
        await asyncio.sleep(3)


class Ponger(Actor):
    async def receive(self, message):
        print(message)
        ping.send('pong')
        await asyncio.sleep(3)


ping = Pinger()
pong = Ponger()

ping.send('start')

loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait((ping.run(), pong.run())))
loop.close()
</code></pre>

<p>该示例代码中，actor之间同步发送消息（asyncio.Queue.put_nowait），由于运行在单线程上，并不存在竞争。</p>

<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用asyncio.wait_for的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<pre><code class="python">import asyncio


class Actor(object):
    def __init__(self, receive_timeout=None):
        self.inbox = asyncio.Queue()
        self.receive_timeout = receive_timeout

    def send(self, message):
        self.inbox.put_nowait(message)

    async def receive(self, message):
        raise NotImplemented()

    async def handle_timeout(self):
        pass

    async def run(self):
        self.running = True

        while self.running:
            try:
                message = await asyncio.wait_for(self.inbox.get(),
                                                 self.receive_timeout)
            except asyncio.TimeoutError:
                await self.handle_timeout()
            else:
                await self.receive(message)
</code></pre>

<h2>基于message的扩展</h2>

<p>由于<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>仅支持Python 2，而且Google Code已经停止服务。</p>

<p>基于原代码基础上，我在GitHub创建<a href="https://github.com/likema/python-message">python-message</a>，并扩展支持Python 3.</p>

<p>新版本message，也可以通过pip安装：</p>

<pre><code class="bash">pip install https://github.com/likema/python-message/archive/master.zip
</code></pre>

<p>在此基础上，将异步Actor扩展为发布-订阅者模式。</p>

<pre><code class="python">from message import observable

from actor import Actor


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>基于Publisher实现Ping-Pong，从而解耦发送者与接收者，且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<pre><code class="python">import asyncio

from publisher import Publisher


class Pinger(Publisher):
    async def receive(self, message):
        print(message)
        await asyncio.sleep(3)
        self.publish('ping')

    async def handle_timeout(self):
        print('Pinger timeout')


class Ponger(Publisher):
    async def receive(self, message):
        print(message)
        await asyncio.sleep(3)
        self.publish('pong')

    async def handle_timeout(self):
        print('Ponger timeout')


ping = Pinger('evt.ping', 1)
pong = Ponger('evt.pong', 1)

ping.subcribe(pong)
pong.subcribe(ping)
ping.publish('start')

loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait((ping.run(), pong.run())))
loop.close()
</code></pre>

<h2>存在的问题</h2>

<p>相比<a href="/blog/2016/04/20/python-gevent-actor/">Gevent实现的Actor</a>，异步Actor并不透明支持所有的I/O函数，它仅支持基于asyncio实现的库，如<a href="http://aiohttp.readthedocs.io/en/stable/">aiohttp</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackabuse.com/python-async-await-tutorial/">Python async/await Tutorial</a></li>
<li><a href="https://github.com/mehmetkose/python3.5-async-crawler">python3.5-async-crawler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pyenv简介——Debian/Ubuntu中管理多版本Python]]></title>
    <link href="http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial/"/>
    <updated>2016-05-21T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yyuu/pyenv">pyenv</a>是管理Python版本的工具，它支持在多个Python版本间切换。</p>

<h2>一、安装</h2>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv.git ~/.pyenv
cd ~/.pyenv
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>将<code>PYENV_ROOT</code>和<code>pyenv init</code>加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">echo 'export PATH=~/.pyenv/bin:$PATH' &gt;&gt; ~/.bashrc
echo 'export PYENV_ROOT=~/.pyenv' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bashrc
echo 'export PYTHON_BUILD_MIRROR_URL="http://mirrors.sohu.com/python/"' &gt;&gt; ~/.bashrc
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Python版本</h3>

<pre><code class="python">pyenv install -l
</code></pre>

<p>除了Python官方版本，还支持</p>

<ul>
<li>anaconda</li>
<li>ironpython</li>
<li>jython</li>
<li>miniconda</li>
<li>pypy</li>
<li>stackless</li>
</ul>


<h3>安装指定版本的Python</h3>

<p>安装过程，实际为下载并编译指定版本的Python源码，故需系统安装：</p>

<pre><code class="bash">sudo apt-get install -y build-essential zlib1g-dev libssl-dev libffi-dev
</code></pre>

<p>还可选择安装：</p>

<pre><code class="bash">sudo apt-get install libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv install 3.6.8
pyenv rehash
</code></pre>

<ul>
<li>源码（如Python-3.6.8.tar.gz）缓存在 <code>.pyenv/cache</code> 目录中，在安装完后可手动删除。</li>
<li>Python版本安装在~/.pyenv/versions目录中。</li>
</ul>


<h3>卸载指定版本的Python</h3>

<pre><code class="bash">pyenv uninstall 3.6.8
</code></pre>

<h3>设置shell的Python版本</h3>

<pre><code class="bash">pyenv shell 3.6.8
</code></pre>

<p>等同于</p>

<pre><code class="bash">export PYENV_VERSION=3.6.8
</code></pre>

<p>清除<code>PYENV_VERSION</code></p>

<pre><code class="bash">pyenv shell --unset
</code></pre>

<h2>三、安装pyenv-virtualenv</h2>

<p>pyenv-virtual是pyenv的插件，它支持管理多个virtualenv</p>

<pre><code class="bash">git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.bashrc
</code></pre>

<h3>创建virtualenv</h3>

<pre><code class="bash">pyenv virtualenv 3.6.8 aiohttp-virtual-env
</code></pre>

<ul>
<li>创建aiohttp-virtual-env之前，须先安装Python 3.6.8（通过系统或pyenv安装）。</li>
<li>aiohttp-virtual-env存储在~/.pyenv/versions/3.6.8/envs目录中，且在~/.pyenv/versions目录中建立同名符号链接。</li>
</ul>


<h3>删除virtualenv</h3>

<pre><code class="bash">pyenv uninstall aiohttp-virtual-env
</code></pre>

<h3>列表virtualenv</h3>

<pre><code class="bash">pyenv virtualenvs
</code></pre>

<h3>激活/禁用virtualenv</h3>

<pre><code class="bash">pyenv activate aiohttp-virtual-env
pyenv deactivate
</code></pre>

<h3>迁移virtualenv</h3>

<p>将指定virtualenv，迁移至另一virtualenv，须安装pyenv插件pyenv-pip-migrate：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-pip-migrate.git ~/.pyenv/plugins/pyenv-pip-migrate
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv migrate aiohttp-virtual-env hello-virtual-env
</code></pre>

<h2>四、升级</h2>

<pre><code class="bash">cd $PYENV_ROOT
git fetch origin
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>更简单的办法为安装pyenv插件pyenv-update：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-update.git ~/.pyenv/plugins/pyenv-update
</code></pre>

<p>它不仅能更新pyenv，还能更新pyenv所有已安装的插件：</p>

<pre><code class="bash">pyenv update
</code></pre>

<h2>五、配置Upstart脚本</h2>

<p>若Python程序须通过Upstart启动，则其Upstart脚本可以类似：</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

script
        eval "$(pyenv init -)"
        exec ./&lt;app&gt;
end script
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<p>或</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

exec ./&lt;app&gt;
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>六、配置Systemd脚本</h2>

<p>若Python程序须通过Systemd启动，则其Systemd脚本类似：</p>

<pre><code class="ini">...

[Service]
...
User=&lt;username&gt;
Group=&lt;group&gt;
Environment="PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin"
Environment="PYENV_ROOT=/home/&lt;username&gt;/.pyenv"
Environment="PYENV_VERSION=&lt;python version or virtualenv name&gt;"
WorkingDirectory=&lt;app dir&gt;
ExecStart=&lt;app dir&gt;/&lt;app&gt;
...
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>七、制作Docker镜像</h2>

<p>若不希望使用Python的官方Docker镜像，可利用pyenv创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV PYTHON_BUILD_MIRROR_URL http://mirrors.sohu.com/python/
ENV PYENV_ROOT /root/.pyenv
ENV PYENV_VERSION 3.6.8
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN set -eux; \
    apt-get update; \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get install -y git wget build-essential zlib1g-dev libssl-dev libffi-dev libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev; \
    git clone --depth 1 https://github.com/pyenv/pyenv.git $PYENV_ROOT; \
    cd $PYENV_ROOT; \
    git checkout `git describe --abbrev=0 --tags`; \
    pyenv install 3.6.8; \
    apt-mark auto '.*' &gt; /dev/null; \
    [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists $PYENV_ROOT/cache/* /tmp/*
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[扩展Python Gevent的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor/"/>
    <updated>2016-04-20T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor</id>
    <content type="html"><![CDATA[<h2>什么是Actor模型？</h2>

<p><a href="https://en.wikipedia.org/wiki/Actor_model">Actor模型</a>（<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E8%88%87%E8%80%85%E6%A8%A1%E5%BC%8F">中文版</a>）是一种基于消息传递（message-passing）的并发（concurrent）计算模型。</p>

<p>它与OOP异同：</p>

<ul>
<li>它推崇“一切皆为Actor”，而OOP推崇“一切皆为Object”</li>
<li>表面上，Actor通过发送消息与其他Actor通信，OOP的Object通过发送消息与其他Object通信。实际上，前者为发送结构化的数据，而后者为调用对方的方法。</li>
<li>它的发送者与已经发送的消息解耦，它允许进行异步通信，从而实现发送者与接收者并发执行。而OOP的方法调用者（发送者）与方法被调用者（接收者）通常顺序执行，而且调用者与被调用者通常具有较强的耦合。</li>
<li>它的消息接收者是通过地址区分的，有时也被称作“邮件地址”。而OOP的Object通过引用（地址）来区分。</li>
<li>它着重消息传递，而OOP着重于类与对象。</li>
</ul>


<h2>Gevent的Actor实现</h2>

<p><a href="http://sdiehl.github.io/gevent-tutorial/">gevent</a>（<a href="http://xlambda.com/gevent-tutorial/">中文版</a>）是一个基于libev的并发库，它为各种并发和网络相关的任务提供了整洁的API。</p>

<p>其<a href="http://sdiehl.github.io/gevent-tutorial/#actors">Actors</a>（<a href="http://xlambda.com/gevent-tutorial/#actors">中文版</a>）章节已介绍了如何基于Greenlet和 Queue实现</p>

<p>该实现存在的问题：发送者与接收者紧耦合，发送者持有接收者的对象引用。</p>

<h2>解决办法</h2>

<p>在此基础上，我利用<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>库将其扩展为发布-订阅者模式。</p>

<pre><code class="python">from gevent.queue import Queue
from gevent import Greenlet
from message import observable


class Actor(Greenlet):
    def __init__(self):
        self.inbox = Queue()
        Greenlet.__init__(self)

    def send(self, message):
        self.inbox.put(message)

    def receive(self, message):
        raise NotImplemented()

    def _run(self):
        self.running = True

        while self.running:
            message = self.inbox.get()
            self.receive(message)


@observable
class Publisher(Actor):
    def __init__(self, subject):
        self.subject = subject
        Actor.__init__(self)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>如此，不仅将发送者与接收者解耦，而且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<p>类似Ping-Pong的示例，Pinger对象订阅了Ponger对象的evt.pong事件，Ponger对象订阅Pinger对象的evt.ping事件。</p>

<pre><code class="python">import gevent


class Pinger(Publisher):
    def receive(self, message):
        print(message)
        self.publish('ping')
        gevent.sleep(1)


class Ponger(Publisher):
    def receive(self, message):
        print(message)
        self.publish('pong')
        gevent.sleep(1)


ping = Pinger('evt.ping')
pong = Ponger('evt.pong')

ping.subcribe(pong)
pong.subcribe(ping)
ping.start()
pong.start()

ping.publish('start')
gevent.joinall([ping, pong])
</code></pre>

<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用gevent.queue.get的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<pre><code class="python">from gevent.queue import Queue, Empty
from gevent import Greenlet
from message import observable


class Actor(Greenlet):
    def __init__(self, receive_timeout=None):
        self.inbox = Queue()
        self.receive_timeout = receive_timeout
        Greenlet.__init__(self)

    def send(self, message):
        self.inbox.put(message)

    def receive(self, message):
        raise NotImplemented()

    def handle_timeout(self):
        pass

    def _run(self):
        self.running = True

        while self.running:
            try:
                message = self.inbox.get(True, self.receive_timeout)
            except Empty:
                self.handle_timeout()
            else:
                self.receive(message)


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>
]]></content>
  </entry>
  
</feed>
