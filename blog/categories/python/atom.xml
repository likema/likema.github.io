<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2019-08-17T16:42:43+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于Python multiprocessing的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor/"/>
    <updated>2016-07-11T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor</id>
    <content type="html"><![CDATA[<p>虽然<a href="/blog/2016/04/20/python-gevent-actor/">基于Gevent的Actor</a>和<a href="/blog/2016/07/03/python-3-dot-5-async-actor/">基于Python 3.5异步的Actor</a>都支持并发（concurrent）计算（仅运行于单进程中），但是不支持并行（parallel）计算，即无法利用多核。</p>

<p>Python内置的multiprocessing模块不仅支持并行计算，而且与Gevent接口相似。所以，模仿Gevent的Actor实现multiprocessing的Actor并不困难。</p>

<h2>multiprocessing的Actor实现</h2>

<pre><code class="python">from multiprocessing import Process, Queue

try:
    from Queue import Empty
except ImportError:
    from queue import Empty


class Actor(Process):
    def __init__(self, receive_timeout=None):
        Process.__init__(self)
        self.inbox = Queue()
        self.receive_timeout = receive_timeout

    def send(self, message):
        self.inbox.put_nowait(message)

    def receive(self, message):
        raise NotImplemented()

    def handle_timeout(self):
        pass

    def run(self):
        self.running = True
        while self.running:
            try:
                message = self.inbox.get(True, self.receive_timeout)
            except Empty:
                self.handle_timeout()
            else:
                self.receive(message)
</code></pre>

<h2>基于message的扩展</h2>

<p>将并行Actor扩展为发布-订阅者模式，基本与Gevent的实现一样。</p>

<pre><code class="python">from message import observable

from actor import Actor


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>基于Publisher实现Ping-Pong，与Gevent的实现差异也不大。</p>

<p>不同的是它实际启动3个进程。除主进程外，每个actor分别运行于独立进程，从而实现多核计算。主进程监督2个actor进程运行，如启动、停止以及异常处理等。</p>

<pre><code class="python">import time

from publisher import Publisher


class Pinger(Publisher):
    def receive(self, message):
        print(message)
        time.sleep(2)
        self.publish('ping')

    def handle_timeout(self):
        print('pinger timeout')


class Ponger(Publisher):
    def receive(self, message):
        print(message)
        time.sleep(2)
        self.publish('ping')

    def handle_timeout(self):
        print('ponger timeout')


ping = Pinger('evt.ping', 1)
pong = Ponger('evt.pong', 1)

ping.subcribe(pong)
pong.subcribe(ping)
ping.start()
pong.start()

ping.publish('start')

pong.join()
ping.join()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Python 3.5异步的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor/"/>
    <updated>2016-07-03T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor</id>
    <content type="html"><![CDATA[<h2>Python 3.5异步模型</h2>

<p>Python 3.5推出了async/await语法，在语法层面简化了异步编程。官方库asyncio是应用async/await的途径。</p>

<p>Ubuntu 16.04默认安装Python 3.5，或者通过<a href="/blog/2016/05/21/pyenv-tutorial/">pyenv</a>安装它。</p>

<h2>异步Actor的实现</h2>

<p>基于asyncio，可以实现async actor.</p>

<pre><code class="python">import asyncio


class Actor(object):
    def __init__(self):
        self.inbox = asyncio.Queue()

    def send(self, message):
        self.inbox.put_nowait(message)

    async def receive(self, message):
        raise NotImplemented()

    async def run(self):
        self.running = True

        while self.running:
            message = await self.inbox.get()
            await self.receive(message)
</code></pre>

<p>上述代码的关键是通过asyncio.Queue异步接收消息，并异步处理接收到的消息。</p>

<p>通过这个类，实现Ping-Pong示例：</p>

<pre><code class="python">import asyncio

from actor import Actor


class Pinger(Actor):
    async def receive(self, message):
        print(message)
        pong.send('ping')
        await asyncio.sleep(3)


class Ponger(Actor):
    async def receive(self, message):
        print(message)
        ping.send('pong')
        await asyncio.sleep(3)


ping = Pinger()
pong = Ponger()

ping.send('start')

loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait((ping.run(), pong.run())))
loop.close()
</code></pre>

<p>该示例代码中，actor之间同步发送消息（asyncio.Queue.put_nowait），由于运行在单线程上，并不存在竞争。</p>

<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用asyncio.wait_for的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<pre><code class="python">import asyncio


class Actor(object):
    def __init__(self, receive_timeout=None):
        self.inbox = asyncio.Queue()
        self.receive_timeout = receive_timeout

    def send(self, message):
        self.inbox.put_nowait(message)

    async def receive(self, message):
        raise NotImplemented()

    async def handle_timeout(self):
        pass

    async def run(self):
        self.running = True

        while self.running:
            try:
                message = await asyncio.wait_for(self.inbox.get(),
                                                 self.receive_timeout)
            except asyncio.TimeoutError:
                await self.handle_timeout()
            else:
                await self.receive(message)
</code></pre>

<h2>基于message的扩展</h2>

<p>由于<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>仅支持Python 2，而且Google Code已经停止服务。</p>

<p>基于原代码基础上，我在GitHub创建<a href="https://github.com/likema/python-message">python-message</a>，并扩展支持Python 3.</p>

<p>新版本message，也可以通过pip安装：</p>

<pre><code class="bash">pip install https://github.com/likema/python-message/archive/master.zip
</code></pre>

<p>在此基础上，将异步Actor扩展为发布-订阅者模式。</p>

<pre><code class="python">from message import observable

from actor import Actor


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>基于Publisher实现Ping-Pong，从而解耦发送者与接收者，且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<pre><code class="python">import asyncio

from publisher import Publisher


class Pinger(Publisher):
    async def receive(self, message):
        print(message)
        await asyncio.sleep(3)
        self.publish('ping')

    async def handle_timeout(self):
        print('Pinger timeout')


class Ponger(Publisher):
    async def receive(self, message):
        print(message)
        await asyncio.sleep(3)
        self.publish('pong')

    async def handle_timeout(self):
        print('Ponger timeout')


ping = Pinger('evt.ping', 1)
pong = Ponger('evt.pong', 1)

ping.subcribe(pong)
pong.subcribe(ping)
ping.publish('start')

loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait((ping.run(), pong.run())))
loop.close()
</code></pre>

<h2>存在的问题</h2>

<p>相比<a href="/blog/2016/04/20/python-gevent-actor/">Gevent实现的Actor</a>，异步Actor并不透明支持所有的I/O函数，它仅支持基于asyncio实现的库，如<a href="http://aiohttp.readthedocs.io/en/stable/">aiohttp</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackabuse.com/python-async-await-tutorial/">Python async/await Tutorial</a></li>
<li><a href="https://github.com/mehmetkose/python3.5-async-crawler">python3.5-async-crawler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pyenv简介——Debian/Ubuntu中管理多版本Python]]></title>
    <link href="http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial/"/>
    <updated>2016-05-21T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yyuu/pyenv">pyenv</a>是管理Python版本的工具，它支持在多个Python版本间切换。</p>

<h2>一、安装</h2>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv.git ~/.pyenv
cd ~/.pyenv
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>将<code>PYENV_ROOT</code>和<code>pyenv init</code>加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">echo 'export PATH=~/.pyenv/bin:$PATH' &gt;&gt; ~/.bashrc
echo 'export PYENV_ROOT=~/.pyenv' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bashrc
echo 'export PYTHON_BUILD_MIRROR_URL="http://mirrors.sohu.com/python/"' &gt;&gt; ~/.bashrc
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Python版本</h3>

<pre><code class="python">pyenv install -l
</code></pre>

<p>除了Python官方版本，还支持</p>

<ul>
<li>anaconda</li>
<li>ironpython</li>
<li>jython</li>
<li>miniconda</li>
<li>pypy</li>
<li>stackless</li>
</ul>


<h3>安装指定版本的Python</h3>

<p>安装过程，实际为下载并编译指定版本的Python源码，故需系统安装：</p>

<pre><code class="bash">sudo apt-get install -y build-essential zlib1g-dev libssl-dev libffi-dev
</code></pre>

<p>还可选择安装：</p>

<pre><code class="bash">sudo apt-get install libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv install 3.6.8
pyenv rehash
</code></pre>

<ul>
<li>源码（如Python-3.6.8.tar.gz）缓存在 <code>.pyenv/cache</code> 目录中，在安装完后可手动删除。</li>
<li>Python版本安装在~/.pyenv/versions目录中。</li>
</ul>


<h3>卸载指定版本的Python</h3>

<pre><code class="bash">pyenv uninstall 3.6.8
</code></pre>

<h3>设置shell的Python版本</h3>

<pre><code class="bash">pyenv shell 3.6.8
</code></pre>

<p>等同于</p>

<pre><code class="bash">export PYENV_VERSION=3.6.8
</code></pre>

<p>清除<code>PYENV_VERSION</code></p>

<pre><code class="bash">pyenv shell --unset
</code></pre>

<h2>三、安装pyenv-virtualenv</h2>

<p>pyenv-virtual是pyenv的插件，它支持管理多个virtualenv</p>

<pre><code class="bash">git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.bashrc
</code></pre>

<h3>创建virtualenv</h3>

<pre><code class="bash">pyenv virtualenv 3.6.8 aiohttp-virtual-env
</code></pre>

<ul>
<li>创建aiohttp-virtual-env之前，须先安装Python 3.6.8（通过系统或pyenv安装）。</li>
<li>aiohttp-virtual-env存储在~/.pyenv/versions/3.6.8/envs目录中，且在~/.pyenv/versions目录中建立同名符号链接。</li>
</ul>


<h3>删除virtualenv</h3>

<pre><code class="bash">pyenv uninstall aiohttp-virtual-env
</code></pre>

<h3>列表virtualenv</h3>

<pre><code class="bash">pyenv virtualenvs
</code></pre>

<h3>激活/禁用virtualenv</h3>

<pre><code class="bash">pyenv activate aiohttp-virtual-env
pyenv deactivate
</code></pre>

<h3>迁移virtualenv</h3>

<p>将指定virtualenv，迁移至另一virtualenv，须安装pyenv插件pyenv-pip-migrate：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-pip-migrate.git ~/.pyenv/plugins/pyenv-pip-migrate
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv migrate aiohttp-virtual-env hello-virtual-env
</code></pre>

<h2>四、升级</h2>

<pre><code class="bash">cd $PYENV_ROOT
git fetch origin
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>更简单的办法为安装pyenv插件pyenv-update：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-update.git ~/.pyenv/plugins/pyenv-update
</code></pre>

<p>它不仅能更新pyenv，还能更新pyenv所有已安装的插件：</p>

<pre><code class="bash">pyenv update
</code></pre>

<h2>五、配置Upstart脚本</h2>

<p>若Python程序须通过Upstart启动，则其Upstart脚本可以类似：</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

script
        eval "$(pyenv init -)"
        exec ./&lt;app&gt;
end script
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<p>或</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

exec ./&lt;app&gt;
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>六、配置Systemd脚本</h2>

<p>若Python程序须通过Systemd启动，则其Systemd脚本类似：</p>

<pre><code class="ini">...

[Service]
...
User=&lt;username&gt;
Group=&lt;group&gt;
Environment="PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin"
Environment="PYENV_ROOT=/home/&lt;username&gt;/.pyenv"
Environment="PYENV_VERSION=&lt;python version or virtualenv name&gt;"
WorkingDirectory=&lt;app dir&gt;
ExecStart=&lt;app dir&gt;/&lt;app&gt;
...
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>七、制作Docker镜像</h2>

<p>若不希望使用Python的官方Docker镜像，可利用pyenv创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV PYTHON_BUILD_MIRROR_URL http://mirrors.sohu.com/python/
ENV PYENV_ROOT /root/.pyenv
ENV PYENV_VERSION 3.6.8
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN set -eux; \
    apt-get update; \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get install -y git wget build-essential zlib1g-dev libssl-dev libffi-dev libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev; \
    git clone --depth 1 https://github.com/pyenv/pyenv.git $PYENV_ROOT; \
    cd $PYENV_ROOT; \
    git checkout `git describe --abbrev=0 --tags`; \
    pyenv install 3.6.8; \
    apt-mark auto '.*' &gt; /dev/null; \
    [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists $PYENV_ROOT/cache/* /tmp/*
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[扩展Python Gevent的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor/"/>
    <updated>2016-04-20T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor</id>
    <content type="html"><![CDATA[<h2>什么是Actor模型？</h2>

<p><a href="https://en.wikipedia.org/wiki/Actor_model">Actor模型</a>（<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E8%88%87%E8%80%85%E6%A8%A1%E5%BC%8F">中文版</a>）是一种基于消息传递（message-passing）的并发（concurrent）计算模型。</p>

<p>它与OOP异同：</p>

<ul>
<li>它推崇“一切皆为Actor”，而OOP推崇“一切皆为Object”</li>
<li>表面上，Actor通过发送消息与其他Actor通信，OOP的Object通过发送消息与其他Object通信。实际上，前者为发送结构化的数据，而后者为调用对方的方法。</li>
<li>它的发送者与已经发送的消息解耦，它允许进行异步通信，从而实现发送者与接收者并发执行。而OOP的方法调用者（发送者）与方法被调用者（接收者）通常顺序执行，而且调用者与被调用者通常具有较强的耦合。</li>
<li>它的消息接收者是通过地址区分的，有时也被称作“邮件地址”。而OOP的Object通过引用（地址）来区分。</li>
<li>它着重消息传递，而OOP着重于类与对象。</li>
</ul>


<h2>Gevent的Actor实现</h2>

<p><a href="http://sdiehl.github.io/gevent-tutorial/">gevent</a>（<a href="http://xlambda.com/gevent-tutorial/">中文版</a>）是一个基于libev的并发库，它为各种并发和网络相关的任务提供了整洁的API。</p>

<p>其<a href="http://sdiehl.github.io/gevent-tutorial/#actors">Actors</a>（<a href="http://xlambda.com/gevent-tutorial/#actors">中文版</a>）章节已介绍了如何基于Greenlet和 Queue实现</p>

<p>该实现存在的问题：发送者与接收者紧耦合，发送者持有接收者的对象引用。</p>

<h2>解决办法</h2>

<p>在此基础上，我利用<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>库将其扩展为发布-订阅者模式。</p>

<pre><code class="python">from gevent.queue import Queue
from gevent import Greenlet
from message import observable


class Actor(Greenlet):
    def __init__(self):
        self.inbox = Queue()
        Greenlet.__init__(self)

    def send(self, message):
        self.inbox.put(message)

    def receive(self, message):
        raise NotImplemented()

    def _run(self):
        self.running = True

        while self.running:
            message = self.inbox.get()
            self.receive(message)


@observable
class Publisher(Actor):
    def __init__(self, subject):
        self.subject = subject
        Actor.__init__(self)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>如此，不仅将发送者与接收者解耦，而且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<p>类似Ping-Pong的示例，Pinger对象订阅了Ponger对象的evt.pong事件，Ponger对象订阅Pinger对象的evt.ping事件。</p>

<pre><code class="python">import gevent


class Pinger(Publisher):
    def receive(self, message):
        print(message)
        self.publish('ping')
        gevent.sleep(1)


class Ponger(Publisher):
    def receive(self, message):
        print(message)
        self.publish('pong')
        gevent.sleep(1)


ping = Pinger('evt.ping')
pong = Ponger('evt.pong')

ping.subcribe(pong)
pong.subcribe(ping)
ping.start()
pong.start()

ping.publish('start')
gevent.joinall([ping, pong])
</code></pre>

<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用gevent.queue.get的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<pre><code class="python">from gevent.queue import Queue, Empty
from gevent import Greenlet
from message import observable


class Actor(Greenlet):
    def __init__(self, receive_timeout=None):
        self.inbox = Queue()
        self.receive_timeout = receive_timeout
        Greenlet.__init__(self)

    def send(self, message):
        self.inbox.put(message)

    def receive(self, message):
        raise NotImplemented()

    def handle_timeout(self):
        pass

    def _run(self):
        self.running = True

        while self.running:
            try:
                message = self.inbox.get(True, self.receive_timeout)
            except Empty:
                self.handle_timeout()
            else:
                self.receive(message)


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python常量]]></title>
    <link href="http://www.malike.net.cn/blog/2013/11/03/python-constants/"/>
    <updated>2013-11-03T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2013/11/03/python-constants</id>
    <content type="html"><![CDATA[<p>与C/C++不同，Python在语法上并没有定义常量，尽管<a href="/blog/2013/07/25/pep8-summary/">PEP 8</a>定义了常量的命名规范为大写字母和下划线组成。</p>

<p>在实际项目中，常量首次赋值后， 无法阻止其他代码对其进行修改或删除。</p>

<h2>现存的办法</h2>

<p>幸运的是该问题在2001年就有人给出了解决方案<a href="http://code.activestate.com/recipes/65207-constants-in-python/">Constants in Python</a>，基本内容如下：</p>

<pre><code class="python">class _const:
    class ConstError(TypeError):
        pass

    def __setattr__(self, name, value):
        if self.__dict__.has_key(name):
            raise self.ConstError, "Can't rebind const instance attribute (%s)" % name

        self.__dict__[name] = value

import sys
sys.modules[__name__] = _const()
</code></pre>

<p>其大致含义为：</p>

<ul>
<li>通过_const的__setattr__对象方法判断该对象是否存在属性name，若存在则抛出自定义异常ConstError，否则创建该属性。</li>
<li>将_const实例化的对象赋值sys.modules[__name__]，const模块被绑定成_const对象。__name__在首次载入const过程中为'const'，而<a href="http://docs.python.org/2.7/library/sys.html#sys.modules">sys.modules</a>是模块名与已加载模块的dict。</li>
</ul>


<p>如何使用const模块呢？</p>

<pre><code class="python">import const
const.magic = 23
</code></pre>

<p>若再次赋值const.magic，</p>

<pre><code class="python">const.magic = 88
</code></pre>

<p>则将抛出ConstError的异常。</p>

<h2>如何避免常量被删除？</h2>

<p>实际项目中，常量并不希望被其他代码删除。在_const类中加入：</p>

<pre><code class="python">    def __delattr__(self, name):
        if self.__dict__.has_key(name):
            raise self.ConstError, "Can't unbind const const instance attribute (%s)" % name

        raise AttributeError, "const instance has no attribute '%s'" % name
</code></pre>

<p>如此，删除已定义的常量（假设const.magic已经赋值）：</p>

<pre><code class="python">del const.magic
</code></pre>

<p>则将抛出ConstError的异常。</p>

<h2>配置文件与常量</h2>

<p>实际项目中，为了让应用程序灵活部署，一般会用配置文件存储应用程序的各种参数；而这些参数通常都以常量语义存在于应用程序中。</p>

<p>在上述代码基础上，根据应用程序的实际情况将常量划分为3类：</p>

<ul>
<li>特殊含义的数值或字符串，如 ETC_FSTAB = &ldquo;/etc/fstab&rdquo; 。其作用为

<ul>
<li>避免程序中到处出现类似特殊值，因为人为输入特殊值的低级错误将耗费不必要的调试/测试时间</li>
<li>另一方面, 神秘数值（magic number），如 LUN_BLOCK_SIZE = 4096，将影响程序的可读性。</li>
</ul>
</li>
<li>应用程序参数的默认值，如 URLOPEN_DEFAULT_TIMEOUT = 15 。其作用主要为配置文件参数的默认值。</li>
<li>通过配置文件载入的参数，如通过<a href="http://docs.python.org/2/library/configparser.html#ConfigParser.SafeConfigParser">ConfigParser.SafeConfigParser</a>解析形如ini文件的参数。</li>
</ul>


<p>第1和2类常量作为_const类的类属性，第3类常量可以在__init__方法中初始化。如：</p>

<pre><code class="python">class _const:
    ETC_FSTAB = "/etc/fstab"
    LUN_BLOCK_SIZE = 4096
    URLOPEN_DEFAULT_TIMEOUT = 15

    def __init__(self):
        conf = ConfigParser.SafeConfigParser()
        conf.read(self.CONF_PATH)

        try:
            self.URLOPEN_TIMEOUT = conf.getint("DEFAULT", "urlopen_timeout")
        except:
            self.URLOPEN_TIMEOUT = self.URLOPEN_DEFAULT_TIMEOUT

    ... ...
</code></pre>

<p>某些情况下，应用程序可能并不希望const模块在被外部调用时绑定新属性（常量），实现如下：</p>

<pre><code class="python">    def __init__(self):
        # Constant definition area

        _const.__setattr__ = _const._setattr_impl

    def _setattr_impl(self, name, value):
        raise self.ConstError, "Can't bind const instance attribute (%s)" % name
</code></pre>

<p>其原理为_const对象初始化完成后将__setattr__设置为禁止绑定属性的实现。若在_const类中实现__setattr__为禁止绑定属性，则__init__也将无法初始化（绑定）对象属性。</p>

<h2>存在的小问题</h2>

<p>该问题并不影响该解决方案的使用，具体请参考:</p>

<p><a href="http://stackoverflow.com/questions/5365562/why-is-the-value-of-name-changing-after-assignment-to-sys-modules-name">http://stackoverflow.com/questions/5365562/why-is-the-value-of-name-changing-after-assignment-to-sys-modules-name</a></p>
]]></content>
  </entry>
  
</feed>
