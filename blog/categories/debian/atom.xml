<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2016-04-30T09:14:36+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rinse简介——Debian/Ubuntu中创建RPM安装环境]]></title>
    <link href="http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial/"/>
    <updated>2014-07-15T12:34:58+00:00</updated>
    <id>http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://collab-maint.alioth.debian.org/rinse/">Rinse</a>是一个Debian环境中创建RPM发行版本（如CentOS，Scientific Linux和openSUSE）的工具。你可以利用它轻松创建各种RPM发行版本的chroot环境。</p>

<p>以下基于Ubuntu 12.04 amd64，主要以创建CentOS 6 x86_64为例。</p>

<h2>安装Rinse</h2>

<pre><code class="sh">sudo apt-get install -y rinse
</code></pre>

<h2>创建CentOS 6</h2>

<pre><code class="sh">sudo rinse --distribution centos-6 --arch amd64 --directory centos-6
</code></pre>

<p>运行该命令将创建CentOS 6 amd64于当前工作目录的centos-6目录中。其中，</p>

<ul>
<li>&ndash;distribution指定发行版本，类似还可以centos-{4,5}， fedora-core-{4,5,6,7,8,9}和opensuse-{10.1,10.2,10.3,11.0,11.1,12.1}等。可以下述命令获取：</li>
</ul>


<pre><code class="sh">rinse --list-distributions
</code></pre>

<p>具体对应于/etc/rinse/*.packages的模板名，它们主要包含RPM包列表。换一句话说，你根据需要定制自己的模板。另一方面，你也可以通过&ndash;pkgs-dir指定不同于/etc/rinse的模板目录。</p>

<ul>
<li>&ndash;arch指定架构，amd64表示64位架构，i386表示32位架构。缺省为i386.</li>
<li>&ndash;directory指定为安装目录，安装结束后便可以chroot该目录了。</li>
</ul>


<p>另外，需要额外安装某些包，可以通过指定&ndash;add-pkg-list来完成。</p>

<h2>配置RPM缓存</h2>

<p>rinse默认使用/var/rinse/cache作为缓存目录，它大大缩短了重复运行同样命令的时间。具体通过：</p>

<ul>
<li>&ndash;cache 0指禁用缓存，缺省为1</li>
<li>&ndash;cache-dir指定不同于/var/rinse/cache作为缓存目录。</li>
<li>&ndash;clean-cache指清楚缓存</li>
</ul>


<h2>定制安装后执行脚本</h2>

<p>&ndash;after-post-install, &ndash;before-post-install和&ndash;post-install顾名思义，需要指出的是&ndash;post-install默认执行/usr/lib/rinse/<distribution>/post-install.sh.</p>

<h2>如何提高安装速度？</h2>

<p>通过修改/etc/rinse/rinse.conf中对应发行版的镜像地址可以加速安装，如CentOS 6 x86_64的镜像地址可以修改为</p>

<pre><code>http://centos.ustc.edu.cn/centos/6/os/x86_64/CentOS/
</code></pre>

<p>也可以通过&ndash;config指定不同于/etc/rinse/rinse.conf的配置文件。</p>

<p>若内网存在HTTP cache服务器（如Squid)，还可以设置环境变量http_proxy来缓存rpm以及加速安装，如：</p>

<pre><code class="sh">sudo http_proxy=http://&lt;http proxy address&gt; rinse --distribution centos-6 --arch amd64 --directory centos-6
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-buildpackage示例（二）]]></title>
    <link href="http://www.malike.net.cn/blog/2012/10/23/git-buildpackage-2/"/>
    <updated>2012-10-23T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2012/10/23/git-buildpackage-2</id>
    <content type="html"><![CDATA[<p>在<a href="/blog/2012/02/19/git-buildpackage-1/">《git-buildpackage示例（一）》</a>中，我介绍了如何利用git-buildpackage为Ubuntu已有包做一个补丁包的办法。</p>

<p>当时，我的补丁是基于tolua 5.1.3版本。一段时间后，tolua的作者释放了5.1.4版本。问题出现了，如何将我的补丁合并到5.1.4版本中呢？</p>

<p>下面我将继续使用git-buildpackage来解决合并上游新版本的问题：</p>

<ul>
<li>下载tolua 5.1.4源码包（假设放在git工作目录上层）：</li>
</ul>


<pre><code class="sh">wget http://www.tecgraf.puc-rio.br/~celes/tolua/tolua-5.1.4.tar.gz
cd tolua
git-import-orig -u 5.1.4 ../tolua-5.1.4.tar.gz
</code></pre>

<ul>
<li>手动解决遇到的冲突（如src/bin/Makefile）并提交更新：</li>
</ul>


<pre><code class="sh">git commit
</code></pre>

<ul>
<li>这时，运行</li>
</ul>


<pre><code class="sh">git log --format=%d:%s
</code></pre>

<p>输出：</p>

<pre><code class="plain"> (HEAD, master):Merge commit 'upstream/5.1.4'
 (upstream/5.1.4, upstream):Imported Upstream version 5.1.4
 (debian/5.1.3-2):Fix relocation R_X86_64_32 against '.rodata' can not be used when making a shared object
 (debian/5.1.3-1):Imported Debian patch 5.1.3-1
 (upstream/5.1.3):Imported Upstream version 5.1.3
</code></pre>

<p>upstream/5.1.4分支被创建，且将其合并到master分支中。如此，master分支合并完毕，接下来将合并debian的patches。</p>

<ul>
<li>重整patch-queue：</li>
</ul>


<pre><code class="sh">gbp-pq rebase
</code></pre>

<p>手动解决遇到的冲突：</p>

<pre><code class="sh">git rm -f src/bin/toluabind.c
git rebase --continue
</code></pre>

<ul>
<li>导出patch-queue（至master分支）</li>
</ul>


<pre><code class="sh">git clean -df
gbp-pq export
</code></pre>

<ul>
<li>指定版本号5.1.4-1自动生成snapshot的debian/changelog：</li>
</ul>


<pre><code class="sh">git-dch -a -S -N 5.1.4-1
git add debian/changelog
git add debian/patches/0001-mkdir-for-tolua-lib-archive-and-remove-temp-files.patch
git commit -m "Update patches from debian/5.1.3-1"
</code></pre>

<p>测试构建新的deb包。为了避免污染当前环境，这里指定git首先导出源码至../tolua-build目录：</p>

<pre><code class="sh">git-buildpackage --git-export-dir=../tolua-build --git-ignore-new
</code></pre>

<ul>
<li>生成release的版本信息，并构建release的deb包：</li>
</ul>


<pre><code class="sh">git-dch -a -R
git ci --amend
git tag debian/5.1.4-1
git-buildpackage --git-export-dir=../tolua-build --git-ignore-new
</code></pre>

<p>到此为止，我已经演示了git-buildpackage合并上游版本的过程。不难发现，git-buildpackage充分利用了git的特点，在很大程度上简化了补丁开发和维护的过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-buildpackage示例（一）]]></title>
    <link href="http://www.malike.net.cn/blog/2012/02/19/git-buildpackage-1/"/>
    <updated>2012-02-19T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2012/02/19/git-buildpackage-1</id>
    <content type="html"><![CDATA[<p>在《为tolua的deb包作一个补丁》中，我介绍了如何利用quilt为Ubuntu已有包做一个补丁包的办法。可以看出quilt具有一定的版本管理能力，然而与流行版本管理系统相比，功能较弱也不灵活。</p>

<p>从<a href="http://www.debian.org/doc/manuals/maint-guide/">Debian New Maintainers' Guide</a>中，了解到deb包的制作和维护管理已经与现有流行版本管理系统结合在了一块，其中一款工具为git-buildpackage，它将包制作和维护，特别是第三方补丁包维护，与git紧密的结合了起来。</p>

<p>下面仍然以tolua的补丁制作为例，一步一步展示git-buildpackage的基本操作。</p>

<ul>
<li>安装必要的工具：</li>
</ul>


<pre><code class="sh">sudo apt-get install git-buildpackage build-essential debhelper quilt
</code></pre>

<ul>
<li>下载libtolua-dev的源码（建立upstream目录单独存放Ubuntu的deb源码包是为了保证清洁和正确）：</li>
</ul>


<pre><code class="sh">mkdir upstream
apt-get source libtolua-dev
</code></pre>

<ul>
<li>导入upsteam的dsc文件（将生成与目录upstream同级的目录tolua）：</li>
</ul>


<pre><code class="sh">cd ..
git-import-dsc upstream/tolua_5.1.3-1.dsc
cd tolua
</code></pre>

<p>这时，运行</p>

<pre><code class="sh">git log --format=%d:%s
</code></pre>

<p>输出：</p>

<pre><code class="plain"> (HEAD, debian/5.1.3-1, master):Imported Debian patch 5.1.3-1
 (upstream/5.1.3, upstream):Imported Upstream version 5.1.3
</code></pre>

<p>从下至上，首条提交导入了tolua 5.1.3的源码，次条提交导入了deb包维护者的deb包文件(debian/*)；并且建立了upstream和master两个分支，标签upstream/5.1.3位于upstream分支上，标签debian/5.1.3-1位于master分支头部。</p>

<p>此外，upstream分支用于维护源码作者的发布版本更新情况，master分支用于维护deb包描述文件及其补丁文件。git-buildpackage工具集的正确运行将依赖于标签upstream/5.1.3和debian/5.1.3-1，不能随意删改。</p>

<ul>
<li>导入quilt patches到patch queue中——创建patch-queue/master分支，并将debian/patches/*逐一变成该分支的提交，并自动切换到该分支上：</li>
</ul>


<pre><code class="sh">gbp-pq import
</code></pre>

<ul>
<li>执行make后发现构建目标libtolua.a的生成目录lib不存在，这是git只针对文件做版本，所以upstream导入git时，该目录被忽略了。为此，我将src/lib/Makefile中</li>
</ul>


<pre><code class="makefile">$T: $(OBJS)
    $(AR) $@ $(OBJS)
    $(RANLIB) $@
</code></pre>

<p>修改为：</p>

<pre><code class="makefile">$T: $(OBJS)
    mkdir -p $(@D)
    $(AR) $@ $(OBJS)
    $(RANLIB) $@
</code></pre>

<p>这样，它将在每次构建该目标时，创建该目标所在目录。更进一步不难发现，src/bin/tolua_lua.o和src/bin/toluabind.c为受版本控制的中间文件，将影响构建的正确运行。为此，删除这两个文件并提交日志。</p>

<pre><code class="sh">git rm -f src/bin/tolua_lua.o src/bin/toluabind.c
git commit -a -m "mkdir for tolua lib archive and remove temp files"
</code></pre>

<p>此时，可以正确make该工程了。</p>

<ul>
<li>修复x86_64链接问题，将config文件中，如下内容</li>
</ul>


<pre><code class="makefile">CFLAGS= -g $(WARN) $(INC)
CPPFLAGS= -g $(WARN) $(INC)
</code></pre>

<p>替换为</p>

<pre><code class="makefile">CFLAGS= -fPIC -O2 -pipe -g $(WARN) $(INC)
CPPFLAGS= -fPIC -O2 -pipe  -g $(WARN) $(INC)
</code></pre>

<p>并提交日志：</p>

<pre><code class="sh">git commit -a -m "Fix relocation R_X86_64_32 against '.rodata' erro for shared object."
</code></pre>

<ul>
<li>导出patch-queue——将其分支提交逐一转化为debian/patches目录下的补丁文件（为保证正确运行，清理掉中间文件）：</li>
</ul>


<pre><code class="sh">git clean -df
gbp-pq export
</code></pre>

<ul>
<li>指定版本号5.1.3-2自动生成snapshot的debian/changelog：</li>
</ul>


<pre><code class="sh">git-dch -S -a -N 5.1.3-2
</code></pre>

<p>debian/changelog的新增内容如下：</p>

<pre><code class="plain">tolua (5.1.3-2~1.gbp896bed) UNRELEASED; urgency=low

  ** SNAPSHOT build @896bede5a4eb6f3967cdfe94ea2ef419235e7183 **

  * UNRELEASED

 -- Like Ma   Sun, 19 Feb 2012 01:07:06 +0800
</code></pre>

<p>提交相关修改：</p>

<pre><code class="sh">git add debian/changelog \
        debian/patches/series \
        debian/patches/0001-mkdir-for-tolua-lib-archive-and-remove-temp-files.patch \
        debian/patches/0002-Fix-relocation-R_X86_64_32-against-.rodata-can-not-b.patch
git commit -m "Fix relocation R_X86_64_32 against '.rodata' error for shared object"
</code></pre>

<p>测试构建新的deb包。为了避免污染当前环境，这里指定git首先导出源码至../tolua-build目录：</p>

<pre><code class="sh">git-buildpackage --git-export-dir=../tolua-build --git-ignore-new
</code></pre>

<p>可以看出，上述debian/changelog新增信息，除版本号5.1.3-2外（新包的版本信息），并无实在意义，仅用于测试deb包的构建。</p>

<ul>
<li>生成release的版本信息，并构建release的deb包：</li>
</ul>


<pre><code class="sh">git checkout src/bin/tolua_lua.o src/bin/toluabind.c
git-dch -R -a
git commit -a --amend
git-buildpackage --git-export-dir=../tolua-build --git-ignore-new
git tag debian/5.1.3-2
</code></pre>

<p>注意，前面仅仅在patch-queue分支上删除的两个中间文件，并未在master分支上删除它们，所以重新checkout它们以保证后续构建的正确运行。</p>

<p>这里的关键命令git-dch -R -a自动生成了release的版本信息，当然我们也可以根据需要再修改它们。最后一条命令，给master分支的HEAD加上标签debian/5.1.3-2，git-buildpackage将依赖于它才能继续正确工作。</p>

<p>到此为止，我已经演示了git-buildpackage的补丁制作过程，可以观察../tolua-build目录中生成的文件，它们就是我们可以用于发布的deb包源码文件，形式上与ubuntu/debian中apt-get source得到的一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为tolua的deb包作一个补丁]]></title>
    <link href="http://www.malike.net.cn/blog/2011/10/31/tolua-deb-patch/"/>
    <updated>2011-10-31T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2011/10/31/tolua-deb-patch</id>
    <content type="html"><![CDATA[<p>近日在学习tolua时发现在Kubuntu 11.10 amd64平台下将其链接到so时报告如下错误：</p>

<blockquote><p>relocation R_X86_64_32 against &lsquo;.rodata&rsquo; can not be used when making a shared object; recompile with -fPIC</p></blockquote>

<p>为此，我决定在其原deb基础上加一个补丁，这样生成的新包可以安装到其他开发机器上，省去了每次重编译tolua的重复劳动。</p>

<p>为构建和修改deb安装必要的工具（配置quilt）：</p>

<pre><code>sudo apt-get install build-essential debhelper quilt
</code></pre>

<p>下载libtolua-dev的源码，创建补丁add-fpic-O2-for-amd64.patch，并将config文件加入其中：</p>

<pre><code>apt-get source libtolua-dev
cd tolua-5.1.3
mkdir -p debian/patches
quilt new add-fpic-O2-for-amd64.patch
quilt add config
</code></pre>

<p>将config文件中，如下内容</p>

<pre><code class="makefile">CFLAGS = -g $(WARN) $(INC)
CPPFLAGS = -g $(WARN) $(INC)
</code></pre>

<p>替换为</p>

<pre><code class="makefile">CFLAGS = -fPIC -O2 -pipe -g $(WARN) $(INC)
CPPFLAGS = -fPIC -O2 -pipe  -g $(WARN) $(INC)
CFLAGS = -fPIC -O2 -pipe -g $(WARN) $(INC)
</code></pre>

<p>生成补丁add-fpic-O2-for-amd64.patch</p>

<pre><code>quilt refresh
</code></pre>

<p>为补丁增加描述信息</p>

<pre><code>quilt header -e
</code></pre>

<p>其具体内容如下：</p>

<pre><code>Description: Fix relocation R_X86_64_32 against '.rodata' error for shared object.
Author: Like Ma &lt;likemartinma@gmail.com&gt;

  * config: add -fPIC -O2 -pipe to CFLAGS and CPPFLAGS
</code></pre>

<p>通过执行</p>

<pre><code>dch -R
</code></pre>

<p>在debian/changelog顶部增加日志信息：</p>

<pre><code>tolua (5.1.3-2) unstable; urgency=low

  * Fix relocation R_X86_64_32 against '.rodata' error for shared object.

-- Like Ma &lt;likemartinma@gmail.com&gt; Mon, 31 Oct 2011 15:23:09 +0800
</code></pre>

<p>构建libtolua-dev_5.1.3-2_amd64.deb:</p>

<pre><code>dpkg-buildpackage -d -uc -us -rfakeroot
</code></pre>
]]></content>
  </entry>
  
</feed>
