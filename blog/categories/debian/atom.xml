<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2019-08-18T19:00:18+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rbenv简介——Debian/Ubuntu中管理多版本Ruby]]></title>
    <link href="http://www.malike.net.cn/blog/2019/08/17/rbenv-tutorial/"/>
    <updated>2019-08-17T16:40:54+00:00</updated>
    <id>http://www.malike.net.cn/blog/2019/08/17/rbenv-tutorial</id>
    <content type="html"><![CDATA[<h2>一、安装</h2>

<pre><code class="bash">git clone git://github.com/rbenv/rbenv.git ~/.rbenv
git clone git://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<p>在国内，为了加速下述安装：</p>

<pre><code class="bash">git clone https://github.com/andorchen/rbenv-taobao-mirror.git ~/.rbenv/plugins/rbenv-taobao-mirror
</code></pre>

<p>激活rbenv</p>

<pre><code class="bash">eval "$(~/.rbenv/bin/rbenv init)"
</code></pre>

<p>为了每次登录后自动激活rbenv，需将<code>NMV_DIR</code>、<code>nvm.sh</code>和补齐加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">export PATH=~/.rbenv/shims:~/.rbenv/bin:$PATH
eval "$(rbenv init -)"
</code></pre>

<p>验证是否安装正确：</p>

<pre><code class="bash">curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
</code></pre>

<p>或</p>

<pre><code class="bash">wget -qO- https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
</code></pre>

<p>输出类似：</p>

<pre><code>Checking for `rbenv' in PATH: /root/.rbenv/bin/rbenv
Checking for rbenv shims in PATH: OK
Checking `rbenv install' support: /root/.rbenv/plugins/ruby-build/bin/rbenv-install (ruby-build 20190615-9-gf3f4193)
Counting installed Ruby versions: none
  There aren't any Ruby versions installed under `/root/.rbenv/versions'.
  You can install Ruby versions like so: rbenv install 2.2.4
Checking RubyGems settings: OK
Auditing installed plugins: OK
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Ruby版本</h3>

<pre><code class="bash">rbenv install -l
</code></pre>

<p>除了Ruby官方版本，还支持RBX和JRuby等。</p>

<h3>安装指定版本的Ruby</h3>

<p>安装过程，实际为下载并编译指定版本的Ruby源码，故需系统安装：</p>

<pre><code>sudo apt-get install -y make gcc libssl-dev libreadline-dev zlib1g-dev
</code></pre>

<p>然后：</p>

<pre><code class="bash">rbenv install 2.6.3
</code></pre>

<p>Ruby版本安装在 <code>~/.rbenv/versions</code> 目录中。</p>

<h3>卸载指定版本的Ruby</h3>

<pre><code class="bash">rbenv uninstall 2.6.3
</code></pre>

<h3>设置shell的Ruby版本</h3>

<pre><code class="bash">rbenv shell 2.6.3
</code></pre>

<p>等同于</p>

<pre><code class="bash">export RBENV_VERSION=2.6.3
</code></pre>

<p>清除<code>RBENV_VERSION</code></p>

<pre><code class="bash">rbenv shell --unset
</code></pre>

<h2>三、升级</h2>

<pre><code class="bash">cd ~/.rbenv
git pull
cd ~/.rbenv/plugins/ruby-build
git pull
cd ~/.rbenv/plugins/rbenv-taobao-mirror
git pull
</code></pre>

<h2>四、配置Systemd脚本</h2>

<p>若Ruby程序须通过Systemd启动，则其Systemd脚本类似：</p>

<pre><code class="ini">...

[Service]
...
User=&lt;username&gt;
Group=&lt;group&gt;
Environment="PATH=/home/&lt;username&gt;/.rbenv/shims:/home/&lt;username&gt;/.rbenv/bin:/sbin:/usr/sbin:/bin:/usr/bin"
Environment="RBENV_ROOT=/home/&lt;username&gt;/.rbenv"
Environment="RBENV_VERSION=&lt;ruby version&gt;"
WorkingDirectory=&lt;app dir&gt;
ExecStart=&lt;app dir&gt;/&lt;app&gt;
...
</code></pre>

<ul>
<li><code>username</code> 为服务运行的用户名，通常为 <code>RBENV_ROOT</code> 所属用户。</li>
<li><code>group</code> 为服务运行的组名，通常为 <code>RBENV_ROOT</code> 所属组。</li>
<li><code>RBENV_VERSION</code> 为Ruby版本号。</li>
<li><code>app dir</code> 为Ruby程序的目录。</li>
<li><code>app</code> 为Ruby程序或启动脚本。</li>
</ul>


<h2>五、制作Docker镜像</h2>

<p>若不希望使用Ruby的官方Docker镜像，可利用rbenv创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV RBENV_ROOT /root/.rbenv
ENV RBENV_VERSION 2.6.3
ENV PATH $RBENV_ROOT/shims:$RBENV_ROOT/bin:$PATH
ENV RUBY_CFLAGS -O3

RUN set -eux; \
    apt-get update; \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get install -y git wget make gcc libssl-dev libreadline-dev zlib1g-dev; \
    echo "gem: --no-rdoc --no-ri" &gt; ~/.gemrc; \
    git clone --depth 1 https://github.com/rbenv/rbenv.git $RBENV_ROOT; \
    git clone --depth 1 https://github.com/rbenv/ruby-build.git $RBENV_ROOT/plugins/ruby-build; \
    git clone --depth 1 https://github.com/andorchen/rbenv-taobao-mirror.git $RBENV_ROOT/plugins/rbenv-taobao-mirror; \
    CONFIGURE_OPTS="--disable-install-doc" MAKE_OPTS="-j`grep -c '^processor' /proc/cpuinfo`" rbenv install $RBENV_VERSION; \
    gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.com/; \
    gem install bundler; \
    bundle config mirror.https://rubygems.com https://gems.ruby-china.com; \
    apt-mark auto '.*' &gt; /dev/null; \
    [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists /var/tmp/* /tmp/* $RBENV_ROOT/versions/*/lib/ruby/gems/*/cache/*.gem
</code></pre>

<ul>
<li>在国内，为了加速安装gem，上述gem和bundle设置国内镜像</li>
<li><code>RUBY_CFLAGS</code> 为 <code>-O3</code> 可编译优化的Ruby程序。在某些情况，可提高应用20-30%的运行效率。</li>
<li>可针对指定C扩展（如ffi），设置编译优化标志：</li>
</ul>


<pre><code>bundle config build.ffi --with-cflags="$RUBY_CFLAGS"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nvm简介——Debian/Ubuntu中管理多版本Node.js]]></title>
    <link href="http://www.malike.net.cn/blog/2016/06/09/nvm-tutorial/"/>
    <updated>2016-06-09T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/06/09/nvm-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/creationix/nvm">nvm</a>是管理Node.js版本的工具，它支持在多个Node.js版本间切换。</p>

<h2>一、安装</h2>

<pre><code class="bash">git clone https://github.com/creationix/nvm.git ~/.nvm
cd ~/.nvm
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>激活nvm</p>

<pre><code class="bash">. ~/.nvm/nvm.sh
</code></pre>

<p>为了每次登录后自动激活nvm，需将<code>NMV_DIR</code>、<code>nvm.sh</code>和补齐加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">export NVM_DIR=~/.nvm
[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"
[ -r $NVM_DIR/bash_completion ] &amp;&amp; . $NVM_DIR/bash_completion
</code></pre>

<p>在国内，为了加速下述安装，可在bash的~/.bashrc（或zsh的~/.zshrc）加入：</p>

<pre><code class="bash">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Node.js版本</h3>

<pre><code class="bash">nvm ls-remote
</code></pre>

<p>除了Node.js官方版本，还支持io.js</p>

<h3>安装指定版本的Node.js</h3>

<pre><code class="bash">nvm install 10.16.2
</code></pre>

<p>它会自动下载指定版本的Node.js二进制包（不需要编译源码），安装在~/.nvm/versions/node</p>

<p>通常，最好安装最近的长周期版本：</p>

<pre><code class="bash">nvm install --lts
</code></pre>

<h3>卸载指定版本的Node.js</h3>

<pre><code class="bash">nvm uninstall 10.16.2
</code></pre>

<h3>设置shell的Node.js版本</h3>

<pre><code class="bash">nvm use 10.16.2
</code></pre>

<p>它将Node.js指定版本的bin路径加入PATH.</p>

<p>还原环境变量PATH</p>

<pre><code class="bash">nvm deactivate
</code></pre>

<h3>迁移npm至新版本的Node.js</h3>

<pre><code>nvm install node --reinstall-packages-from=node
</code></pre>

<p>或</p>

<pre><code>nvm install v10.16.2 --reinstall-packages-from=10.16.0
</code></pre>

<h3>.nvmrc</h3>

<p>它存储在工程根目录中，用于记录该工程依赖的Node.js版本</p>

<pre><code class="bash">echo 10.16.2 &gt; .nvmrc
</code></pre>

<p>进入工程目录（当前目录），运行</p>

<pre><code class="bash">nvm use
</code></pre>

<p>将根据.nvmrc指定shell的Nodejs版本</p>

<h2>三、升级nvm</h2>

<pre><code class="bash">cd $NVM_DIR
git fetch origin
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>升级完成后，需要重新激活nvm</p>

<pre><code class="bash">. $NVM_DIR/nvm.sh
</code></pre>

<h2>四、制作Docker镜像</h2>

<p>若不希望使用NodeJS的官方Docker镜像，可利用nvm创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node
ENV NODE_VERSION 10.16.2
ENV PATH /root/.nvm/versions/node/v$NODE_VERSION/bin:$PATH

RUN set -eux; \
    apt-get update; \
    apt-get install --no-install-recommends -y wget ca-certificates; \
    wget -O- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash; \
    apt-get remove --purge -y wget ca-certificates; \
    apt-get autoremove --purge -y; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/* /root/.nvm/.cache
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pyenv简介——Debian/Ubuntu中管理多版本Python]]></title>
    <link href="http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial/"/>
    <updated>2016-05-21T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/05/21/pyenv-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yyuu/pyenv">pyenv</a>是管理Python版本的工具，它支持在多个Python版本间切换。</p>

<h2>一、安装</h2>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv.git ~/.pyenv
cd ~/.pyenv
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>将<code>PYENV_ROOT</code>和<code>pyenv init</code>加入bash的~/.bashrc（或zsh的~/.zshrc）</p>

<pre><code class="bash">echo 'export PATH=~/.pyenv/bin:$PATH' &gt;&gt; ~/.bashrc
echo 'export PYENV_ROOT=~/.pyenv' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bashrc
echo 'export PYTHON_BUILD_MIRROR_URL="http://mirrors.sohu.com/python/"' &gt;&gt; ~/.bashrc
</code></pre>

<h2>二、常用命令</h2>

<h3>列表可安装的Python版本</h3>

<pre><code class="python">pyenv install -l
</code></pre>

<p>除了Python官方版本，还支持</p>

<ul>
<li>anaconda</li>
<li>ironpython</li>
<li>jython</li>
<li>miniconda</li>
<li>pypy</li>
<li>stackless</li>
</ul>


<h3>安装指定版本的Python</h3>

<p>安装过程，实际为下载并编译指定版本的Python源码，故需系统安装：</p>

<pre><code class="bash">sudo apt-get install -y build-essential zlib1g-dev libssl-dev libffi-dev
</code></pre>

<p>还可选择安装：</p>

<pre><code class="bash">sudo apt-get install libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv install 3.6.8
pyenv rehash
</code></pre>

<ul>
<li>源码（如Python-3.6.8.tar.gz）缓存在 <code>.pyenv/cache</code> 目录中，在安装完后可手动删除。</li>
<li>Python版本安装在~/.pyenv/versions目录中。</li>
</ul>


<h3>卸载指定版本的Python</h3>

<pre><code class="bash">pyenv uninstall 3.6.8
</code></pre>

<h3>设置shell的Python版本</h3>

<pre><code class="bash">pyenv shell 3.6.8
</code></pre>

<p>等同于</p>

<pre><code class="bash">export PYENV_VERSION=3.6.8
</code></pre>

<p>清除<code>PYENV_VERSION</code></p>

<pre><code class="bash">pyenv shell --unset
</code></pre>

<h2>三、安装pyenv-virtualenv</h2>

<p>pyenv-virtual是pyenv的插件，它支持管理多个virtualenv</p>

<pre><code class="bash">git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.bashrc
</code></pre>

<h3>创建virtualenv</h3>

<pre><code class="bash">pyenv virtualenv 3.6.8 aiohttp-virtual-env
</code></pre>

<ul>
<li>创建aiohttp-virtual-env之前，须先安装Python 3.6.8（通过系统或pyenv安装）。</li>
<li>aiohttp-virtual-env存储在~/.pyenv/versions/3.6.8/envs目录中，且在~/.pyenv/versions目录中建立同名符号链接。</li>
</ul>


<h3>删除virtualenv</h3>

<pre><code class="bash">pyenv uninstall aiohttp-virtual-env
</code></pre>

<h3>列表virtualenv</h3>

<pre><code class="bash">pyenv virtualenvs
</code></pre>

<h3>激活/禁用virtualenv</h3>

<pre><code class="bash">pyenv activate aiohttp-virtual-env
pyenv deactivate
</code></pre>

<h3>迁移virtualenv</h3>

<p>将指定virtualenv，迁移至另一virtualenv，须安装pyenv插件pyenv-pip-migrate：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-pip-migrate.git ~/.pyenv/plugins/pyenv-pip-migrate
</code></pre>

<p>然后：</p>

<pre><code class="bash">pyenv migrate aiohttp-virtual-env hello-virtual-env
</code></pre>

<h2>四、升级</h2>

<pre><code class="bash">cd $PYENV_ROOT
git fetch origin
git checkout `git describe --abbrev=0 --tags`
</code></pre>

<p>更简单的办法为安装pyenv插件pyenv-update：</p>

<pre><code class="bash">git clone https://github.com/pyenv/pyenv-update.git ~/.pyenv/plugins/pyenv-update
</code></pre>

<p>它不仅能更新pyenv，还能更新pyenv所有已安装的插件：</p>

<pre><code class="bash">pyenv update
</code></pre>

<h2>五、配置Upstart脚本</h2>

<p>若Python程序须通过Upstart启动，则其Upstart脚本可以类似：</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

script
        eval "$(pyenv init -)"
        exec ./&lt;app&gt;
end script
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<p>或</p>

<pre><code># service name

description "service description ..."

respawn

setuid &lt;username&gt;
setgid &lt;group&gt;

env PYENV_ROOT=/home/&lt;username&gt;/.pyenv
env PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin
env PYENV_VERSION=&lt;python version or virtualenv name&gt;

chdir &lt;app dir&gt;

exec ./&lt;app&gt;
# vim: ts=4 sw=4 sts=4 ft=upstart
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>六、配置Systemd脚本</h2>

<p>若Python程序须通过Systemd启动，则其Systemd脚本类似：</p>

<pre><code class="ini">...

[Service]
...
User=&lt;username&gt;
Group=&lt;group&gt;
Environment="PATH=/home/&lt;username&gt;/.pyenv/shims:/home/&lt;username&gt;/.pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin"
Environment="PYENV_ROOT=/home/&lt;username&gt;/.pyenv"
Environment="PYENV_VERSION=&lt;python version or virtualenv name&gt;"
WorkingDirectory=&lt;app dir&gt;
ExecStart=&lt;app dir&gt;/&lt;app&gt;
...
</code></pre>

<ul>
<li><code>username</code>为服务运行的用户名，通常为<code>PYENV_ROOT</code>所属用户。</li>
<li><code>group</code>为服务运行的组名，通常为<code>PYENV_ROOT</code>所属组。</li>
<li><code>PYENV_VERSION</code>为Python版本号或virtualenv的名字。</li>
<li><code>app dir</code>为Python程序的目录。</li>
<li><code>app</code>为Python程序或启动脚本。</li>
</ul>


<h2>七、制作Docker镜像</h2>

<p>若不希望使用Python的官方Docker镜像，可利用pyenv创建镜像：</p>

<pre><code class="Dockerfile">FROM ubuntu:bionic
MAINTAINER ...

ENV DEBIAN_FRONTEND noninteractive
ENV PYTHON_BUILD_MIRROR_URL http://mirrors.sohu.com/python/
ENV PYENV_ROOT /root/.pyenv
ENV PYENV_VERSION 3.6.8
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN set -eux; \
    apt-get update; \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get install -y git wget build-essential zlib1g-dev libssl-dev libffi-dev libsqlite3-dev libbz2-dev liblzma-dev libreadline-dev; \
    git clone --depth 1 https://github.com/pyenv/pyenv.git $PYENV_ROOT; \
    cd $PYENV_ROOT; \
    git checkout `git describe --abbrev=0 --tags`; \
    pyenv install 3.6.8; \
    apt-mark auto '.*' &gt; /dev/null; \
    [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists $PYENV_ROOT/cache/* /tmp/*
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rinse简介——Debian/Ubuntu中创建RPM安装环境]]></title>
    <link href="http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial/"/>
    <updated>2014-07-15T20:34:58+08:00</updated>
    <id>http://www.malike.net.cn/blog/2014/07/15/rinse-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://collab-maint.alioth.debian.org/rinse/">Rinse</a>是一个Debian环境中创建RPM发行版本（如CentOS，Scientific Linux和openSUSE）的工具。你可以利用它轻松创建各种RPM发行版本的chroot环境。</p>

<p>以下基于Ubuntu 12.04 amd64，主要以创建CentOS 6 x86_64为例。</p>

<h2>安装Rinse</h2>

<pre><code class="sh">sudo apt-get install -y rinse
</code></pre>

<h2>创建CentOS 6</h2>

<pre><code class="sh">sudo rinse --distribution centos-6 --arch amd64 --directory centos-6
</code></pre>

<p>运行该命令将创建CentOS 6 amd64于当前工作目录的centos-6目录中。其中，</p>

<ul>
<li>&ndash;distribution指定发行版本，类似还可以centos-{4,5}， fedora-core-{4,5,6,7,8,9}和opensuse-{10.1,10.2,10.3,11.0,11.1,12.1}等。可以下述命令获取：</li>
</ul>


<pre><code class="sh">rinse --list-distributions
</code></pre>

<p>具体对应于/etc/rinse/*.packages的模板名，它们主要包含RPM包列表。换一句话说，你根据需要定制自己的模板。另一方面，你也可以通过&ndash;pkgs-dir指定不同于/etc/rinse的模板目录。</p>

<ul>
<li>&ndash;arch指定架构，amd64表示64位架构，i386表示32位架构。缺省为i386.</li>
<li>&ndash;directory指定为安装目录，安装结束后便可以chroot该目录了。</li>
</ul>


<p>另外，需要额外安装某些包，可以通过指定&ndash;add-pkg-list来完成。</p>

<h2>配置RPM缓存</h2>

<p>rinse默认使用/var/rinse/cache作为缓存目录，它大大缩短了重复运行同样命令的时间。具体通过：</p>

<ul>
<li>&ndash;cache 0指禁用缓存，缺省为1</li>
<li>&ndash;cache-dir指定不同于/var/rinse/cache作为缓存目录。</li>
<li>&ndash;clean-cache指清楚缓存</li>
</ul>


<h2>定制安装后执行脚本</h2>

<p>&ndash;after-post-install, &ndash;before-post-install和&ndash;post-install顾名思义，需要指出的是&ndash;post-install默认执行/usr/lib/rinse/<distribution>/post-install.sh.</p>

<h2>如何提高安装速度？</h2>

<p>通过修改/etc/rinse/rinse.conf中对应发行版的镜像地址可以加速安装，如CentOS 6 x86_64的镜像地址可以修改为</p>

<pre><code>http://centos.ustc.edu.cn/centos/6/os/x86_64/CentOS/
</code></pre>

<p>也可以通过&ndash;config指定不同于/etc/rinse/rinse.conf的配置文件。</p>

<p>若内网存在HTTP cache服务器（如Squid)，还可以设置环境变量http_proxy来缓存rpm以及加速安装，如：</p>

<pre><code class="sh">sudo http_proxy=http://&lt;http proxy address&gt; rinse --distribution centos-6 --arch amd64 --directory centos-6
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-buildpackage示例（二）]]></title>
    <link href="http://www.malike.net.cn/blog/2012/10/23/git-buildpackage-2/"/>
    <updated>2012-10-23T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2012/10/23/git-buildpackage-2</id>
    <content type="html"><![CDATA[<p>在<a href="/blog/2012/02/19/git-buildpackage-1/">《git-buildpackage示例（一）》</a>中，我介绍了如何利用git-buildpackage为Ubuntu已有包做一个补丁包的办法。</p>

<p>当时，我的补丁是基于tolua 5.1.3版本。一段时间后，tolua的作者释放了5.1.4版本。问题出现了，如何将我的补丁合并到5.1.4版本中呢？</p>

<p>下面我将继续使用git-buildpackage来解决合并上游新版本的问题：</p>

<ul>
<li>下载tolua 5.1.4源码包（假设放在git工作目录上层）：</li>
</ul>


<pre><code class="sh">wget http://www.tecgraf.puc-rio.br/~celes/tolua/tolua-5.1.4.tar.gz
cd tolua
git-import-orig -u 5.1.4 ../tolua-5.1.4.tar.gz
</code></pre>

<ul>
<li>手动解决遇到的冲突（如src/bin/Makefile）并提交更新：</li>
</ul>


<pre><code class="sh">git commit
</code></pre>

<ul>
<li>这时，运行</li>
</ul>


<pre><code class="sh">git log --format=%d:%s
</code></pre>

<p>输出：</p>

<pre><code class="plain"> (HEAD, master):Merge commit 'upstream/5.1.4'
 (upstream/5.1.4, upstream):Imported Upstream version 5.1.4
 (debian/5.1.3-2):Fix relocation R_X86_64_32 against '.rodata' can not be used when making a shared object
 (debian/5.1.3-1):Imported Debian patch 5.1.3-1
 (upstream/5.1.3):Imported Upstream version 5.1.3
</code></pre>

<p>upstream/5.1.4分支被创建，且将其合并到master分支中。如此，master分支合并完毕，接下来将合并debian的patches。</p>

<ul>
<li>重整patch-queue：</li>
</ul>


<pre><code class="sh">gbp-pq rebase
</code></pre>

<p>手动解决遇到的冲突：</p>

<pre><code class="sh">git rm -f src/bin/toluabind.c
git rebase --continue
</code></pre>

<ul>
<li>导出patch-queue（至master分支）</li>
</ul>


<pre><code class="sh">git clean -df
gbp-pq export
</code></pre>

<ul>
<li>指定版本号5.1.4-1自动生成snapshot的debian/changelog：</li>
</ul>


<pre><code class="sh">git-dch -a -S -N 5.1.4-1
git add debian/changelog
git add debian/patches/0001-mkdir-for-tolua-lib-archive-and-remove-temp-files.patch
git commit -m "Update patches from debian/5.1.3-1"
</code></pre>

<p>测试构建新的deb包。为了避免污染当前环境，这里指定git首先导出源码至../tolua-build目录：</p>

<pre><code class="sh">git-buildpackage --git-export-dir=../tolua-build --git-ignore-new
</code></pre>

<ul>
<li>生成release的版本信息，并构建release的deb包：</li>
</ul>


<pre><code class="sh">git-dch -a -R
git ci --amend
git tag debian/5.1.4-1
git-buildpackage --git-export-dir=../tolua-build --git-ignore-new
</code></pre>

<p>到此为止，我已经演示了git-buildpackage合并上游版本的过程。不难发现，git-buildpackage充分利用了git的特点，在很大程度上简化了补丁开发和维护的过程。</p>
]]></content>
  </entry>
  
</feed>
