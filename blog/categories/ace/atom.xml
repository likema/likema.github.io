<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ace | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/ace/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2020-09-23T12:46:00+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用ACE实现One Loop Per Thread]]></title>
    <link href="http://www.malike.net.cn/blog/2020/04/19/ace-one-loop-per-thread/"/>
    <updated>2020-04-19T19:20:02+00:00</updated>
    <id>http://www.malike.net.cn/blog/2020/04/19/ace-one-loop-per-thread</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/Solstice/archive/2010/02/12/multithreaded_server.html#_Toc7583">one loop per thread</a> 即每个线程运行一个独立的事件循环 (event loop)，或称为 one event loop per thread 更准确。而且事件循环线程之间通常不存在同步或互斥的关系, 并发连接的处理能力随CPU核心数而扩展 (scalable)。</p>

<p><a href="http://www.dre.vanderbilt.edu/~schmidt/ACE.html">ACE</a> 拥有多种实现的Reactor:</p>

<ul>
<li><code>ACE_Select_Reactor</code> : 基于 <code>select</code> 的实现。</li>
<li><code>ACE_Dev_Poll_Reactor</code> : 基于 Linux <code>epoll</code> 或 BSD <code>/dev/poll</code> 的实现。</li>
<li><code>ACE_WFMO_Reactor</code> : 基于 Windows <code>WaitForMultipleObjects</code> 的实现</li>
</ul>


<p>它们都可用于实现 one loop per thread 模式。 相比 <code>ACE_TP_Reactor</code>：</p>

<ul>
<li><code>ACE_TP_Reactor</code> 继承于 <code>ACE_Select_Reactor</code> ，<strong>加锁</strong> 保证多线程竞争同一 Reactor 的安全。并行可扩展能力受限，且最大支持 1024 个描述符。</li>
<li>基于 <code>ACE_Dev_Poll_Reactor</code> 的 one loop er thread，每个线程拥有独立的 Reactor，线程之间不存在竞争。充分发挥并行能力，且最大支持几十万甚至百万个描述符。</li>
</ul>


<p>以下以 <code>ACE_Select_Reactor</code> 为例浅析实现的关键代码。更完备示例代码请参看我的 <a href="https://github.com/likema/ace_echod">ace_echod</a></p>

<h2>实现浅析</h2>

<h3>事件循环函数</h3>

<p><code>event_loop</code> 将作为线程函数运行于独立线程中，它与 ACE 教科书基本一样：</p>

<pre><code class="cpp">ACE_THR_FUNC_RETURN event_loop(ACE_Reactor* reactor)
{
    reactor-&gt;owner(ACE_OS::thr_self()); // 将reactor “绑定” 本线程。
    while (!reactor-&gt;reactor_event_loop_done()) {
        reactor-&gt;run_reactor_event_loop();
    }

    return 0;
}
</code></pre>

<h3>事件循环管理器</h3>

<pre><code class="cpp">class Event_Loop_Manager {
public:
    // 为简化，忽略 ctor 、dtor 和 close

    bool open(unsigned threads)
    {
        // 创建Reactor数组。
        reactors_.reset(new ACE_Reactor*[threads]);
        memset(reactors_.get(), 0, sizeof(ACE_Reactor*) * threads);

        // 创建线程ID数组
        tids_.reset(new ACE_thread_t[threads]);
        memset(tids_.get(), 0, sizeof(ACE_thread_t*) * threads);

        // 创建事件循环
        threads_ = threads;
        for (unsigned i = 0; i &lt; threads_; ++i) {
            reactors_[i] = new ACE_Reactor(new ACE_Select_Reactor, 1), false);
            ACE_Thread_Manager::instance()-&gt;spawn(
                    (ACE_THR_FUNC) event_loop, reactors[i],
                    THR_NEW_LWP | THR_JOINABLE | THR_INHERIT_SCHED, &amp;tid);
        }

        current_ = 0;
        return true;
    }

    /// 以简单循环方式返回 Reactor
    ACE_Reactor* reactor()
    {
        ACE_Reactor* r = reactors_[current_];
        current_ = (current_ + 1) % threads_;
        return r;
    }
protected:
    ACE_Auto_Basic_Array_Ptr&lt;ACE_Reactor*&gt; reactors_;
    ACE_Auto_Basic_Array_Ptr&lt;ACE_thread_t&gt; tids_;
    unsigned threads_;
    unsigned current_; // 当前分配 Reactor 索引
};
</code></pre>

<h3>Echo Acceptor</h3>

<p>据 ACE 的 Acceptor 模式, <code>Echo_Handler</code> 继承于 <code>ACE_Svc_Handler&lt;ACE_SOCK_STREAM, ACE_NULL_SYNCH&gt;</code>，它与 ACE 教科书实现相似。</p>

<ul>
<li><code>Echo_Acceptor</code> 注册默认 Reactor ，其事件循环运行于主线程。</li>
<li>创建 <code>Echo_Handler</code> 对象时，事件循环管理器以简单循环方式分配 Reactor 给新对象。</li>
</ul>


<pre><code class="cpp">class Echo_Acceptor: public ACE_Acceptor&lt;Echo_Handler, ACE_SOCK_ACCEPTOR&gt; {
public:
    int open(const addr_type&amp; local_addr, int flags, int use_select, int reuse_addr)
    {
        flags_ = flags;
        use_select_ = use_select;
        reuse_addr_ = reuse_addr;
        peer_acceptor_addr_ = local_addr;

        if (peer_acceptor_.open(local_addr, reuse_addr) == -1)
            return -1;

        (void) peer_acceptor_.enable(ACE_NONBLOCK);
        ACE_Reactor::instance()-&gt;register_handler(
            this, ACE_Event_Handler::ACCEPT_MASK);

        this-&gt;reactor(ACE_Reactor::instance());

        // 按逻辑CPU数初始化事件循环（线程）数。
        return loops_.open(reactor_type, ACE_OS::num_processors()) ? 0 : -1;
    }

    virtual int make_svc_handler(handler_type*&amp; sh)
    {
        if (!sh)
            ACE_NEW_RETURN(sh, handler_type, -1);

        // 事件循环管理器给 Echo_Handler 对象分配事件循环。
        sh-&gt;reactor(loops_.reactor());
        return 0;
    }

protected:
    Event_Loop_Manager loops_;
};
</code></pre>

<h2>存在问题</h2>

<ul>
<li>因 <code>ACE_Reactor::size</code> 实现<a href="https://github.com/DOCGroup/ACE_TAO/issues/855#issuecomment-612391823">不一致</a>，除 <code>ACE_Dev_Poll_Reactor</code> 返回当前注册的 handler 数量，其它实现返回handler表的容量。导致无法直接通过注册 handler 的数量，实现 <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round-Robin</a>，即均衡分配 handler</li>
<li>因 <code>ACE_Reactor</code> 无法获取当前是否等待事件（即空闲）状态，导致无法直接将 handler 分配到空闲事件循环中。</li>
</ul>


<p>解决上述问题，要么直接修改 ACE 的实现，要么在具体 handler 实现中增加状态或统计变量，两者都需用原子变量来避免加锁。</p>
]]></content>
  </entry>
  
</feed>
