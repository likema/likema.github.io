<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lxc | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/lxc/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2021-08-15T13:26:55+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS 8 上安装 LXC]]></title>
    <link href="http://www.malike.net.cn/blog/2021/06/04/centos-8-lxc/"/>
    <updated>2021-06-04T01:31:04+00:00</updated>
    <id>http://www.malike.net.cn/blog/2021/06/04/centos-8-lxc</id>
    <content type="html"><![CDATA[<h2>一、安装 LXC 包</h2>

<pre><code class="bash">yum install -y epel-release
yum update -y
yum install -y lxc lxc-devel lxc-templates dnsmasq iptables debootstrap
</code></pre>

<ul>
<li><code>epel-release</code> : <a href="https://fedoraproject.org/wiki/EPEL">Extra Packages for Enterprise Linux (EPEL)</a> 仓库配置文件，因 EPEL 才包含 LXC 相关包。</li>
<li><code>dnsmasq</code> 和 <code>iptables</code> 为后续配置 LXC 网络。</li>
<li><code>debootstrap</code> 为后续安装 Ubuntu 容器。</li>
</ul>


<p>安装 LXC 模板</p>

<pre><code class="bash">yum install -y gcc make
wget -O- https://linuxcontainers.org/downloads/lxc/lxc-templates-3.0.4.tar.gz | tar zx
cd lxc-templates-3.0.4
./configure --prefix=/usr --localstatedir=/var
make install
</code></pre>

<ul>
<li>虽然 <code>lxc-templates</code> 包，但该包未包含 Ubuntu 容器模板。故还须从其源码安装。</li>
<li><code>lxc-templates-3.0.4</code> 并不需要编译任何 C 程序，但 <code>configure</code> 将检查 <code>gcc</code>。故须安装 <code>gcc</code></li>
<li>安装模板后，若不需要 <code>gcc</code> 和 <code>make</code> ，则可自行 <strong>卸载</strong> 。</li>
</ul>


<h2>二、配置 LXC 网络</h2>

<p>LXC 存在 3 种网络：</p>

<h3>虚拟网络</h3>

<p>创建虚拟网卡 <code>lxcbr0</code> ，作为容器虚拟网络的网桥：</p>

<pre><code class="bash">echo 'USE_LXC_BRIDGE="true"' &gt; /etc/sysconfig/lxc
systemctl enable --now lxc-net.service
systemctl start lxc-net

cat &gt; /etc/lxc/default.conf &lt;&lt;EOF
lxc.net.0.type = veth
lxc.net.0.flags = up
lxc.net.0.link = lxcbr0
EOF
</code></pre>

<h3>共享 host 网络</h3>

<pre><code class="bash">echo 'lxc.net.0.type = none' &gt; /etc/lxc/default.conf
</code></pre>

<p>因容器与 host 在同一网络名字空间，容器中进程监听端口不能与 host 中端口相同，否则监听失败，如 <code>sshd</code></p>

<h3>loopback 网络</h3>

<pre><code class="bash">echo 'lxc.net.0.type = empty' &gt; /etc/lxc/default.conf
</code></pre>

<p>默认不配置或如上述，容器仅存在 loopback 网络。</p>

<h2>三、创建容器</h2>

<p>以安装 Ubuntu 20.04 容器为例：</p>

<pre><code class="bash">lxc-create -n focal -t ubuntu \
    -- -r focal \
    --mirror http://cn.archive.ubuntu.com/ubuntu/ \
    --security-mirror http://cn.archive.ubuntu.com/ubuntu/
</code></pre>

<ul>
<li><code>-n</code> ：容器名。</li>
<li><code>-t</code> ：模板名，对应 <code>/usr/share/lxc/templates/lxc-*</code> 文件。</li>
<li><code>--</code> ：其后为传入 <code>/usr/share/lxc/templates/lxc-ubuntu</code> 的参数。</li>
<li><code>-r</code> ： Ubuntu 发行代号，默认为主机的 Ubuntu 发行代号，否则为最近 LTS</li>
<li><code>--mirror</code> 和 <code>--security-mirror</code> ：为加速创建，两者设置为国内镜像。</li>
</ul>


<p>其它参数：</p>

<ul>
<li><code>-u &lt;user&gt;</code> : 容器用户名，默认 <code>ubuntu</code> 。</li>
<li><code>--password &lt;password&gt;</code> ：容器密码，默认 <code>ubuntu</code> 。</li>
<li><code>-S &lt;keyfile&gt;</code> : SSH 私钥文件。</li>
</ul>


<p>其它模板，如 CentOS ，可通过 <code>/usr/share/lxc/templates/lxc-centos -h</code> 查看相关参数。</p>

<h2>四、启动容器</h2>

<pre><code class="bash">lxc-start focal
</code></pre>

<p>登录</p>

<pre><code class="bash">lxc-console focal
</code></pre>

<h2>五、查看容器</h2>

<pre><code class="bash">lxc-info focal
</code></pre>

<p>输出形如：</p>

<pre><code>Name:           focal
State:          RUNNING
PID:            26063
IP:             &lt;container ip&gt;
CPU use:        0.35 seconds
BlkIO use:      26.36 MiB
Memory use:     21.13 MiB
KMem use:       0 bytes
Link:           vethJI5UF9
 TX bytes:      1.51 KiB
 RX bytes:      2.18 KiB
 Total bytes:   3.68 KiB
</code></pre>

<h2>六、端口转发</h2>

<p>仅以将主机端口 <code>2222</code> 重定向至容器 <code>22</code> 为例（须将 <code>&lt;container ip&gt;</code> 替换为容器 IP ）。</p>

<p>以下两者取其一，若未安装 <code>firewalld</code> ，则采用 <code>iptables</code> ：</p>

<h3>iptables</h3>

<pre><code class="bash">iptables -t nat -A PREROUTING -p tcp -i lxcbr0 --dport 2222 -j DNAT --to-destination &lt;container ip&gt;:22
</code></pre>

<p>将上述命令写入 <code>/etc/rc.local</code> ，从而保证重启依旧生效：</p>

<pre><code class="bash">echo 'iptables -t nat -A PREROUTING -p tcp -i lxcbr0 --dport 2222 -j DNAT --to-destination &lt;container ip&gt;:22' &gt; /etc/rc.local
</code></pre>

<h3>firewalld</h3>

<pre><code class="bash">firewall-cmd --zone=public --add-forward-port=port=2222:proto=tcp:toport=22:toaddr=&lt;container ip&gt; --permanent
firewall-cmd --zone=public --add-port=2222/tcp --permanent
firewall-cmd --reload
</code></pre>

<h2>七、参考</h2>

<ul>
<li><a href="https://www.oreilly.com/library/view/containerization-with-lxc/9781785888946/ch05s02.html">Connecting LXC to the host network</a></li>
<li><a href="https://fedoraproject.org/wiki/LXC">Fedora LXC</a></li>
<li><a href="https://www.cyberciti.biz/faq/how-to-set-up-a-firewall-using-firewalld-on-centos-8/">How to set up a firewall using FirewallD on CentOS 8</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LXC简介]]></title>
    <link href="http://www.malike.net.cn/blog/2013/11/10/lxc-tutorial/"/>
    <updated>2013-11-10T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2013/11/10/lxc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://linuxcontainers.org/">LXC</a> (Linux Containters) 是一种基于内核容器属性的用户空间接口。 它被认为介于chroot和完全虚拟化之间，其目标为创建一个不需要独立内核，但近可能接近标准Linux安装的环境。</p>

<p>其特性如下：</p>

<ul>
<li>内核空间（ipc, uts, mount, pid, network和user)</li>
<li>支持Apparmor和SELinux</li>
<li><a href="http://en.wikipedia.org/wiki/Seccomp">seccomp</a>策略</li>
<li>chroots (使用pivot_root)</li>
<li><a href="https://www.kernel.org/pub/linux/libs/security/linux-privs/kernel-2.2/capfaq-0.2.txt">Kernel capabilities</a></li>
<li>支持<a href="http://en.wikipedia.org/wiki/Cgroups">cgroups</a> (Control groups)</li>
</ul>


<p>由于没有完全虚拟化CPU，也没有虚拟化硬盘，其性能是与物理机接近的。实际经验，我发现在LXC中编译C/C++源码（如构建基于C/C++源码的RPM或DEB）的性能是VirtualBox的3倍。强烈建议使用LXC代替KVM和VirtualBox作为RPM或DEB的构建环境。</p>

<p>以下操作基于Ubuntu 12.04，那么需要安装LXC包：</p>

<pre><code class="sh">sudo apt-get install -y lxc
</code></pre>

<h2>创建LXC</h2>

<p>以创建一个名为precise的Ubuntu 12.04容器为例。</p>

<p>需要创建一个基础的配置文件。由于创建LXC完成后，不再需要该配置文件（可以删除），故该文件的名字和路径没有特殊要求。这里命名为precise.conf，放在当前路径下：</p>

<pre><code>lxc.network.type = veth
lxc.network.flags = up
lxc.network.name = eth0
lxc.network.link = lxcbr0
</code></pre>

<p>lxcbr0为由LXC包创建的虚拟网桥，通过ifconfig可以知道其IP地址10.0.3.1，网段10.0.3.1/24，容器将通过lxcbr0与外界通信。</p>

<p>如此，可以开始创建容器了：</p>

<pre><code class="sh">sudo lxc-create -n precise -f precise.conf -t ubuntu -- -r precise
</code></pre>

<ul>
<li>-n指定容器名，这里为precise。</li>
<li>-f指定基础配置文件，即上一步骤创建的precise.conf。</li>
<li>-t指定模板名，这里必须为ubuntu（创建Ubuntu 12.04)。每个模板名，对应一个脚本，它们存放在/usr/lib/lxc/templates目录（文件名形如lxc-&lt;模板名>）中。</li>
<li>&ndash;以后的参数被传递给模板脚本；</li>
<li>-r为ubuntu模板脚本的参数，表示<a href="http://en.wikipedia.org/w/index.php?title=Ubuntu_(operating_system)#Releases">Ubuntu发行版代号</a>，这里必须为precise（它是12.04的发行代号）。</li>
</ul>


<p>创建过程可能会比较漫长。通过阅读/usr/lib/lxc/templates/lxc-ubuntu，不难发现创建ubuntu容器主要依靠deboostrap来完成。另一方面，变量MIRROR和SECURITY_MIRROR决定了镜像的设置，它们默认为：</p>

<pre><code>MIRROR=http://archive.ubuntu.com/ubuntu
SECURITY_MIRROR=http://security.ubuntu.com/ubuntu
</code></pre>

<p>在大陆地区，使用默认镜像的网速较慢。为了加快创建过程，可以将它们都换成大陆或香港的镜像，如<a href="http://ftp.cuhk.edu.hk/pub/Linux/ubuntu">http://ftp.cuhk.edu.hk/pub/Linux/ubuntu</a></p>

<p>具体问题是lxc-ubuntu并没有提供命令行参数来设置MIRROR和SECURITY_MIRROR。在不修改lxc-ubuntu代码的情况下，唯一的办法就是通过设置相关环境变量来达到这个目的，如：</p>

<pre><code class="sh">sudo MIRROR="http://ftp.cuhk.edu.hk/pub/Linux/ubuntu" \
     SECURITY_MIRROR="http://ftp.cuhk.edu.hk/pub/Linux/ubuntu" \
     lxc-create -n precise -f precise.conf -t ubuntu -- -r precise
</code></pre>

<p>我司为了加快内部开发和测试人员安装Ubuntu，部署了<a href="https://www.unix-ag.uni-kl.de/~bloch/acng/">apt-cacher-ng</a>——一种deb包HTTP缓存代理。由于lxc-ubuntu基于deboostrap，可以通过设置环境变量http_proxy来设置deboostrap的缓存代理（请见<a href="http://unix.stackexchange.com/questions/38993/global-cache-config-of-debootstrap">Global cache config of debootstrap</a>）:</p>

<pre><code class="sh">sudo http_proxy="http://192.168.88.10:3142/" \
     MIRROR="http://ftp.cuhk.edu.hk/pub/Linux/ubuntu" \
     SECURITY_MIRROR="http://ftp.cuhk.edu.hk/pub/Linux/ubuntu" \
     lxc-create -n precise -f precise.conf -t ubuntu -- -r precise
</code></pre>

<p>如此，在尽可能节约外部带宽的同时，最大限度的加快了创建过程。</p>

<p>上述创建方法，容器的架构将与host os的相同（如amd64）。若需要在amd64的host os上创建i386或i686架构的容器，则需要通过模板脚本的-a参数指定i686，如：</p>

<pre><code class="sh">sudo lxc-create -n precise -f precise.conf -t ubuntu -- -r precise -a i686
</code></pre>

<h2>启动LXC</h2>

<p>若需立即启动LXC，则：</p>

<pre><code class="sh">sudo lxc-start -n precise
</code></pre>

<p>若需以daemon方式运行，则:</p>

<pre><code class="sh">sudo lxc-start -n precise -d
</code></pre>

<p>若需随host os启动而自动启动，则:</p>

<pre><code class="sh">sudo ln -s /var/lib/lxc/precise/config /etc/lxc/auto/precise.conf
</code></pre>

<h2>打开LXC控制台</h2>

<p>在没有给容器设置IP时，打开其控制台</p>

<pre><code class="sh">sudo lxc-console -n precise
</code></pre>

<p>将看到文本登录界面。 通过按热键ctrl-a和q，可以退出容器控制台。</p>

<p>更多的时候，通过ssh登录将更方便，特别是key认证方式登录。</p>

<h2>停止LXC</h2>

<p>多数情况下，可以通过在guest os（容器）内执行poweroff或shutdown -h now来关闭容器。但有些时候却需要在host os上强行关闭容器，如：</p>

<pre><code class="sh">sudo lxc-stop -n precise
</code></pre>

<h2>删除LXC</h2>

<p>容器创建后，配置和数据存放在/var/lib/lxc/precise目录中。执行</p>

<pre><code class="sh">sudo lxc-destroy -n precise
</code></pre>

<p>与手动删除该目录效果一样。</p>

<h2>其他模板</h2>

<ul>
<li>ubuntu-cloud：从Ubuntu云上下载根文件系统镜像。</li>
<li>fedora: 它依赖于yum包，通过模板脚本参数-R指定版本号，如19和20都无法创建成功。默认版本号为14，可以继续安装。</li>
<li>opensuse：它依赖于zypper，Ubuntu 12.04默认没有zypper包。虽然<a href="https://launchpad.net/~thopiekar/+archive/zypper">ppa:thopiekar/zypper</a>提供了zypper，但是创建失败。</li>
<li>busybox：仅有busybox的容器，默认不能远程登录，可以用于练习简单的命令行操作。</li>
<li>sshd：将host os中各个系统目录（/bin, /sbin/和/lib等）以只读方式绑定到容器中，仅运行ssh服务器，支持ssh登录，可用于练习复杂的命令行操作。</li>
</ul>

]]></content>
  </entry>
  
</feed>
