<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2021-08-15T13:21:11+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过 LIEF 修改 ELF 解决 glibc 兼容性问题]]></title>
    <link href="http://www.malike.net.cn/blog/2021/08/15/modify-elf-by-lief/"/>
    <updated>2021-08-15T21:25:15+00:00</updated>
    <id>http://www.malike.net.cn/blog/2021/08/15/modify-elf-by-lief</id>
    <content type="html"><![CDATA[<p>数月前，我读了 <a href="https://mp.weixin.qq.com/s/2NNqYGYcCo2TEX4yfqG0qQ">Linux 修改 ELF 解决 glibc 兼容性问题</a> ，颇受启发，但暂无用武之地。</p>

<p>最近，我遇到了几乎一样的问题，即 <code>clock_gettime</code> 兼容性。</p>

<h2>最小化问题</h2>

<p>为了将问题最小化，这里我以 <code>hello.c</code> 模拟该问题：</p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main() {
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &amp;ts);
    printf("%lu, %ld\n", ts.tv_sec, ts.tv_nsec);
    return 0;
}
</code></pre>

<p>在 Ubuntu 20.04 中，用系统内置 GCC 9.3.0 构建它：</p>

<pre><code class="bash">gcc -fno-stack-protector -o hello hello.c -s
</code></pre>

<ul>
<li><code>-fno-stack-protector</code> : 禁用 stack 保护特性。目的为最小化未定义符号，最小化问题场景。</li>
<li><code>-s</code> : 除去调试相关符号，目的同上。</li>
</ul>


<p>通过 <code>readelf -sV hello</code> 展示其符号：</p>

<pre><code>Symbol table '.dynsym' contains 8 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     .....
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND clock_gettime@GLIBC_2.17 (2)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (3)
     ......

Version symbols section '.gnu.version' contains 8 entries:
 Addr: 0x0000000000000526  Offset: 0x000526  Link: 6 (.dynsym)
  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.17)    3 (GLIBC_2.2.5)
  ......

Version needs section '.gnu.version_r' contains 1 entry:
 Addr: 0x0000000000000538  Offset: 0x000538  Link: 7 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 2
  0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 3
  0x0020:   Name: GLIBC_2.17  Flags: none  Version: 2
</code></pre>

<p>问题在于修改 <code>.gnu.version_r</code> 段偏移 <code>0x0020</code> 的相关值。回顾 <code>Elfxx_Vernaux</code> 结构：</p>

<pre><code class="c">typedef struct {
    Elfxx_Word    vna_hash;  // 库名称 (如 GLIBC_2.17) 的 hash 值
    Elfxx_Half    vna_flags;
    Elfxx_Half    vna_other; // .gnu.version 段中符号的版本值
    Elfxx_Word    vna_name;  // 库名称 (如 GLIBC_2.17) 为相对 .dynstr 段偏移
    Elfxx_Word    vna_next;  // 下一条记录相对本记录首地址的偏移
} Elfxx_Vernaux;
</code></pre>

<p>实际仅须修改 <code>vna_hash</code> 和 <code>vna_name</code> ，前者实为后者的校验和。</p>

<p>以下提供 2 种方法修改 <code>hello</code> 二进制文件，使其无须重编译就能运行于 RHEL/CentOS 6 中。</p>

<h2>通过 dd 修改</h2>

<pre><code class="bash"># 复制 hello 偏移 0x538 + 0x10 = 0x548 的 4 byte 至文件 glibc225_vna_hash ；
dd if=hello of=glibc225_vna_hash skip=$((16#548)) bs=1 count=4

# 复制 hello 偏移 0x538 + 0x10 + 0x08 = 0x550 的 4 byte 至文件 glibc225_vna_hash
dd if=hello of=glibc225_vna_name skip=$((16#550)) bs=1 count=4
</code></pre>

<ul>
<li><code>0x538</code> 为 <code>.gnu.version_r</code> 段首地址。</li>
<li><code>0x10</code> 为 <code>GLIBC_2.2.5</code> 记录的段偏移，即 <code>Elfxx_Vernaux::vna_hash</code> 偏移。</li>
<li><code>0x08</code> 为 <code>GLIBC_2.2.5</code> 记录内 <code>Elfxx_Vernaux::vna_name</code> 偏移。</li>
</ul>


<p>为保持 <code>hello</code> 不改变， 修改 <code>hello</code> 至 <code>hello-dd</code></p>

<pre><code class="bash">cp hello hello-dd

# 复制 glibc225_vna_hash 至 hello-dd 偏移 0x530 + 0x20 = 0x558
dd if=glibc225_vna_hash of=hello-dd seek=$((16#558)) bs=1 conv=notrunc

# 复制 glibc225_vna_name 至 hello-dd 偏移 0x530 + 0x20 + 0x08 = 0x560
dd if=glibc225_vna_name of=hello-dd seek=$((16#560)) bs=1 conv=notrunc
</code></pre>

<ul>
<li><code>0x20</code> 为 <code>GLIBC_2.1.7</code> 记录的段偏移，即 <code>Elfxx_Vernaux::vna_hash</code> 偏移。</li>
<li><code>0x08</code> 为 <code>GLIBC_2.1.7</code> 记录内 <code>Elfxx_Vernaux::vna_name</code> 偏移。</li>
</ul>


<p>通过 <code>readelf -sV hello</code> 观察修改是否生效：</p>

<pre><code>Symbol table '.dynsym' contains 8 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     ......
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND clock_gettime@GLIBC_2.2.5 (2)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (3)
     ......

Version symbols section '.gnu.version' contains 8 entries:
 Addr: 0x0000000000000526  Offset: 0x000526  Link: 4 (.dynsym)
  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   3 (GLIBC_2.2.5)
  ......

Version needs section '.gnu.version_r' contains 1 entry:
 Addr: 0x0000000000000538  Offset: 0x000538  Link: 26 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 2
  0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 3
  0x0020:   Name: GLIBC_2.2.5  Flags: none  Version: 2
</code></pre>

<p>最后，将 <code>librt.so.1</code> 添加至 <code>hello-dd</code> 的库依赖列表中。</p>

<pre><code class="bash">patchelf --add-needed librt.so.1 hello-dd
</code></pre>

<h2>通过 LIEF</h2>

<p><a href="https://lief.quarkslab.com/doc/latest/intro.html">LIEF</a> 是一个能分析和修改 ELF , PE , MachO 和 Android 格式的库，它提供了 C/C++ 和 Python 的 API.</p>

<p>以下通过 LIEF 的 Python API 达到上述同样的效果。</p>

<h3>安装</h3>

<pre><code class="bash">pip3 install lief
</code></pre>

<h3>写脚本</h3>

<p>创建 <code>lief-hello.py</code> :</p>

<pre><code class="python">import lief


binary = lief.parse('hello')
glibc225_aux = clock_gettime_aux = None

for i in binary.imported_symbols:
    # 查找 GLIBC_2.2.5 的 symbol_version_auxiliary 记录，
    if i.symbol_version.symbol_version_auxiliary.name == 'GLIBC_2.2.5':
        glibc225_aux = i.symbol_version.symbol_version_auxiliary
    # 查找 clock_gettime 的 symbol_version_auxiliary 记录，
    elif i.name == 'clock_gettime':
        clock_gettime_aux = i.symbol_version.symbol_version_auxiliary

# 复制 GLIBC_2.2.5 记录 name 和 hash 至 clock_gettime 记录对应字段中。
if glibc225_aux and clock_gettime_aux:
    clock_gettime_aux.name = glibc225_aux.name
    clock_gettime_aux.hash = glibc225_aux.hash
    binary.add_library('librt.so.1')  # 相当于 patchelf --add-needed librt.so.1
    binary.write('hello-lief')
</code></pre>

<p>以上 <code>symbol_version_auxiliary</code> 相当于前述 <code>Elfxx_Vernaux</code></p>

<h3>执行脚本</h3>

<p>执行 <code>python3 lief-hello.py</code> 将生成 <code>hello-lief</code> 。</p>

<p>通过 <code>readelf -sV hello-lief</code> 观察修改是否生效：</p>

<pre><code>Symbol table '.dynsym' contains 8 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     ......
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND clock_gettime@GLIBC_2.2.5 (2)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (3)
     ......

Version symbols section '.gnu.version' contains 8 entries:
 Addr: 0x0000000000002526  Offset: 0x002526  Link: 6 (.dynsym)
  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   3 (GLIBC_2.2.5)
  ......

Version needs section '.gnu.version_r' contains 1 entry:
 Addr: 0x0000000000002538  Offset: 0x002538  Link: 7 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 2
  0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 3
  0x0020:   Name: GLIBC_2.2.5  Flags: none  Version: 2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用ACE实现One Loop Per Thread]]></title>
    <link href="http://www.malike.net.cn/blog/2020/04/19/ace-one-loop-per-thread/"/>
    <updated>2020-04-19T19:20:02+00:00</updated>
    <id>http://www.malike.net.cn/blog/2020/04/19/ace-one-loop-per-thread</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/Solstice/archive/2010/02/12/multithreaded_server.html#_Toc7583">one loop per thread</a> 即每个线程运行一个独立的事件循环 (event loop)，或称为 one event loop per thread 更准确。而且事件循环线程之间通常不存在同步或互斥的关系, 并发连接的处理能力随CPU核心数而扩展 (scalable)。</p>

<p><a href="http://www.dre.vanderbilt.edu/~schmidt/ACE.html">ACE</a> 拥有多种实现的Reactor:</p>

<ul>
<li><code>ACE_Select_Reactor</code> : 基于 <code>select</code> 的实现。</li>
<li><code>ACE_Dev_Poll_Reactor</code> : 基于 Linux <code>epoll</code> 或 BSD <code>/dev/poll</code> 的实现。</li>
<li><code>ACE_WFMO_Reactor</code> : 基于 Windows <code>WaitForMultipleObjects</code> 的实现</li>
</ul>


<p>它们都可用于实现 one loop per thread 模式。 相比 <code>ACE_TP_Reactor</code>：</p>

<ul>
<li><code>ACE_TP_Reactor</code> 继承于 <code>ACE_Select_Reactor</code> ，<strong>加锁</strong> 保证多线程竞争同一 Reactor 的安全。并行可扩展能力受限，且最大支持 1024 个描述符。</li>
<li>基于 <code>ACE_Dev_Poll_Reactor</code> 的 one loop er thread，每个线程拥有独立的 Reactor，线程之间不存在竞争。充分发挥并行能力，且最大支持几十万甚至百万个描述符。</li>
</ul>


<p>以下以 <code>ACE_Select_Reactor</code> 为例浅析实现的关键代码。更完备示例代码请参看我的 <a href="https://github.com/likema/ace_echod">ace_echod</a></p>

<h2>实现浅析</h2>

<h3>事件循环函数</h3>

<p><code>event_loop</code> 将作为线程函数运行于独立线程中，它与 ACE 教科书基本一样：</p>

<pre><code class="cpp">ACE_THR_FUNC_RETURN event_loop(ACE_Reactor* reactor)
{
    reactor-&gt;owner(ACE_OS::thr_self()); // 将reactor “绑定” 本线程。
    while (!reactor-&gt;reactor_event_loop_done()) {
        reactor-&gt;run_reactor_event_loop();
    }

    return 0;
}
</code></pre>

<h3>事件循环管理器</h3>

<pre><code class="cpp">class Event_Loop_Manager {
public:
    // 为简化，忽略 ctor 、dtor 和 close

    bool open(unsigned threads)
    {
        // 创建Reactor数组。
        reactors_.reset(new ACE_Reactor*[threads]);
        memset(reactors_.get(), 0, sizeof(ACE_Reactor*) * threads);

        // 创建线程ID数组
        tids_.reset(new ACE_thread_t[threads]);
        memset(tids_.get(), 0, sizeof(ACE_thread_t*) * threads);

        // 创建事件循环
        threads_ = threads;
        for (unsigned i = 0; i &lt; threads_; ++i) {
            reactors_[i] = new ACE_Reactor(new ACE_Select_Reactor, 1), false);
            ACE_Thread_Manager::instance()-&gt;spawn(
                    (ACE_THR_FUNC) event_loop, reactors[i],
                    THR_NEW_LWP | THR_JOINABLE | THR_INHERIT_SCHED, &amp;tid);
        }

        current_ = 0;
        return true;
    }

    /// 以简单循环方式返回 Reactor
    ACE_Reactor* reactor()
    {
        ACE_Reactor* r = reactors_[current_];
        current_ = (current_ + 1) % threads_;
        return r;
    }
protected:
    ACE_Auto_Basic_Array_Ptr&lt;ACE_Reactor*&gt; reactors_;
    ACE_Auto_Basic_Array_Ptr&lt;ACE_thread_t&gt; tids_;
    unsigned threads_;
    unsigned current_; // 当前分配 Reactor 索引
};
</code></pre>

<h3>Echo Acceptor</h3>

<p>据 ACE 的 Acceptor 模式, <code>Echo_Handler</code> 继承于 <code>ACE_Svc_Handler&lt;ACE_SOCK_STREAM, ACE_NULL_SYNCH&gt;</code>，它与 ACE 教科书实现相似。</p>

<ul>
<li><code>Echo_Acceptor</code> 注册默认 Reactor ，其事件循环运行于主线程。</li>
<li>创建 <code>Echo_Handler</code> 对象时，事件循环管理器以简单循环方式分配 Reactor 给新对象。</li>
</ul>


<pre><code class="cpp">class Echo_Acceptor: public ACE_Acceptor&lt;Echo_Handler, ACE_SOCK_ACCEPTOR&gt; {
public:
    int open(const addr_type&amp; local_addr, int flags, int use_select, int reuse_addr)
    {
        flags_ = flags;
        use_select_ = use_select;
        reuse_addr_ = reuse_addr;
        peer_acceptor_addr_ = local_addr;

        if (peer_acceptor_.open(local_addr, reuse_addr) == -1)
            return -1;

        (void) peer_acceptor_.enable(ACE_NONBLOCK);
        ACE_Reactor::instance()-&gt;register_handler(
            this, ACE_Event_Handler::ACCEPT_MASK);

        this-&gt;reactor(ACE_Reactor::instance());

        // 按逻辑CPU数初始化事件循环（线程）数。
        return loops_.open(reactor_type, ACE_OS::num_processors()) ? 0 : -1;
    }

    virtual int make_svc_handler(handler_type*&amp; sh)
    {
        if (!sh)
            ACE_NEW_RETURN(sh, handler_type, -1);

        // 事件循环管理器给 Echo_Handler 对象分配事件循环。
        sh-&gt;reactor(loops_.reactor());
        return 0;
    }

protected:
    Event_Loop_Manager loops_;
};
</code></pre>

<h2>存在问题</h2>

<ul>
<li>因 <code>ACE_Reactor::size</code> 实现<a href="https://github.com/DOCGroup/ACE_TAO/issues/855#issuecomment-612391823">不一致</a>，除 <code>ACE_Dev_Poll_Reactor</code> 返回当前注册的 handler 数量，其它实现返回handler表的容量。导致无法直接通过注册 handler 的数量，实现 <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round-Robin</a>，即均衡分配 handler</li>
<li>因 <code>ACE_Reactor</code> 无法获取当前是否等待事件（即空闲）状态，导致无法直接将 handler 分配到空闲事件循环中。</li>
</ul>


<p>解决上述问题，要么直接修改 ACE 的实现，要么在具体 handler 实现中增加状态或统计变量，两者都需用原子变量来避免加锁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MakeProjectCreator (MPC) 简介]]></title>
    <link href="http://www.malike.net.cn/blog/2008/10/05/mpc-tutorial/"/>
    <updated>2008-10-05T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2008/10/05/mpc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.ociweb.com/products/mpc">Makefile, Project, and Workspace Creator (MPC)</a> 原始OCI为网络通信库ACE开发的跨平台工程文件生成工具，它可以生成很多种工程文件，例如Windows平台的Borland Developer Studio, Borland C++ Build 2007, Borland Makefile，Microsoft eMbedded VC3, Microsoft Visual C++ 6/7/71/8/9/10, nmake；Linux平台的automake, make等。</p>

<p>下面将以Windows平台的nmake和vc9为例介绍MPC的使用方法。首先，我们需要下载</p>

<ol>
<li><a href="http://www.activestate.com/activeperl">ActivePerl</a>，双击执行安装;</li>
<li><a href="http://download.ociweb.com/MPC/">MPC</a>，以解压到C:盘为例，设置系统环境变量MPC_ROOT为C:\MPC，以及将%MPC_ROOT%追加系统环境变量PATH。当然，你也可以通过双击执行C:\MPC\registry.pl将生成工程文件的功能注册到右键菜单中。</li>
</ol>


<h2>一、一个Hello World工程</h2>

<p>首先，建立目录helloworld，并且在这个目录下且创建helloworld.cpp，内容如下：</p>

<pre><code class="cpp">int main ()
{
    std::cout &lt;&lt; "Hello World!" &lt;&lt; std::endl;
}
</code></pre>

<p>然后，创建MPC工程文件helloworld.mpc，内容如下：</p>

<pre><code class="plain">project {
    exename = helloworld
}
</code></pre>

<p>最后，打开Visual Studio 2008 Command Prompt（也可以用VS2003或2005的），进入helloworld的目录, 然后输入</p>

<pre><code>mwc.pl -type nmake
</code></pre>

<p>就生成了格式为nmake的Makefile，它默认包含两个配置Debug和Release。让我们编译一下Debug版本：</p>

<pre><code>nmake CFG="Win32 Debug"
</code></pre>

<p>你会发现helloworld.exe就生成在当前目录。</p>

<p>或许你希望debug和release生成的exe分别放在debug和release目录，修改一下MPC文件</p>

<pre><code class="plain">project {
    exename = helloworld
    specific (nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
        Debug::install = debug
        Release::install = release
    }
}
</code></pre>

<p>或许你更喜欢用IDE，让我们生成VS2008的工程文件吧：</p>

<pre><code>mwc.pl -type vc9
</code></pre>

<h2>二、一个简单dll工程</h2>

<p>首先，建立目录hellodll，并且在这个目录下且创建hellodll.h，内容如下：</p>

<pre><code class="c">#ifndef HELLO_DLL_H
#define HELLO_DLL_H

#ifdef HELLO_BUILD_DLL
#   define HELLO_Export __declspec(dllexport)
#else
#   define HELLO_Export __declspec(dllimport)
#endif /* HELLO_BUILD_DLL */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

HELLO_Export void print_hello ();

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /* HELLO_DLL_H */
</code></pre>

<p>然后，创建文件hellodll.cpp，内容如下：</p>

<pre><code class="c">#include "hellodll.h"

void print_hello ()
{
    std::cout &lt;&lt; "Hello World!" &lt;&lt; std::endl;
}
</code></pre>

<p>最后，创建文件hellodll.mpc，内容如下</p>

<pre><code class="plain">project {
    sharedname = hello
    dynamicflags += HELLO_BUILD_DLL
    specific(nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
        Debug::dllout = debug
        Release::dllout = release
    }
}
</code></pre>

<p>之后，执行如下命令，可以生成Debug和Release的dll。注意Debug的dll是hellod.dll。</p>

<pre><code>mwc.pl -type nmake
nmake
nmake CFG="Win32 Release"
</code></pre>

<p>接下来，我们做一个工程来驱动这个dll</p>

<h2>三、hello dll的测试工程</h2>

<p>首先，在原来的目录hellodll下建立文件hellowtest.cpp，内容如下：</p>

<pre><code class="c">#include "hellodll.h"

int main ()
{
    print_hello ();
    return 0;
}
</code></pre>

<p>然后，创建文件hellotest.mpc，内容如下：</p>

<pre><code class="plain">project {
    after += hellodll
    exename = hellotest
    libs += hello

    Source_Files {
        hellotest.cpp
    }

    specific(nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
        Debug::libpaths = debug
        Debug::install = debug
        Release::libpaths = Release
        Release::install = Release
    }
}
</code></pre>

<p>注意到helloworld.mpc和hellotest.mpc的差异吗？后者的after语句表示hellotest.mpc依赖于hellodll.mpc，必须在其后编译。另外，我在后者增加了Source_Files块，顾名思义，其作用是指定工程源文件(cpp和c)列表。如果没有它，MPC默认会将hellotest.mpc所在目录的所有源文件作为这个工程的源文件，这显然不是我们希望看到的；同理，需要在hellodll.mpc增加Source_Files块，修改后的内容如下：</p>

<pre><code class="plain">project {
    sharedname = hello
    dynamicflags += HELLO_BUILD_DLL

    Source_Files {
        hellodll.cpp
    }

    specific (nmake, vc6, vc7, vc71, vc8, vc9, vc10) {
        Debug::dllout = debug
        Release::dllout = Release
    }
}
</code></pre>

<p>类似Source_Files块，还有Header_Files, Inline_Files和Resoure_Files等，具体可以查看MPC官方文档。
最后，重新执行一下</p>

<pre><code>mwc.pl -type nmake
nmake
nmake CFG="Win32 Release"
</code></pre>

<p>关于MPC更多的内容和细节可以下载<a href="http://downloads.ociweb.com/MPC/docs/html/MakeProjectCreator.html">OCI的《TAO开发指南》的MPC样章</a></p>
]]></content>
  </entry>
  
</feed>
