<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2021-06-04T07:25:12+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[安全远程访问Docker]]></title>
    <link href="http://www.malike.net.cn/blog/2019/08/19/docker-remote/"/>
    <updated>2019-08-19T02:40:06+00:00</updated>
    <id>http://www.malike.net.cn/blog/2019/08/19/docker-remote</id>
    <content type="html"><![CDATA[<p>Docker服务端（<code>dockerd</code>）默认监听在Unix套接口 <code>/var/run/docker.sock</code> 。仅能本地或SSH至Docker运行的主机访问，不利于自动化开发测试。</p>

<p>若需远程访问，得配置它同时监听在TCP端口（默认2376）。</p>

<p>然而，Docker不支持用户认证。 可通过配置TLS客户端和服务端认证，规避非法客户端远程访问服务端。</p>

<h2>一、创建CA</h2>

<pre><code class="bash">openssl genrsa -out ca-key.pem 4096
openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem
</code></pre>

<p>交互式输入各种选项，其中</p>

<pre><code>Common Name (e.g. server FQDN or YOUR name) []: &lt;HOST&gt;
</code></pre>

<p><code>&lt;HOST&gt;</code> 为Docker远程服务端域名（允许不存在的域名）。</p>

<h2>二、创建远程服务端证书</h2>

<p>创建 <code>extfile.cnf</code></p>

<pre><code>subjectAltName = DNS:&lt;HOST&gt;,IP:&lt;IP&gt;,IP:127.0.0.1
extendedKeyUsage = serverAuth
</code></pre>

<ul>
<li><code>&lt;HOST&gt;</code> 与上同。</li>
<li><code>&lt;IP&gt;</code> 为Docker远程服务端IP</li>
</ul>


<p>然后：</p>

<pre><code class="bash">openssl genrsa -out server-key.pem 4096
openssl req -subj "/CN=&lt;HOST&gt;" -sha256 -new -key server-key.pem -out server.csr
openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf
</code></pre>

<h2>三、创建客户端证书</h2>

<p>创建 <code>extfile-client.cnf</code></p>

<pre><code>extendedKeyUsage = clientAuth
</code></pre>

<p>然后：</p>

<pre><code class="bash">openssl genrsa -out key.pem 4096
openssl req -subj '/CN=client' -new -key key.pem -out client.csr
openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf
</code></pre>

<p>至此，删除中间文件，并降低相关密钥访问权限。</p>

<pre><code class="bash">rm -f client.csr server.csr extfile.cnf extfile-client.cnf
chmod 0400 ca-key.pem key.pem server-key.pem
chmod 0444 ca.pem server-cert.pem cert.pem
</code></pre>

<h2>四、远程复制服务端相关证书</h2>

<p>通过<code>scp</code>，将 <code>ca.pem</code>, <code>server-cert.pem</code> 和 <code>server-key.pem</code> 复制至远程服务端 <code>/etc/docker</code> 目录中。</p>

<p>注：<code>ca-key.pem</code> 不应复制至远程服务端。因既不意义，又增大泄漏可能性。</p>

<h2>五、编辑远程服务端 <code>/etc/docker/daemon.json</code></h2>

<pre><code class="json">{
    "hosts": ["unix:///var/run/docker.sock", "tcp://0.0.0.0:2376"],
    "tls": true,
    "tlscacert": "/etc/docker/ca.pem",
    "tlscert": "/etc/docker/server-cert.pem",
    "tlskey": "/etc/docker/server-key.pem",
    "tlsverify": true
}
</code></pre>

<p>为保证证书和密钥安全，须</p>

<pre><code class="bash">sudo chown root.root /etc/docker/{ca,server-cert,server-key}.pem
sudo chmod og-rwx /etc/docker/{ca,server-cert,server-key}.pem
</code></pre>

<h2>六、重启远程服务端Docker服务</h2>

<p>在 <code>/lib/systemd/system/docker.service</code> 的 <code>ExecStart</code> 中， <code>-H fd://</code> 与 <code>/etc/docker/daemon.json</code> 的 <code>hosts</code> 冲突，将导致Docker服务启动失败。</p>

<p>若在 <code>/lib/systemd/system/docker.service</code> 中直接删除 <code>-H fd://</code> ，docker-ce包升级将恢复原样。</p>

<p>可创建 <code>/etc/systemd/system/docker.service.d/options.conf</code> 及其父目录，并编辑</p>

<pre><code class="ini">[Service]
ExecStart=
ExecStart=/usr/bin/dockerd --containerd=/run/containerd/containerd.sock
</code></pre>

<p>或执行如下命令：</p>

<pre><code class="bash">sudo mkdir -p /etc/systemd/system/docker.service.d
sed -n '/\[Service\]/ {
    a \
ExecStart=
    p
}

/ExecStart=.*/ {
    s/-H fd:\/\/ //p
}' /lib/systemd/system/docker.service | sudo tee /etc/systemd/system/docker.service.d/options.conf
</code></pre>

<p>然后：</p>

<pre><code class="bash">sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>

<h2>七、配置客户端</h2>

<p>在客户端和CA相关证书和密钥所在目录，创建<code>docker.env</code> ：</p>

<pre><code class="bash">export DOCKER_HOST=&lt;HOST&gt;:2376
export DOCKER_TLS_VERIFY=1
export DOCKER_CERT_PATH=`realpath \`dirname $0\``
</code></pre>

<p>在远程访问Docker前，载入该文件：</p>

<pre><code class="bash">source &lt;dir&gt;/docker.env
</code></pre>

<p>然后，控制远程Docker与本地Docker类似，如：</p>

<pre><code class="bash">docker images
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="https://docs.docker.com/engine/security/https/">Protect the Docker daemon socket</a></li>
<li><a href="https://gist.github.com/kekru/974e40bb1cd4b947a53cca5ba4b0bbe5">Enable Docker Remote API with TLS client verification</a></li>
<li><a href="https://tech.paulcz.net/blog/secure-docker-with-tls/">Securing Docker with TLS certificates</a></li>
<li><a href="https://nickjanetakis.com/blog/docker-tip-73-connecting-to-a-remote-docker-daemon">Docker Tip #73: Connecting to a Remote Docker Daemon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Docker容器中创建GlusterFS]]></title>
    <link href="http://www.malike.net.cn/blog/2017/03/02/glusterfs-docker-tutorial/"/>
    <updated>2017-03-02T18:06:07+00:00</updated>
    <id>http://www.malike.net.cn/blog/2017/03/02/glusterfs-docker-tutorial</id>
    <content type="html"><![CDATA[<p>本文展示如何在一台Linux物理机/虚拟机上，创建GlusterFS集群。目的在于测试和学习GlusterFS，而非将GlusterFS应用生产环境。</p>

<h2>下载节点容器镜像</h2>

<pre><code class="bash">docker pull gluster/gluster-centos
</code></pre>

<h2>创建节点容器实例</h2>

<pre><code class="bash">for i in `seq 1 3`; do
        docker run -d --privileged=true --name gluster$i --hostname=gluster$i \
                -v /etc/glusterfs$i:/etc/glusterfs:z \
                -v /var/lib/glusterd$i:/var/lib/glusterd:z \
                -v /var/log/glusterfs$i:/var/log/glusterfs:z \
                -v /srv/glusterfs$i:/srv/glusterfs:z \
                -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
                -v /dev:/dev \
                gluster/gluster-centos
done
</code></pre>

<h2>组建集群</h2>

<pre><code class="bash">docker exec -ti gluster1 /bin/bash
</code></pre>

<pre><code class="bash">gluster peer probe &lt;gluster2 ip addr&gt;
gluster peer probe &lt;gluster3 ip addr&gt;
</code></pre>

<h2>创建卷</h2>

<h3>冗余卷 (replica)</h3>

<pre><code class="bash">gluster peer volume create v1 replica 3 172.17.0.{2,3,4}:/srv/glusterfs/v1 force
</code></pre>

<h3>条带卷 (stripe)</h3>

<pre><code class="bash">gluster peer volume create v2 strip 3 172.17.0.{2,3,4}:/srv/glusterfs/v2 force
</code></pre>

<h3>纠删码卷 (disperse)</h3>

<pre><code class="bash">gluster peer volume create e3 disperse 3 redundancy 1 172.17.0.{2,3,4}:/srv/glusterfs/v3 force
</code></pre>

<ul>
<li>由于这些容器实例的/srv/glusterfst与/在同一个分区，故需要指定force参数。</li>
<li>创建容器时，将host的/srv/glusterfs相关目录绑定至容器/srv/glusterfs是为了避免<a href="https://github.com/docker/docker/issues/1070">no xattr support in Docker #1070</a></li>
</ul>


<h2>挂载卷</h2>

<h3>通过FUSE挂载</h3>

<pre><code class="bash">mount -t glusterfs 172.17.0.2:/v1 /mnt/glusterfs/
</code></pre>

<h2>脚本化</h2>

<p>为了便于测试，我将上述诸多过程归纳成脚本：<a href="https://gist.github.com/likema/69f6617c7567766302ec1ee4a53a0f6c#file-gluster_docker">gluster_docker</a></p>

<h2>Gluster Web Interface</h2>

<p><a href="https://github.com/oss2016summer/gluster-web-interface">gluster-web-interface</a>是一个管理GlusterFS的Web应用应用，它基于Ruby on Rails实现。</p>

<p>为了简化其安装，我创建其docker镜像<a href="https://hub.docker.com/r/like/gluster-web-interface/">docker-gluster-web-interface</a>：</p>

<pre><code class="bash">docker run -it -p 3000:3000 like/gluster-web-interface
</code></pre>
]]></content>
  </entry>
  
</feed>
