<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: actor | Like的世界]]></title>
  <link href="http://www.malike.net.cn/blog/categories/actor/atom.xml" rel="self"/>
  <link href="http://www.malike.net.cn/"/>
  <updated>2016-11-28T18:07:31+00:00</updated>
  <id>http://www.malike.net.cn/</id>
  <author>
    <name><![CDATA[Like Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于Python multiprocessing的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor/"/>
    <updated>2016-07-11T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/11/python-multiprocessing-actor</id>
    <content type="html"><![CDATA[<p>虽然<a href="/blog/2016/04/20/python-gevent-actor/">基于Gevent的Actor</a>和<a href="/blog/2016/07/03/python-3-dot-5-async-actor/">基于Python 3.5异步的Actor</a>都支持并发（concurrent）计算（仅运行于单进程中），但是不支持并行（parallel）计算，即无法利用多核。</p>

<p>Python内置的multiprocessing模块不仅支持并行计算，而且与Gevent接口相似。所以，模仿Gevent的Actor实现multiprocessing的Actor并不困难。</p>

<h2>multiprocessing的Actor实现</h2>

<pre><code class="python">from multiprocessing import Process, Queue

try:
    from Queue import Empty
except ImportError:
    from queue import Empty


class Actor(Process):
    def __init__(self, receive_timeout=None):
        Process.__init__(self)
        self.inbox = Queue()
        self.receive_timeout = receive_timeout

    def send(self, message):
        self.inbox.put_nowait(message)

    def receive(self, message):
        raise NotImplemented()

    def handle_timeout(self):
        pass

    def run(self):
        self.running = True
        while self.running:
            try:
                message = self.inbox.get(True, self.receive_timeout)
            except Empty:
                self.handle_timeout()
            else:
                self.receive(message)
</code></pre>

<h2>基于message的扩展</h2>

<p>将并行Actor扩展为发布-订阅者模式，基本与Gevent的实现一样。</p>

<pre><code class="python">from message import observable

from actor import Actor


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>基于Publisher实现Ping-Pong，与Gevent的实现差异也不大。</p>

<p>不同的是它实际启动3个进程。除主进程外，每个actor分别运行于独立进程，从而实现多核计算。主进程监督2个actor进程运行，如启动、停止以及异常处理等。</p>

<pre><code class="python">import time

from publisher import Publisher


class Pinger(Publisher):
    def receive(self, message):
        print(message)
        time.sleep(2)
        self.publish('ping')

    def handle_timeout(self):
        print('pinger timeout')


class Ponger(Publisher):
    def receive(self, message):
        print(message)
        time.sleep(2)
        self.publish('ping')

    def handle_timeout(self):
        print('ponger timeout')


ping = Pinger('evt.ping', 1)
pong = Ponger('evt.pong', 1)

ping.subcribe(pong)
pong.subcribe(ping)
ping.start()
pong.start()

ping.publish('start')

pong.join()
ping.join()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Python 3.5异步的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor/"/>
    <updated>2016-07-03T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/07/03/python-3-dot-5-async-actor</id>
    <content type="html"><![CDATA[<h2>Python 3.5异步模型</h2>

<p>Python 3.5推出了async/await语法，在语法层面简化了异步编程。官方库asyncio是应用async/await的途径。</p>

<p>Ubuntu 16.04默认安装Python 3.5，或者通过<a href="/blog/2016/05/21/pyenv-tutorial/">pyenv</a>安装它。</p>

<h2>异步Actor的实现</h2>

<p>基于asyncio，可以实现async actor.</p>

<pre><code class="python">import asyncio


class Actor(object):
    def __init__(self):
        self.inbox = asyncio.Queue()

    def send(self, message):
        self.inbox.put_nowait(message)

    async def receive(self, message):
        raise NotImplemented()

    async def run(self):
        self.running = True

        while self.running:
            message = await self.inbox.get()
            await self.receive(message)
</code></pre>

<p>上述代码的关键是通过asyncio.Queue异步接收消息，并异步处理接收到的消息。</p>

<p>通过这个类，实现Ping-Pong示例：</p>

<pre><code class="python">import asyncio

from actor import Actor


class Pinger(Actor):
    async def receive(self, message):
        print(message)
        pong.send('ping')
        await asyncio.sleep(3)


class Ponger(Actor):
    async def receive(self, message):
        print(message)
        ping.send('pong')
        await asyncio.sleep(3)


ping = Pinger()
pong = Ponger()

ping.send('start')

loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait((ping.run(), pong.run())))
loop.close()
</code></pre>

<p>该示例代码中，actor之间同步发送消息（asyncio.Queue.put_nowait），由于运行在单线程上，并不存在竞争。</p>

<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用asyncio.wait_for的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<pre><code class="python">import asyncio


class Actor(object):
    def __init__(self, receive_timeout=None):
        self.inbox = asyncio.Queue()
        self.receive_timeout = receive_timeout

    def send(self, message):
        self.inbox.put_nowait(message)

    async def receive(self, message):
        raise NotImplemented()

    async def handle_timeout(self):
        pass

    async def run(self):
        self.running = True

        while self.running:
            try:
                message = await asyncio.wait_for(self.inbox.get(),
                                                 self.receive_timeout)
            except asyncio.TimeoutError:
                await self.handle_timeout()
            else:
                await self.receive(message)
</code></pre>

<h2>基于message的扩展</h2>

<p>由于<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>仅支持Python 2，而且Google Code已经停止服务。</p>

<p>基于原代码基础上，我在GitHub创建<a href="https://github.com/likema/python-message">python-message</a>，并扩展支持Python 3.</p>

<p>新版本message，也可以通过pip安装：</p>

<pre><code class="bash">pip install https://github.com/likema/python-message/archive/master.zip
</code></pre>

<p>在此基础上，将异步Actor扩展为发布-订阅者模式。</p>

<pre><code class="python">from message import observable

from actor import Actor


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>基于Publisher实现Ping-Pong，从而解耦发送者与接收者，且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<pre><code class="python">import asyncio

from publisher import Publisher


class Pinger(Publisher):
    async def receive(self, message):
        print(message)
        await asyncio.sleep(3)
        self.publish('ping')

    async def handle_timeout(self):
        print('Pinger timeout')


class Ponger(Publisher):
    async def receive(self, message):
        print(message)
        await asyncio.sleep(3)
        self.publish('pong')

    async def handle_timeout(self):
        print('Ponger timeout')


ping = Pinger('evt.ping', 1)
pong = Ponger('evt.pong', 1)

ping.subcribe(pong)
pong.subcribe(ping)
ping.publish('start')

loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait((ping.run(), pong.run())))
loop.close()
</code></pre>

<h2>存在的问题</h2>

<p>相比<a href="/blog/2016/04/20/python-gevent-actor/">Gevent实现的Actor</a>，异步Actor并不透明支持所有的I/O函数，它仅支持基于asyncio实现的库，如<a href="http://aiohttp.readthedocs.io/en/stable/">aiohttp</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackabuse.com/python-async-await-tutorial/">Python async/await Tutorial</a></li>
<li><a href="https://github.com/mehmetkose/python3.5-async-crawler">python3.5-async-crawler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[扩展Python Gevent的Actor模型]]></title>
    <link href="http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor/"/>
    <updated>2016-04-20T00:00:00+00:00</updated>
    <id>http://www.malike.net.cn/blog/2016/04/20/python-gevent-actor</id>
    <content type="html"><![CDATA[<h2>什么是Actor模型？</h2>

<p><a href="https://en.wikipedia.org/wiki/Actor_model">Actor模型</a>（<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E8%88%87%E8%80%85%E6%A8%A1%E5%BC%8F">中文版</a>）是一种基于消息传递（message-passing）的并发（concurrent）计算模型。</p>

<p>它与OOP异同：</p>

<ul>
<li>它推崇“一切皆为Actor”，而OOP推崇“一切皆为Object”</li>
<li>表面上，Actor通过发送消息与其他Actor通信，OOP的Object通过发送消息与其他Object通信。实际上，前者为发送结构化的数据，而后者为调用对方的方法。</li>
<li>它的发送者与已经发送的消息解耦，它允许进行异步通信，从而实现发送者与接收者并发执行。而OOP的方法调用者（发送者）与方法被调用者（接收者）通常顺序执行，而且调用者与被调用者通常具有较强的耦合。</li>
<li>它的消息接收者是通过地址区分的，有时也被称作“邮件地址”。而OOP的Object通过引用（地址）来区分。</li>
<li>它着重消息传递，而OOP着重于类与对象。</li>
</ul>


<h2>Gevent的Actor实现</h2>

<p><a href="http://sdiehl.github.io/gevent-tutorial/">gevent</a>（<a href="http://xlambda.com/gevent-tutorial/">中文版</a>）是一个基于libev的并发库，它为各种并发和网络相关的任务提供了整洁的API。</p>

<p>其<a href="http://sdiehl.github.io/gevent-tutorial/#actors">Actors</a>（<a href="http://xlambda.com/gevent-tutorial/#actors">中文版</a>）章节已介绍了如何基于Greenlet和 Queue实现</p>

<p>该实现存在的问题：发送者与接收者紧耦合，发送者持有接收者的对象引用。</p>

<h2>解决办法</h2>

<p>在此基础上，我利用<a href="http://blog.csdn.net/gzlaiyonghao/article/details/7215315">message</a>库将其扩展为发布-订阅者模式。</p>

<pre><code class="python">from gevent.queue import Queue
from gevent import Greenlet
from message import observable


class Actor(Greenlet):
    def __init__(self):
        self.inbox = Queue()
        Greenlet.__init__(self)

    def send(self, message):
        self.inbox.put(message)

    def receive(self, message):
        raise NotImplemented()

    def _run(self):
        self.running = True

        while self.running:
            message = self.inbox.get()
            self.receive(message)


@observable
class Publisher(Actor):
    def __init__(self, subject):
        self.subject = subject
        Actor.__init__(self)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>

<p>如此，不仅将发送者与接收者解耦，而且支持发送者发送1条消息时，多个接收者接收同1条消息。</p>

<p>类似Ping-Pong的示例，Pinger对象订阅了Ponger对象的evt.pong事件，Ponger对象订阅Pinger对象的evt.ping事件。</p>

<pre><code class="python">import gevent


class Pinger(Publisher):
    def receive(self, message):
        print(message)
        self.publish('ping')
        gevent.sleep(1)


class Ponger(Publisher):
    def receive(self, message):
        print(message)
        self.publish('pong')
        gevent.sleep(1)


ping = Pinger('evt.ping')
pong = Ponger('evt.pong')

ping.subcribe(pong)
pong.subcribe(ping)
ping.start()
pong.start()

ping.publish('start')
gevent.joinall([ping, pong])
</code></pre>

<h2>接收消息超时(timeout)</h2>

<p>某些应用场景需要周期性激活Actor，当Actor没有收到任何消息时。</p>

<p>基于上述代码，利用gevent.queue.get的超时功能来实现接收消息超时。如此，进一步加强Actor的并发能力。</p>

<pre><code class="python">from gevent.queue import Queue, Empty
from gevent import Greenlet
from message import observable


class Actor(Greenlet):
    def __init__(self, receive_timeout=None):
        self.inbox = Queue()
        self.receive_timeout = receive_timeout
        Greenlet.__init__(self)

    def send(self, message):
        self.inbox.put(message)

    def receive(self, message):
        raise NotImplemented()

    def handle_timeout(self):
        pass

    def _run(self):
        self.running = True

        while self.running:
            try:
                message = self.inbox.get(True, self.receive_timeout)
            except Empty:
                self.handle_timeout()
            else:
                self.receive(message)


@observable
class Publisher(Actor):
    def __init__(self, subject, receive_timeout=None):
        self.subject = subject
        Actor.__init__(self, receive_timeout)

    def subcribe(self, observer):
        self.sub(self.subject, observer.send)

    def publish(self, message):
        self.pub(self.subject, message)
</code></pre>
]]></content>
  </entry>
  
</feed>
